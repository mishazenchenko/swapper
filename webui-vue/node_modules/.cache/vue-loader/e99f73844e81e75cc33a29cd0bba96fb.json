{"remainingRequest":"/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/node_modules/vue-svg-inline-loader/src/index.js!/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/SecurityAndAccess/Sessions/Sessions.vue?vue&type=style&index=0&id=7c92a7b1&lang=scss","dependencies":[{"path":"/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/SecurityAndAccess/Sessions/Sessions.vue","mtime":1749201729612},{"path":"/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1750686224404},{"path":"/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/node_modules/vue-loader/dist/stylePostLoader.js","mtime":1750686215520},{"path":"/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/node_modules/@vue/cli-service/node_modules/postcss-loader/dist/cjs.js","mtime":1750686224356},{"path":"/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/node_modules/sass-loader/dist/cjs.js","mtime":1750686215808},{"path":"/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/node_modules/cache-loader/dist/cjs.js","mtime":1750686218200},{"path":"/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/node_modules/vue-loader/dist/index.js","mtime":1750686215328},{"path":"/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/node_modules/vue-svg-inline-loader/src/index.js","mtime":1750686215304}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiN0YWJsZS1zZXNzaW9uLWxvZ3MgewogIHRkIC5idG4tbGluayB7CiAgICB3aWR0aDogYXV0byAhaW1wb3J0YW50OwogIH0KfQo="},{"version":3,"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/SecurityAndAccess/Sessions/Sessions.vue"],"names":[],"mappings":";AAkTA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAClB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACxB;AACF","file":"/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/SecurityAndAccess/Sessions/Sessions.vue","sourceRoot":"","sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title />\n    <b-row class=\"align-items-end\">\n      <b-col sm=\"6\" md=\"5\" xl=\"4\">\n        <search\n          :placeholder=\"$t('pageSessions.table.searchSessions')\"\n          data-test-id=\"sessions-input-searchSessions\"\n          @change-search=\"onChangeSearchInput\"\n          @clear-search=\"onClearSearchInput\"\n        />\n      </b-col>\n      <b-col sm=\"3\" md=\"3\" xl=\"2\">\n        <table-cell-count\n          :filtered-items-count=\"filteredRows\"\n          :total-number-of-cells=\"allConnections.length\"\n        ></table-cell-count>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <table-toolbar\n          ref=\"toolbar\"\n          :selected-items-count=\"selectedRows.length\"\n          :actions=\"batchActions\"\n          @clear-selected=\"clearSelectedRows($refs.table)\"\n          @batch-action=\"onBatchAction\"\n        >\n        </table-toolbar>\n        <b-table\n          id=\"table-session-logs\"\n          ref=\"table\"\n          responsive=\"md\"\n          selectable\n          no-select-on-click\n          hover\n          show-empty\n          sort-by=\"sessionID\"\n          :busy=\"isBusy\"\n          :fields=\"fields\"\n          :items=\"allConnections\"\n          :filter=\"searchFilter\"\n          :empty-text=\"$t('global.table.emptyMessage')\"\n          :per-page=\"perPage\"\n          :current-page=\"currentPage\"\n          @filtered=\"onFiltered\"\n          @row-selected=\"onRowSelected($event, allConnections.length)\"\n        >\n          <!-- Checkbox column -->\n          <template #head(checkbox)>\n            <b-form-checkbox\n              v-model=\"tableHeaderCheckboxModel\"\n              data-test-id=\"sessions-checkbox-selectAll\"\n              :indeterminate=\"tableHeaderCheckboxIndeterminate\"\n              @change=\"onChangeHeaderCheckbox($refs.table)\"\n            >\n              <span class=\"sr-only\">{{ $t('global.table.selectAll') }}</span>\n            </b-form-checkbox>\n          </template>\n          <template #cell(checkbox)=\"row\">\n            <b-form-checkbox\n              v-model=\"row.rowSelected\"\n              :data-test-id=\"`sessions-checkbox-selectRow-${row.index}`\"\n              @change=\"toggleSelectRow($refs.table, row.index)\"\n            >\n              <span class=\"sr-only\">{{ $t('global.table.selectItem') }}</span>\n            </b-form-checkbox>\n          </template>\n\n          <!-- Actions column -->\n          <template #cell(actions)=\"row\">\n            <table-row-action\n              v-for=\"(action, index) in row.item.actions\"\n              :key=\"index\"\n              :value=\"action.value\"\n              :title=\"action.title\"\n              :row-data=\"row.item\"\n              :btn-icon-only=\"false\"\n              :data-test-id=\"`sessions-button-disconnect-${row.index}`\"\n              @click-table-action=\"onTableRowAction($event, row.item)\"\n            ></table-row-action>\n          </template>\n        </b-table>\n      </b-col>\n    </b-row>\n\n    <!-- Table pagination -->\n    <b-row>\n      <b-col sm=\"6\">\n        <b-form-group\n          class=\"table-pagination-select\"\n          :label=\"$t('global.table.itemsPerPage')\"\n          label-for=\"pagination-items-per-page\"\n        >\n          <b-form-select\n            id=\"pagination-items-per-page\"\n            v-model=\"perPage\"\n            :options=\"itemsPerPageOptions\"\n          />\n        </b-form-group>\n      </b-col>\n      <b-col sm=\"6\">\n        <b-pagination\n          v-model=\"currentPage\"\n          first-number\n          last-number\n          :per-page=\"perPage\"\n          :total-rows=\"getTotalRowCount(filteredRows)\"\n          aria-controls=\"table-session-logs\"\n        />\n      </b-col>\n    </b-row>\n  </b-container>\n</template>\n\n<script>\nimport PageTitle from '@/components/Global/PageTitle';\nimport Search from '@/components/Global/Search';\nimport TableCellCount from '@/components/Global/TableCellCount';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport TableToolbar from '@/components/Global/TableToolbar';\n\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport BVPaginationMixin, {\n  currentPage,\n  perPage,\n  itemsPerPageOptions,\n} from '@/components/Mixins/BVPaginationMixin';\nimport BVTableSelectableMixin, {\n  selectedRows,\n  tableHeaderCheckboxModel,\n  tableHeaderCheckboxIndeterminate,\n} from '@/components/Mixins/BVTableSelectableMixin';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport SearchFilterMixin, {\n  searchFilter,\n} from '@/components/Mixins/SearchFilterMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  components: {\n    PageTitle,\n    Search,\n    TableCellCount,\n    TableRowAction,\n    TableToolbar,\n  },\n  mixins: [\n    BVPaginationMixin,\n    BVTableSelectableMixin,\n    BVToastMixin,\n    LoadingBarMixin,\n    SearchFilterMixin,\n  ],\n  beforeRouteLeave(to, from, next) {\n    // Hide loader if the user navigates to another page\n    // before request is fulfilled.\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      fields: [\n        {\n          key: 'checkbox',\n          class: 'text-center',\n        },\n        {\n          key: 'sessionID',\n          label: i18n.global.t('pageSessions.table.sessionID'),\n          class: 'text-center',\n        },\n        {\n          key: 'context',\n          label: i18n.global.t('pageSessions.table.context'),\n          class: 'text-center',\n        },\n        {\n          key: 'username',\n          label: i18n.global.t('pageSessions.table.username'),\n          class: 'text-center',\n        },\n        {\n          key: 'ipAddress',\n          label: i18n.global.t('pageSessions.table.ipAddress'),\n          class: 'text-center',\n        },\n        {\n          key: 'actions',\n          label: '',\n          class: 'text-center',\n        },\n      ],\n      batchActions: [\n        {\n          value: 'disconnect',\n          label: i18n.global.t('pageSessions.action.disconnect'),\n        },\n      ],\n      currentPage: currentPage,\n      itemsPerPageOptions: itemsPerPageOptions,\n      perPage: perPage,\n      selectedRows: selectedRows,\n      searchTotalFilteredRows: 0,\n      tableHeaderCheckboxModel: tableHeaderCheckboxModel,\n      tableHeaderCheckboxIndeterminate: tableHeaderCheckboxIndeterminate,\n      searchFilter: searchFilter,\n    };\n  },\n  computed: {\n    filteredRows() {\n      return this.searchFilter\n        ? this.searchTotalFilteredRows\n        : this.allConnections.length;\n    },\n    allConnections() {\n      return this.$store.getters['sessions/allConnections'].map((session) => {\n        return {\n          ...session,\n          actions: [\n            {\n              value: 'disconnect',\n              title: i18n.global.t('pageSessions.action.disconnect'),\n            },\n          ],\n        };\n      });\n    },\n  },\n  created() {\n    this.startLoader();\n    this.$store.dispatch('sessions/getSessionsData').finally(() => {\n      this.endLoader();\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    onFiltered(filteredItems) {\n      this.searchTotalFilteredRows = filteredItems.length;\n    },\n    onChangeSearchInput(event) {\n      this.searchFilter = event;\n    },\n    disconnectSessions(uris) {\n      this.$store\n        .dispatch('sessions/disconnectSessions', uris)\n        .then((messages) => {\n          messages.forEach(({ type, message }) => {\n            if (type === 'success') {\n              this.successToast(message);\n            } else if (type === 'error') {\n              this.errorToast(message);\n            }\n          });\n        });\n    },\n    onTableRowAction(action, { uri }) {\n      if (action === 'disconnect') {\n        this.$bvModal\n          .msgBoxConfirm(\n            i18n.global.t('pageSessions.modal.disconnectMessage'),\n            {\n              title: i18n.global.t('pageSessions.modal.disconnectTitle'),\n              okTitle: i18n.global.t('pageSessions.action.disconnect'),\n              cancelTitle: i18n.global.t('global.action.cancel'),\n              autoFocusButton: 'ok',\n            },\n          )\n          .then((deleteConfirmed) => {\n            if (deleteConfirmed) this.disconnectSessions([uri]);\n          });\n      }\n    },\n    onBatchAction(action) {\n      if (action === 'disconnect') {\n        const uris = this.selectedRows.map((row) => row.uri);\n        this.$bvModal\n          .msgBoxConfirm(\n            i18n.global.t(\n              'pageSessions.modal.disconnectMessage',\n              this.selectedRows.length,\n            ),\n            {\n              title: i18n.global.t(\n                'pageSessions.modal.disconnectTitle',\n                this.selectedRows.length,\n              ),\n              okTitle: i18n.global.t('pageSessions.action.disconnect'),\n              cancelTitle: i18n.global.t('global.action.cancel'),\n              autoFocusButton: 'ok',\n            },\n          )\n          .then((deleteConfirmed) => {\n            if (deleteConfirmed) {\n              this.disconnectSessions(uris);\n            }\n          });\n      }\n    },\n  },\n};\n</script>\n<style lang=\"scss\">\n#table-session-logs {\n  td .btn-link {\n    width: auto !important;\n  }\n}\n</style>\n"]}]}