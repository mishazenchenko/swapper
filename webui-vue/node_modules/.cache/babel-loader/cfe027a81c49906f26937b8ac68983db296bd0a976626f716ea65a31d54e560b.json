{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-background p-3\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = {\n  key: 2\n};\nconst _hoisted_5 = {\n  key: 3\n};\nconst _hoisted_6 = {\n  class: \"form-text d-inline\"\n};\nconst _hoisted_7 = {\n  class: \"form-text d-inline\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_page_title = _resolveComponent(\"page-title\");\n  const _component_b_form_checkbox = _resolveComponent(\"b-form-checkbox\");\n  const _component_b_form_group = _resolveComponent(\"b-form-group\");\n  const _component_b_col = _resolveComponent(\"b-col\");\n  const _component_b_row = _resolveComponent(\"b-row\");\n  const _component_b_form_text = _resolveComponent(\"b-form-text\");\n  const _component_b_link = _resolveComponent(\"b-link\");\n  const _component_b_form_radio = _resolveComponent(\"b-form-radio\");\n  const _component_info_tooltip = _resolveComponent(\"info-tooltip\");\n  const _component_b_form_input = _resolveComponent(\"b-form-input\");\n  const _component_b_form_invalid_feedback = _resolveComponent(\"b-form-invalid-feedback\");\n  const _component_b_input_group = _resolveComponent(\"b-input-group\");\n  const _component_input_password_toggle = _resolveComponent(\"input-password-toggle\");\n  const _component_b_btn = _resolveComponent(\"b-btn\");\n  const _component_b_form = _resolveComponent(\"b-form\");\n  const _component_page_section = _resolveComponent(\"page-section\");\n  const _component_table_role_groups = _resolveComponent(\"table-role-groups\");\n  const _component_b_container = _resolveComponent(\"b-container\");\n  return _openBlock(), _createBlock(_component_b_container, {\n    fluid: \"xl\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_page_title, {\n      description: $data.$t('pageLdap.pageDescription')\n    }, null, 8 /* PROPS */, [\"description\"]), _createVNode(_component_page_section, {\n      \"section-title\": $data.$t('pageLdap.settings')\n    }, {\n      default: _withCtx(() => [_createVNode(_component_b_form, {\n        novalidate: \"\",\n        onSubmit: _withModifiers($options.handleSubmit, [\"prevent\"])\n      }, {\n        default: _withCtx(() => [_createVNode(_component_b_row, null, {\n          default: _withCtx(() => [_createVNode(_component_b_col, null, {\n            default: _withCtx(() => [_createVNode(_component_b_form_group, {\n              class: \"mb-3\",\n              label: $data.$t('pageLdap.form.ldapAuthentication'),\n              disabled: $data.loading\n            }, {\n              default: _withCtx(() => [_createVNode(_component_b_form_checkbox, {\n                modelValue: $data.form.ldapAuthenticationEnabled,\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.form.ldapAuthenticationEnabled = $event),\n                \"data-test-id\": \"ldap-checkbox-ldapAuthenticationEnabled\",\n                onChange: $options.onChangeldapAuthenticationEnabled\n              }, {\n                default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.action.enable')), 1 /* TEXT */)], undefined, true),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])], undefined, true),\n              _: 1 /* STABLE */\n            }, 8 /* PROPS */, [\"label\", \"disabled\"])], undefined, true),\n            _: 1 /* STABLE */\n          })], undefined, true),\n          _: 1 /* STABLE */\n        }), _createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_b_form_group, {\n          class: \"m-0\",\n          label: $data.$t('pageLdap.ariaLabel.ldapSettings'),\n          \"label-class\": \"sr-only\",\n          disabled: !$data.form.ldapAuthenticationEnabled || $data.loading\n        }, {\n          default: _withCtx(() => [_createVNode(_component_b_row, null, {\n            default: _withCtx(() => [_createVNode(_component_b_col, {\n              md: \"3\",\n              lg: \"4\",\n              xl: \"3\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_b_form_group, {\n                class: \"mb-4\",\n                label: $data.$t('pageLdap.form.secureLdapUsingSsl')\n              }, {\n                default: _withCtx(() => [_createVNode(_component_b_form_text, {\n                  id: \"enable-secure-help-block\"\n                }, {\n                  default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('pageLdap.form.secureLdapHelper')), 1 /* TEXT */)], undefined, true),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_b_form_checkbox, {\n                  id: \"enable-secure-ldap\",\n                  modelValue: $data.form.secureLdapEnabled,\n                  \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.form.secureLdapEnabled = $event),\n                  \"aria-describedby\": \"enable-secure-help-block\",\n                  \"data-test-id\": \"ldap-checkbox-secureLdapEnabled\",\n                  disabled: !$options.caCertificateExpiration || !$options.ldapCertificateExpiration,\n                  onChange: _cache[2] || (_cache[2] = $event => $setup.v$.form.secureLdapEnabled.$touch())\n                }, {\n                  default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.action.enable')), 1 /* TEXT */)], undefined, true),\n                  _: 1 /* STABLE */\n                }, 8 /* PROPS */, [\"modelValue\", \"disabled\"])], undefined, true),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"label\"]), _createElementVNode(\"dl\", null, [_createElementVNode(\"dt\", null, _toDisplayString($data.$t('pageLdap.form.caCertificateValidUntil')), 1 /* TEXT */), $options.caCertificateExpiration ? (_openBlock(), _createElementBlock(\"dd\", _hoisted_2, _toDisplayString(_ctx.$filters.formatDate($options.caCertificateExpiration)), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"dd\", _hoisted_3, \"--\")), _createElementVNode(\"dt\", null, _toDisplayString($data.$t('pageLdap.form.ldapCertificateValidUntil')), 1 /* TEXT */), $options.ldapCertificateExpiration ? (_openBlock(), _createElementBlock(\"dd\", _hoisted_4, _toDisplayString(_ctx.$filters.formatDate($options.ldapCertificateExpiration)), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"dd\", _hoisted_5, \"--\"))]), _createVNode(_component_b_link, {\n                class: \"d-inline-block mb-4 m-md-0\",\n                to: \"/security-and-access/certificates\"\n              }, {\n                default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('pageLdap.form.manageSslCertificates')), 1 /* TEXT */)], undefined, true),\n                _: 1 /* STABLE */\n              })], undefined, true),\n              _: 1 /* STABLE */\n            }), _createVNode(_component_b_col, {\n              md: \"9\",\n              lg: \"8\",\n              xl: \"9\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_b_row, null, {\n                default: _withCtx(() => [_createVNode(_component_b_col, null, {\n                  default: _withCtx(() => [_createVNode(_component_b_form_group, {\n                    label: $data.$t('pageLdap.form.serviceType')\n                  }, {\n                    default: _withCtx(() => [_createVNode(_component_b_form_radio, {\n                      modelValue: $data.form.activeDirectoryEnabled,\n                      \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.form.activeDirectoryEnabled = $event),\n                      \"data-test-id\": \"ldap-radio-activeDirectoryEnabled\",\n                      value: false,\n                      onChange: $options.onChangeServiceType\n                    }, {\n                      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('pageLdap.form.openLDAP')), 1 /* TEXT */)], undefined, true),\n                      _: 1 /* STABLE */\n                    }, 8 /* PROPS */, [\"modelValue\", \"onChange\"]), _createVNode(_component_b_form_radio, {\n                      modelValue: $data.form.activeDirectoryEnabled,\n                      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.form.activeDirectoryEnabled = $event),\n                      \"data-test-id\": \"ldap-radio-activeDirectoryEnabled\",\n                      value: true,\n                      onChange: $options.onChangeServiceType\n                    }, {\n                      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('pageLdap.form.activeDirectory')), 1 /* TEXT */)], undefined, true),\n                      _: 1 /* STABLE */\n                    }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])], undefined, true),\n                    _: 1 /* STABLE */\n                  }, 8 /* PROPS */, [\"label\"])], undefined, true),\n                  _: 1 /* STABLE */\n                })], undefined, true),\n                _: 1 /* STABLE */\n              }), _createVNode(_component_b_row, null, {\n                default: _withCtx(() => [_createVNode(_component_b_col, {\n                  sm: \"6\",\n                  xl: \"4\"\n                }, {\n                  default: _withCtx(() => [_createVNode(_component_b_form_group, {\n                    \"label-for\": \"server-uri\"\n                  }, {\n                    label: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('pageLdap.form.serverUri')) + \" \", 1 /* TEXT */), _createVNode(_component_info_tooltip, {\n                      title: $data.$t('pageLdap.form.serverUriTooltip')\n                    }, null, 8 /* PROPS */, [\"title\"])]),\n                    default: _withCtx(() => [_createVNode(_component_b_input_group, {\n                      prepend: $options.ldapProtocol\n                    }, {\n                      default: _withCtx(() => [_createVNode(_component_b_form_input, {\n                        id: \"server-uri\",\n                        modelValue: $data.form.serverUri,\n                        \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.form.serverUri = $event),\n                        \"data-test-id\": \"ldap-input-serverUri\",\n                        state: _ctx.getValidationState($setup.v$.form.serverUri),\n                        onChange: _cache[6] || (_cache[6] = $event => $setup.v$.form.serverUri.$touch())\n                      }, null, 8 /* PROPS */, [\"modelValue\", \"state\"]), _createVNode(_component_b_form_invalid_feedback, {\n                        role: \"alert\"\n                      }, {\n                        default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.form.fieldRequired')), 1 /* TEXT */)], undefined, true),\n                        _: 1 /* STABLE */\n                      })], undefined, true),\n                      _: 1 /* STABLE */\n                    }, 8 /* PROPS */, [\"prepend\"])], undefined, true),\n                    _: 1 /* STABLE */\n                  })], undefined, true),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_b_col, {\n                  sm: \"6\",\n                  xl: \"4\"\n                }, {\n                  default: _withCtx(() => [_createVNode(_component_b_form_group, {\n                    label: $data.$t('pageLdap.form.bindDn'),\n                    \"label-for\": \"bind-dn\"\n                  }, {\n                    default: _withCtx(() => [_createVNode(_component_b_form_input, {\n                      id: \"bind-dn\",\n                      modelValue: $data.form.bindDn,\n                      \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.form.bindDn = $event),\n                      \"data-test-id\": \"ldap-input-bindDn\",\n                      state: _ctx.getValidationState($setup.v$.form.bindDn),\n                      onChange: _cache[8] || (_cache[8] = $event => $setup.v$.form.bindDn.$touch())\n                    }, null, 8 /* PROPS */, [\"modelValue\", \"state\"]), _createVNode(_component_b_form_invalid_feedback, {\n                      role: \"alert\"\n                    }, {\n                      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.form.fieldRequired')), 1 /* TEXT */)], undefined, true),\n                      _: 1 /* STABLE */\n                    })], undefined, true),\n                    _: 1 /* STABLE */\n                  }, 8 /* PROPS */, [\"label\"])], undefined, true),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_b_col, {\n                  sm: \"6\",\n                  xl: \"4\"\n                }, {\n                  default: _withCtx(() => [_createVNode(_component_b_form_group, {\n                    label: $data.$t('pageLdap.form.bindPassword'),\n                    \"label-for\": \"bind-password\"\n                  }, {\n                    default: _withCtx(() => [_createVNode(_component_input_password_toggle, {\n                      \"data-test-id\": \"ldap-input-togglePassword\"\n                    }, {\n                      default: _withCtx(() => [_createVNode(_component_b_form_input, {\n                        id: \"bind-password\",\n                        modelValue: $data.form.bindPassword,\n                        \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $data.form.bindPassword = $event),\n                        type: \"password\",\n                        state: _ctx.getValidationState($setup.v$.form.bindPassword),\n                        class: \"form-control-with-button\",\n                        onChange: _cache[10] || (_cache[10] = $event => $setup.v$.form.bindPassword.$touch())\n                      }, null, 8 /* PROPS */, [\"modelValue\", \"state\"]), _createVNode(_component_b_form_invalid_feedback, {\n                        role: \"alert\"\n                      }, {\n                        default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.form.fieldRequired')), 1 /* TEXT */)], undefined, true),\n                        _: 1 /* STABLE */\n                      })], undefined, true),\n                      _: 1 /* STABLE */\n                    })], undefined, true),\n                    _: 1 /* STABLE */\n                  }, 8 /* PROPS */, [\"label\"])], undefined, true),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_b_col, {\n                  sm: \"6\",\n                  xl: \"4\"\n                }, {\n                  default: _withCtx(() => [_createVNode(_component_b_form_group, {\n                    label: $data.$t('pageLdap.form.baseDn'),\n                    \"label-for\": \"base-dn\"\n                  }, {\n                    default: _withCtx(() => [_createVNode(_component_b_form_input, {\n                      id: \"base-dn\",\n                      modelValue: $data.form.baseDn,\n                      \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $data.form.baseDn = $event),\n                      \"data-test-id\": \"ldap-input-baseDn\",\n                      state: _ctx.getValidationState($setup.v$.form.baseDn),\n                      onChange: _cache[12] || (_cache[12] = $event => $setup.v$.form.baseDn.$touch())\n                    }, null, 8 /* PROPS */, [\"modelValue\", \"state\"]), _createVNode(_component_b_form_invalid_feedback, {\n                      role: \"alert\"\n                    }, {\n                      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.form.fieldRequired')), 1 /* TEXT */)], undefined, true),\n                      _: 1 /* STABLE */\n                    })], undefined, true),\n                    _: 1 /* STABLE */\n                  }, 8 /* PROPS */, [\"label\"])], undefined, true),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_b_col, {\n                  sm: \"6\",\n                  xl: \"4\"\n                }, {\n                  default: _withCtx(() => [_createVNode(_component_b_form_group, {\n                    \"label-for\": \"user-id-attribute\"\n                  }, {\n                    label: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('pageLdap.form.userIdAttribute')) + \" - \", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_6, _toDisplayString($data.$t('global.form.optional')), 1 /* TEXT */)]),\n                    default: _withCtx(() => [_createVNode(_component_b_form_input, {\n                      id: \"user-id-attribute\",\n                      modelValue: $data.form.userIdAttribute,\n                      \"onUpdate:modelValue\": _cache[13] || (_cache[13] = $event => $data.form.userIdAttribute = $event),\n                      \"data-test-id\": \"ldap-input-userIdAttribute\",\n                      onChange: _cache[14] || (_cache[14] = $event => $setup.v$.form.userIdAttribute.$touch())\n                    }, null, 8 /* PROPS */, [\"modelValue\"])], undefined, true),\n                    _: 1 /* STABLE */\n                  })], undefined, true),\n                  _: 1 /* STABLE */\n                }), _createVNode(_component_b_col, {\n                  sm: \"6\",\n                  xl: \"4\"\n                }, {\n                  default: _withCtx(() => [_createVNode(_component_b_form_group, {\n                    \"label-for\": \"group-id-attribute\"\n                  }, {\n                    label: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('pageLdap.form.groupIdAttribute')) + \" - \", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_7, _toDisplayString($data.$t('global.form.optional')), 1 /* TEXT */)]),\n                    default: _withCtx(() => [_createVNode(_component_b_form_input, {\n                      id: \"group-id-attribute\",\n                      modelValue: $data.form.groupIdAttribute,\n                      \"onUpdate:modelValue\": _cache[15] || (_cache[15] = $event => $data.form.groupIdAttribute = $event),\n                      \"data-test-id\": \"ldap-input-groupIdAttribute\",\n                      onChange: _cache[16] || (_cache[16] = $event => $setup.v$.form.groupIdAttribute.$touch())\n                    }, null, 8 /* PROPS */, [\"modelValue\"])], undefined, true),\n                    _: 1 /* STABLE */\n                  })], undefined, true),\n                  _: 1 /* STABLE */\n                })], undefined, true),\n                _: 1 /* STABLE */\n              })], undefined, true),\n              _: 1 /* STABLE */\n            })], undefined, true),\n            _: 1 /* STABLE */\n          })], undefined, true),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"label\", \"disabled\"])]), _createVNode(_component_b_row, {\n          class: \"mt-4 mb-5\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_b_col, null, {\n            default: _withCtx(() => [_createVNode(_component_b_btn, {\n              variant: \"primary\",\n              type: \"submit\",\n              \"data-test-id\": \"ldap-button-saveSettings\",\n              disabled: $data.loading\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.action.saveSettings')), 1 /* TEXT */)], undefined, true),\n              _: 1 /* STABLE */\n            }, 8 /* PROPS */, [\"disabled\"])], undefined, true),\n            _: 1 /* STABLE */\n          })], undefined, true),\n          _: 1 /* STABLE */\n        })], undefined, true),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onSubmit\"])], undefined, true),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"section-title\"]), _createCommentVNode(\" Role groups \"), _createVNode(_component_page_section, {\n      \"section-title\": $data.$t('pageLdap.roleGroups')\n    }, {\n      default: _withCtx(() => [_createVNode(_component_table_role_groups)], undefined, true),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"section-title\"])], undefined, true),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["class","key","_createBlock","_component_b_container","fluid","default","_withCtx","_createVNode","_component_page_title","description","$data","$t","_component_page_section","_component_b_form","novalidate","onSubmit","_withModifiers","$options","handleSubmit","_component_b_row","_component_b_col","_component_b_form_group","label","disabled","loading","_component_b_form_checkbox","modelValue","form","ldapAuthenticationEnabled","_cache","$event","onChange","onChangeldapAuthenticationEnabled","_createTextVNode","_toDisplayString","_","_createElementVNode","_hoisted_1","md","lg","xl","_component_b_form_text","id","secureLdapEnabled","caCertificateExpiration","ldapCertificateExpiration","$setup","v$","$touch","_createElementBlock","_hoisted_2","_ctx","$filters","formatDate","_hoisted_3","_hoisted_4","_hoisted_5","_component_b_link","to","_component_b_form_radio","activeDirectoryEnabled","value","onChangeServiceType","sm","_component_info_tooltip","title","_component_b_input_group","prepend","ldapProtocol","_component_b_form_input","serverUri","state","getValidationState","_component_b_form_invalid_feedback","role","bindDn","_component_input_password_toggle","bindPassword","type","baseDn","_hoisted_6","userIdAttribute","_hoisted_7","groupIdAttribute","_component_b_btn","variant","_createCommentVNode","_component_table_role_groups"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/SecurityAndAccess/Ldap/Ldap.vue"],"sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title :description=\"$t('pageLdap.pageDescription')\" />\n    <page-section :section-title=\"$t('pageLdap.settings')\">\n      <b-form novalidate @submit.prevent=\"handleSubmit\">\n        <b-row>\n          <b-col>\n            <b-form-group\n              class=\"mb-3\"\n              :label=\"$t('pageLdap.form.ldapAuthentication')\"\n              :disabled=\"loading\"\n            >\n              <b-form-checkbox\n                v-model=\"form.ldapAuthenticationEnabled\"\n                data-test-id=\"ldap-checkbox-ldapAuthenticationEnabled\"\n                @change=\"onChangeldapAuthenticationEnabled\"\n              >\n                {{ $t('global.action.enable') }}\n              </b-form-checkbox>\n            </b-form-group>\n          </b-col>\n        </b-row>\n        <div class=\"form-background p-3\">\n          <b-form-group\n            class=\"m-0\"\n            :label=\"$t('pageLdap.ariaLabel.ldapSettings')\"\n            label-class=\"sr-only\"\n            :disabled=\"!form.ldapAuthenticationEnabled || loading\"\n          >\n            <b-row>\n              <b-col md=\"3\" lg=\"4\" xl=\"3\">\n                <b-form-group\n                  class=\"mb-4\"\n                  :label=\"$t('pageLdap.form.secureLdapUsingSsl')\"\n                >\n                  <b-form-text id=\"enable-secure-help-block\">\n                    {{ $t('pageLdap.form.secureLdapHelper') }}\n                  </b-form-text>\n                  <b-form-checkbox\n                    id=\"enable-secure-ldap\"\n                    v-model=\"form.secureLdapEnabled\"\n                    aria-describedby=\"enable-secure-help-block\"\n                    data-test-id=\"ldap-checkbox-secureLdapEnabled\"\n                    :disabled=\"\n                      !caCertificateExpiration || !ldapCertificateExpiration\n                    \"\n                    @change=\"v$.form.secureLdapEnabled.$touch()\"\n                  >\n                    {{ $t('global.action.enable') }}\n                  </b-form-checkbox>\n                </b-form-group>\n                <dl>\n                  <dt>{{ $t('pageLdap.form.caCertificateValidUntil') }}</dt>\n                  <dd v-if=\"caCertificateExpiration\">\n                    {{ $filters.formatDate(caCertificateExpiration) }}\n                  </dd>\n                  <dd v-else>--</dd>\n                  <dt>{{ $t('pageLdap.form.ldapCertificateValidUntil') }}</dt>\n                  <dd v-if=\"ldapCertificateExpiration\">\n                    {{ $filters.formatDate(ldapCertificateExpiration) }}\n                  </dd>\n                  <dd v-else>--</dd>\n                </dl>\n                <b-link\n                  class=\"d-inline-block mb-4 m-md-0\"\n                  to=\"/security-and-access/certificates\"\n                >\n                  {{ $t('pageLdap.form.manageSslCertificates') }}\n                </b-link>\n              </b-col>\n              <b-col md=\"9\" lg=\"8\" xl=\"9\">\n                <b-row>\n                  <b-col>\n                    <b-form-group :label=\"$t('pageLdap.form.serviceType')\">\n                      <b-form-radio\n                        v-model=\"form.activeDirectoryEnabled\"\n                        data-test-id=\"ldap-radio-activeDirectoryEnabled\"\n                        :value=\"false\"\n                        @change=\"onChangeServiceType\"\n                      >\n                        {{ $t('pageLdap.form.openLDAP') }}\n                      </b-form-radio>\n                      <b-form-radio\n                        v-model=\"form.activeDirectoryEnabled\"\n                        data-test-id=\"ldap-radio-activeDirectoryEnabled\"\n                        :value=\"true\"\n                        @change=\"onChangeServiceType\"\n                      >\n                        {{ $t('pageLdap.form.activeDirectory') }}\n                      </b-form-radio>\n                    </b-form-group>\n                  </b-col>\n                </b-row>\n                <b-row>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group label-for=\"server-uri\">\n                      <template #label>\n                        {{ $t('pageLdap.form.serverUri') }}\n                        <info-tooltip\n                          :title=\"$t('pageLdap.form.serverUriTooltip')\"\n                        />\n                      </template>\n                      <b-input-group :prepend=\"ldapProtocol\">\n                        <b-form-input\n                          id=\"server-uri\"\n                          v-model=\"form.serverUri\"\n                          data-test-id=\"ldap-input-serverUri\"\n                          :state=\"getValidationState(v$.form.serverUri)\"\n                          @change=\"v$.form.serverUri.$touch()\"\n                        />\n                        <b-form-invalid-feedback role=\"alert\">\n                          {{ $t('global.form.fieldRequired') }}\n                        </b-form-invalid-feedback>\n                      </b-input-group>\n                    </b-form-group>\n                  </b-col>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group\n                      :label=\"$t('pageLdap.form.bindDn')\"\n                      label-for=\"bind-dn\"\n                    >\n                      <b-form-input\n                        id=\"bind-dn\"\n                        v-model=\"form.bindDn\"\n                        data-test-id=\"ldap-input-bindDn\"\n                        :state=\"getValidationState(v$.form.bindDn)\"\n                        @change=\"v$.form.bindDn.$touch()\"\n                      />\n                      <b-form-invalid-feedback role=\"alert\">\n                        {{ $t('global.form.fieldRequired') }}\n                      </b-form-invalid-feedback>\n                    </b-form-group>\n                  </b-col>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group\n                      :label=\"$t('pageLdap.form.bindPassword')\"\n                      label-for=\"bind-password\"\n                    >\n                      <input-password-toggle\n                        data-test-id=\"ldap-input-togglePassword\"\n                      >\n                        <b-form-input\n                          id=\"bind-password\"\n                          v-model=\"form.bindPassword\"\n                          type=\"password\"\n                          :state=\"getValidationState(v$.form.bindPassword)\"\n                          class=\"form-control-with-button\"\n                          @change=\"v$.form.bindPassword.$touch()\"\n                        />\n                        <b-form-invalid-feedback role=\"alert\">\n                          {{ $t('global.form.fieldRequired') }}\n                        </b-form-invalid-feedback>\n                      </input-password-toggle>\n                    </b-form-group>\n                  </b-col>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group\n                      :label=\"$t('pageLdap.form.baseDn')\"\n                      label-for=\"base-dn\"\n                    >\n                      <b-form-input\n                        id=\"base-dn\"\n                        v-model=\"form.baseDn\"\n                        data-test-id=\"ldap-input-baseDn\"\n                        :state=\"getValidationState(v$.form.baseDn)\"\n                        @change=\"v$.form.baseDn.$touch()\"\n                      />\n                      <b-form-invalid-feedback role=\"alert\">\n                        {{ $t('global.form.fieldRequired') }}\n                      </b-form-invalid-feedback>\n                    </b-form-group>\n                  </b-col>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group label-for=\"user-id-attribute\">\n                      <template #label>\n                        {{ $t('pageLdap.form.userIdAttribute') }} -\n                        <span class=\"form-text d-inline\">\n                          {{ $t('global.form.optional') }}\n                        </span>\n                      </template>\n                      <b-form-input\n                        id=\"user-id-attribute\"\n                        v-model=\"form.userIdAttribute\"\n                        data-test-id=\"ldap-input-userIdAttribute\"\n                        @change=\"v$.form.userIdAttribute.$touch()\"\n                      />\n                    </b-form-group>\n                  </b-col>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group label-for=\"group-id-attribute\">\n                      <template #label>\n                        {{ $t('pageLdap.form.groupIdAttribute') }} -\n                        <span class=\"form-text d-inline\">\n                          {{ $t('global.form.optional') }}\n                        </span>\n                      </template>\n                      <b-form-input\n                        id=\"group-id-attribute\"\n                        v-model=\"form.groupIdAttribute\"\n                        data-test-id=\"ldap-input-groupIdAttribute\"\n                        @change=\"v$.form.groupIdAttribute.$touch()\"\n                      />\n                    </b-form-group>\n                  </b-col>\n                </b-row>\n              </b-col>\n            </b-row>\n          </b-form-group>\n        </div>\n        <b-row class=\"mt-4 mb-5\">\n          <b-col>\n            <b-btn\n              variant=\"primary\"\n              type=\"submit\"\n              data-test-id=\"ldap-button-saveSettings\"\n              :disabled=\"loading\"\n            >\n              {{ $t('global.action.saveSettings') }}\n            </b-btn>\n          </b-col>\n        </b-row>\n      </b-form>\n    </page-section>\n\n    <!-- Role groups -->\n    <page-section :section-title=\"$t('pageLdap.roleGroups')\">\n      <table-role-groups />\n    </page-section>\n  </b-container>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { find } from 'lodash';\nimport { requiredIf } from '@vuelidate/validators';\nimport { useVuelidate } from '@vuelidate/core';\n\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin';\nimport LoadingBarMixin, { loading } from '@/components/Mixins/LoadingBarMixin';\nimport InputPasswordToggle from '@/components/Global/InputPasswordToggle';\nimport PageTitle from '@/components/Global/PageTitle';\nimport PageSection from '@/components/Global/PageSection';\nimport InfoTooltip from '@/components/Global/InfoTooltip';\nimport TableRoleGroups from './TableRoleGroups';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  name: 'Ldap',\n  components: {\n    InfoTooltip,\n    InputPasswordToggle,\n    PageTitle,\n    PageSection,\n    TableRoleGroups,\n  },\n  mixins: [BVToastMixin, VuelidateMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        ldapAuthenticationEnabled: this.$store.getters['ldap/isServiceEnabled'],\n        secureLdapEnabled: false,\n        activeDirectoryEnabled:\n          this.$store.getters['ldap/isActiveDirectoryEnabled'],\n        serverUri: '',\n        bindDn: '',\n        bindPassword: '',\n        baseDn: '',\n        userIdAttribute: '',\n        groupIdAttribute: '',\n      },\n      loading,\n    };\n  },\n  computed: {\n    ...mapGetters('ldap', [\n      'isServiceEnabled',\n      'isActiveDirectoryEnabled',\n      'ldap',\n      'activeDirectory',\n    ]),\n    sslCertificates() {\n      return this.$store.getters['certificates/allCertificates'];\n    },\n    caCertificateExpiration() {\n      const caCertificate = find(this.sslCertificates, {\n        type: 'TrustStore Certificate',\n      });\n      if (caCertificate === undefined) return null;\n      return caCertificate.validUntil;\n    },\n    ldapCertificateExpiration() {\n      const ldapCertificate = find(this.sslCertificates, {\n        type: 'LDAP Certificate',\n      });\n      if (ldapCertificate === undefined) return null;\n      return ldapCertificate.validUntil;\n    },\n    ldapProtocol() {\n      return this.form.secureLdapEnabled ? 'ldaps://' : 'ldap://';\n    },\n  },\n  watch: {\n    isServiceEnabled: function (value) {\n      this.form.ldapAuthenticationEnabled = value;\n    },\n    isActiveDirectoryEnabled: function (value) {\n      this.form.activeDirectoryEnabled = value;\n      this.setFormValues();\n    },\n  },\n  validations: {\n    form: {\n      ldapAuthenticationEnabled: {},\n      secureLdapEnabled: {},\n      activeDirectoryEnabled: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        }),\n      },\n      serverUri: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        }),\n      },\n      bindDn: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        }),\n      },\n      bindPassword: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        }),\n      },\n      baseDn: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        }),\n      },\n      userIdAttribute: {},\n      groupIdAttribute: {},\n    },\n  },\n  created() {\n    this.startLoader();\n    this.$store\n      .dispatch('ldap/getAccountSettings')\n      .finally(() => this.endLoader());\n    this.$store\n      .dispatch('certificates/getCertificates')\n      .finally(() => this.endLoader());\n    this.setFormValues();\n  },\n  methods: {\n    setFormValues(serviceType) {\n      if (!serviceType) {\n        serviceType = this.isActiveDirectoryEnabled\n          ? this.activeDirectory\n          : this.ldap;\n      }\n      const {\n        serviceAddress = '',\n        bindDn = '',\n        baseDn = '',\n        userAttribute = '',\n        groupsAttribute = '',\n      } = serviceType;\n      const secureLdap =\n        serviceAddress && serviceAddress.includes('ldaps://') ? true : false;\n      const serverUri = serviceAddress\n        ? serviceAddress.replace(/ldaps?:\\/\\//, '')\n        : '';\n      this.form.secureLdapEnabled = secureLdap;\n      this.form.serverUri = serverUri;\n      this.form.bindDn = bindDn;\n      this.form.bindPassword = '';\n      this.form.baseDn = baseDn;\n      this.form.userIdAttribute = userAttribute;\n      this.form.groupIdAttribute = groupsAttribute;\n    },\n    handleSubmit() {\n      this.v$.form.$touch();\n      if (this.v$.form.$invalid) return;\n      const data = {\n        serviceEnabled: this.form.ldapAuthenticationEnabled,\n        activeDirectoryEnabled: this.form.activeDirectoryEnabled,\n        serviceAddress: `${this.ldapProtocol}${this.form.serverUri}`,\n        bindDn: this.form.bindDn,\n        bindPassword: this.form.bindPassword,\n        baseDn: this.form.baseDn,\n        userIdAttribute: this.form.userIdAttribute,\n        groupIdAttribute: this.form.groupIdAttribute,\n      };\n      this.startLoader();\n      this.$store\n        .dispatch('ldap/saveAccountSettings', data)\n        .then((success) => {\n          this.successToast(success);\n        })\n        .catch(({ message }) => {\n          this.errorToast(message);\n        })\n        .finally(() => {\n          this.form.bindPassword = '';\n          this.v$.form.$reset();\n          this.endLoader();\n        });\n    },\n    onChangeServiceType(isActiveDirectoryEnabled) {\n      this.v$.form.activeDirectoryEnabled.$touch();\n      const serviceType = isActiveDirectoryEnabled\n        ? this.activeDirectory\n        : this.ldap;\n      // Set form values according to user selected\n      // service type\n      this.setFormValues(serviceType);\n    },\n    onChangeldapAuthenticationEnabled(isServiceEnabled) {\n      this.v$.form.ldapAuthenticationEnabled.$touch();\n      if (!isServiceEnabled) {\n        // Request will fail if sent with empty values.\n        // The frontend only checks for required fields\n        // when the service is enabled. This is to prevent\n        // an error if a user clears any properties then\n        // disables the service.\n        this.setFormValues();\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}