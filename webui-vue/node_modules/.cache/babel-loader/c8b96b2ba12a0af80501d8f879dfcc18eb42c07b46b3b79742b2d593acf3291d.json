{"ast":null,"code":"import PageSection from '@/components/Global/PageSection';\nimport IconChevron from '@carbon/icons-vue/es/chevron--down/20';\nimport StatusIcon from '@/components/Global/StatusIcon';\nimport TableCellCount from '@/components/Global/TableCellCount';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport TableSortMixin from '@/components/Mixins/TableSortMixin';\nimport Search from '@/components/Global/Search';\nimport SearchFilterMixin, { searchFilter } from '@/components/Mixins/SearchFilterMixin';\nimport TableRowExpandMixin, { expandRowLabel } from '@/components/Mixins/TableRowExpandMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  components: {\n    IconChevron,\n    PageSection,\n    StatusIcon,\n    Search,\n    TableCellCount\n  },\n  mixins: [TableRowExpandMixin, DataFormatterMixin, TableSortMixin, SearchFilterMixin],\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      fields: [{\n        key: 'expandRow',\n        label: '',\n        tdClass: 'table-row-expand',\n        sortable: false\n      }, {\n        key: 'id',\n        label: i18n.global.t('pageInventory.table.id'),\n        formatter: this.dataFormatter,\n        sortable: true\n      }, {\n        key: 'health',\n        label: i18n.global.t('pageInventory.table.health'),\n        formatter: this.dataFormatter,\n        sortable: true,\n        tdClass: 'text-nowrap'\n      }, {\n        key: 'statusState',\n        label: i18n.global.t('pageInventory.table.state'),\n        formatter: this.dataFormatter,\n        tdClass: 'text-nowrap'\n      }, {\n        key: 'locationNumber',\n        label: i18n.global.t('pageInventory.table.locationNumber'),\n        formatter: this.dataFormatter,\n        sortable: true\n      }, {\n        key: 'identifyLed',\n        label: i18n.global.t('pageInventory.table.identifyLed'),\n        formatter: this.dataFormatter\n      }],\n      searchFilter: searchFilter,\n      searchTotalFilteredRows: 0,\n      expandRowLabel: expandRowLabel\n    };\n  },\n  computed: {\n    filteredRows() {\n      return this.searchFilter ? this.searchTotalFilteredRows : this.powerSupplies.length;\n    },\n    powerSupplies() {\n      return this.$store.getters['powerSupply/powerSupplies'];\n    }\n  },\n  created() {\n    this.$store.dispatch('powerSupply/getAllPowerSupplies').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('hardware-status-power-supplies-complete');\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    sortCompare(a, b, key) {\n      if (key === 'health') {\n        return this.sortStatus(a, b, key);\n      } else if (key === 'statusState') {\n        return this.sortStatusState(a, b, key);\n      }\n    },\n    onFiltered(filteredItems) {\n      this.searchTotalFilteredRows = filteredItems.length;\n    },\n    /**\n     * Returns the icon to use for status state based on the given status.\n     * @param {string} status The status to determine the icon for.\n     * @return {string} The icon for the given status.\n     */\n    statusStateIcon(status) {\n      switch (status) {\n        case 'Enabled':\n          return 'success';\n        case 'Absent':\n          return 'warning';\n        default:\n          return '';\n      }\n    },\n    /**\n     * Sorts the status state of two objects based on the provided key.\n     * @param {Object} a The first object to compare.\n     * @param {Object} b The second object to compare.\n     * @param {string} key The key to use for comparison.\n     */\n    sortStatusState(a, b, key) {\n      const statusState = ['Enabled', 'Absent'];\n      return statusState.indexOf(a[key]) - statusState.indexOf(b[key]);\n    }\n  }\n};","map":{"version":3,"names":["PageSection","IconChevron","StatusIcon","TableCellCount","DataFormatterMixin","TableSortMixin","Search","SearchFilterMixin","searchFilter","TableRowExpandMixin","expandRowLabel","useI18n","i18n","components","mixins","data","$t","t","isBusy","fields","key","label","tdClass","sortable","global","formatter","dataFormatter","searchTotalFilteredRows","computed","filteredRows","powerSupplies","length","$store","getters","created","dispatch","finally","$root","$emit","methods","sortCompare","a","b","sortStatus","sortStatusState","onFiltered","filteredItems","statusStateIcon","status","statusState","indexOf"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/HardwareStatus/Inventory/InventoryTablePowerSupplies.vue"],"sourcesContent":["<template>\n  <page-section :section-title=\"$t('pageInventory.powerSupplies')\">\n    <b-row class=\"align-items-end\">\n      <b-col sm=\"6\" md=\"5\" xl=\"4\">\n        <search\n          @change-search=\"onChangeSearchInput\"\n          @clear-search=\"onClearSearchInput\"\n        />\n      </b-col>\n      <b-col sm=\"6\" md=\"3\" xl=\"2\">\n        <table-cell-count\n          :filtered-items-count=\"filteredRows\"\n          :total-number-of-cells=\"powerSupplies.length\"\n        ></table-cell-count>\n      </b-col>\n    </b-row>\n    <b-table\n      sort-icon-left\n      no-sort-reset\n      hover\n      responsive=\"md\"\n      sort-by=\"health\"\n      show-empty\n      :items=\"powerSupplies\"\n      :fields=\"fields\"\n      :sort-desc=\"true\"\n      :sort-compare=\"sortCompare\"\n      :filter=\"searchFilter\"\n      :empty-text=\"$t('global.table.emptyMessage')\"\n      :empty-filtered-text=\"$t('global.table.emptySearchMessage')\"\n      :busy=\"isBusy\"\n      @filtered=\"onFiltered\"\n    >\n      <!-- Expand chevron icon -->\n      <template #cell(expandRow)=\"row\">\n        <b-button\n          variant=\"link\"\n          data-test-id=\"hardwareStatus-button-expandPowerSupplies\"\n          :title=\"expandRowLabel\"\n          class=\"btn-icon-only\"\n          @click=\"toggleRowDetails(row)\"\n        >\n          <icon-chevron />\n          <span class=\"sr-only\">{{ expandRowLabel }}</span>\n        </b-button>\n      </template>\n\n      <!-- Health -->\n      <template #cell(health)=\"{ value }\">\n        <status-icon :status=\"statusIcon(value)\" />\n        {{ value }}\n      </template>\n\n      <!-- StatusState -->\n      <template #cell(statusState)=\"{ value }\">\n        <status-icon :status=\"statusStateIcon(value)\" />\n        {{ value }}\n      </template>\n\n      <template #row-details=\"{ item }\">\n        <b-container fluid>\n          <b-row>\n            <b-col sm=\"6\" xl=\"4\">\n              <dl>\n                <!-- Name -->\n                <dt>{{ $t('pageInventory.table.name') }}:</dt>\n                <dd>{{ dataFormatter(item.name) }}</dd>\n                <!-- Part number -->\n                <dt>{{ $t('pageInventory.table.partNumber') }}:</dt>\n                <dd>{{ dataFormatter(item.partNumber) }}</dd>\n                <!-- Serial number -->\n                <dt>{{ $t('pageInventory.table.serialNumber') }}:</dt>\n                <dd>{{ dataFormatter(item.serialNumber) }}</dd>\n                <!-- Spare part number -->\n                <dt>{{ $t('pageInventory.table.sparePartNumber') }}:</dt>\n                <dd>{{ dataFormatter(item.sparePartNumber) }}</dd>\n                <!-- Model -->\n                <dt>{{ $t('pageInventory.table.model') }}:</dt>\n                <dd>{{ dataFormatter(item.model) }}</dd>\n              </dl>\n            </b-col>\n            <b-col sm=\"6\" xl=\"4\">\n              <dl>\n                <!-- Status state -->\n                <dt>{{ $t('pageInventory.table.statusState') }}:</dt>\n                <dd>{{ dataFormatter(item.statusState) }}</dd>\n                <!-- Status Health rollup state -->\n                <dt>{{ $t('pageInventory.table.statusHealthRollup') }}:</dt>\n                <dd>{{ dataFormatter(item.statusHealth) }}</dd>\n                <!-- Efficiency percent -->\n                <dt>{{ $t('pageInventory.table.efficiencyPercent') }}:</dt>\n                <dd>\n                  {{ dataFormatter(item.efficiencyPercent) }}\n                  {{ $t('unit.Percent') }}\n                </dd>\n                <!-- Power input watts -->\n                <dt>{{ $t('pageInventory.table.powerInputWatts') }}:</dt>\n                <dd>\n                  {{ dataFormatter(item.powerInputWatts) }}\n                  {{ $t('unit.W') }}\n                </dd>\n              </dl>\n            </b-col>\n          </b-row>\n          <div class=\"section-divider mb-3 mt-3\"></div>\n          <b-row>\n            <b-col sm=\"6\" xl=\"4\">\n              <dl>\n                <!-- Manufacturer -->\n                <dt>{{ $t('pageInventory.table.manufacturer') }}:</dt>\n                <dd>{{ dataFormatter(item.manufacturer) }}</dd>\n              </dl>\n            </b-col>\n            <b-col sm=\"6\" xl=\"4\">\n              <dl>\n                <!-- Firmware version -->\n                <dt>{{ $t('pageInventory.table.firmwareVersion') }}:</dt>\n                <dd>{{ dataFormatter(item.firmwareVersion) }}</dd>\n              </dl>\n            </b-col>\n          </b-row>\n        </b-container>\n      </template>\n    </b-table>\n  </page-section>\n</template>\n\n<script>\nimport PageSection from '@/components/Global/PageSection';\nimport IconChevron from '@carbon/icons-vue/es/chevron--down/20';\n\nimport StatusIcon from '@/components/Global/StatusIcon';\nimport TableCellCount from '@/components/Global/TableCellCount';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport TableSortMixin from '@/components/Mixins/TableSortMixin';\nimport Search from '@/components/Global/Search';\nimport SearchFilterMixin, {\n  searchFilter,\n} from '@/components/Mixins/SearchFilterMixin';\nimport TableRowExpandMixin, {\n  expandRowLabel,\n} from '@/components/Mixins/TableRowExpandMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  components: { IconChevron, PageSection, StatusIcon, Search, TableCellCount },\n  mixins: [\n    TableRowExpandMixin,\n    DataFormatterMixin,\n    TableSortMixin,\n    SearchFilterMixin,\n  ],\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      fields: [\n        {\n          key: 'expandRow',\n          label: '',\n          tdClass: 'table-row-expand',\n          sortable: false,\n        },\n        {\n          key: 'id',\n          label: i18n.global.t('pageInventory.table.id'),\n          formatter: this.dataFormatter,\n          sortable: true,\n        },\n        {\n          key: 'health',\n          label: i18n.global.t('pageInventory.table.health'),\n          formatter: this.dataFormatter,\n          sortable: true,\n          tdClass: 'text-nowrap',\n        },\n        {\n          key: 'statusState',\n          label: i18n.global.t('pageInventory.table.state'),\n          formatter: this.dataFormatter,\n          tdClass: 'text-nowrap',\n        },\n        {\n          key: 'locationNumber',\n          label: i18n.global.t('pageInventory.table.locationNumber'),\n          formatter: this.dataFormatter,\n          sortable: true,\n        },\n        {\n          key: 'identifyLed',\n          label: i18n.global.t('pageInventory.table.identifyLed'),\n          formatter: this.dataFormatter,\n        },\n      ],\n      searchFilter: searchFilter,\n      searchTotalFilteredRows: 0,\n      expandRowLabel: expandRowLabel,\n    };\n  },\n  computed: {\n    filteredRows() {\n      return this.searchFilter\n        ? this.searchTotalFilteredRows\n        : this.powerSupplies.length;\n    },\n    powerSupplies() {\n      return this.$store.getters['powerSupply/powerSupplies'];\n    },\n  },\n  created() {\n    this.$store.dispatch('powerSupply/getAllPowerSupplies').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('hardware-status-power-supplies-complete');\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    sortCompare(a, b, key) {\n      if (key === 'health') {\n        return this.sortStatus(a, b, key);\n      } else if (key === 'statusState') {\n        return this.sortStatusState(a, b, key);\n      }\n    },\n    onFiltered(filteredItems) {\n      this.searchTotalFilteredRows = filteredItems.length;\n    },\n    /**\n     * Returns the icon to use for status state based on the given status.\n     * @param {string} status The status to determine the icon for.\n     * @return {string} The icon for the given status.\n     */\n    statusStateIcon(status) {\n      switch (status) {\n        case 'Enabled':\n          return 'success';\n        case 'Absent':\n          return 'warning';\n        default:\n          return '';\n      }\n    },\n    /**\n     * Sorts the status state of two objects based on the provided key.\n     * @param {Object} a The first object to compare.\n     * @param {Object} b The second object to compare.\n     * @param {string} key The key to use for comparison.\n     */\n    sortStatusState(a, b, key) {\n      const statusState = ['Enabled', 'Absent'];\n      return statusState.indexOf(a[key]) - statusState.indexOf(b[key]);\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}