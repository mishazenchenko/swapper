{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst NetworkStore = {\n  namespaced: true,\n  state: {\n    ethernetData: [],\n    firstInterfaceId: '',\n    //used for setting global DHCP settings\n    globalNetworkSettings: [],\n    selectedInterfaceId: '',\n    // which tab is selected\n    selectedInterfaceIndex: 0 // which tab is selected\n  },\n  getters: {\n    ethernetData: state => state.ethernetData,\n    firstInterfaceId: state => state.firstInterfaceId,\n    globalNetworkSettings: state => state.globalNetworkSettings,\n    selectedInterfaceId: state => state.selectedInterfaceId,\n    selectedInterfaceIndex: state => state.selectedInterfaceIndex\n  },\n  mutations: {\n    setDomainNameState: (state, domainState) => state.domainState = domainState,\n    setDnsState: (state, dnsState) => state.dnsState = dnsState,\n    setEthernetData: (state, ethernetData) => state.ethernetData = ethernetData,\n    setFirstInterfaceId: (state, firstInterfaceId) => state.firstInterfaceId = firstInterfaceId,\n    setGlobalNetworkSettings: (state, data) => {\n      state.globalNetworkSettings = data.map(({\n        data\n      }) => {\n        const {\n          DHCPv4,\n          DHCPv6,\n          HostName,\n          IPv4Addresses,\n          IPv4StaticAddresses,\n          IPv6Addresses,\n          IPv6StaticAddresses,\n          LinkStatus,\n          MACAddress,\n          IPv6DefaultGateway\n        } = data;\n        return {\n          defaultGateway: IPv4StaticAddresses[0]?.Gateway,\n          //First static gateway is the default gateway\n          ipv6DefaultGateway: IPv6DefaultGateway,\n          dhcpAddress: IPv4Addresses.filter(ipv4 => ipv4.AddressOrigin === 'DHCP'),\n          dhcpv6Address: IPv6Addresses.filter(ipv6 => ipv6.AddressOrigin === 'SLAAC' || ipv6.AddressOrigin === 'DHCPv6'),\n          dhcpEnabled: DHCPv4.DHCPEnabled,\n          dhcp6Enabled: DHCPv6.OperatingMode,\n          hostname: HostName,\n          macAddress: MACAddress,\n          linkStatus: LinkStatus,\n          staticAddress: IPv4StaticAddresses[0]?.Address,\n          // Display first static address on overview page\n          ipv6StaticAddress: IPv6StaticAddresses[0]?.Address,\n          useDnsEnabled: DHCPv4.UseDNSServers,\n          useDomainNameEnabled: DHCPv4.UseDomainName,\n          useNtpEnabled: DHCPv4.UseNTPServers,\n          useDnsEnabledIpv6: DHCPv6.UseDNSServers,\n          useDomainNameEnabledIpv6: DHCPv6.UseDomainName,\n          useNtpEnabledIpv6: DHCPv6.UseNTPServers\n        };\n      });\n    },\n    setNtpState: (state, ntpState) => state.ntpState = ntpState,\n    setDomainNameStateIpv6: (state, domainState) => state.domainStateIpv6 = domainState,\n    setDnsStateIpv6: (state, dnsState) => state.dnsStateIpv6 = dnsState,\n    setNtpStateIpv6: (state, ntpState) => state.ntpStateIpv6 = ntpState,\n    setSelectedInterfaceId: (state, selectedInterfaceId) => state.selectedInterfaceId = selectedInterfaceId,\n    setSelectedInterfaceIndex: (state, selectedInterfaceIndex) => state.selectedInterfaceIndex = selectedInterfaceIndex\n  },\n  actions: {\n    async getEthernetData({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces`).then(response => response.data.Members.map(ethernetInterface => ethernetInterface['@odata.id'])).then(ethernetInterfaceIds => api.all(ethernetInterfaceIds.map(ethernetInterface => api.get(ethernetInterface)))).then(ethernetInterfaces => {\n        const ethernetData = ethernetInterfaces.map(ethernetInterface => ethernetInterface.data);\n        const firstInterfaceId = ethernetData[0].Id;\n        commit('setEthernetData', ethernetData);\n        commit('setFirstInterfaceId', firstInterfaceId);\n        commit('setSelectedInterfaceId', firstInterfaceId);\n        commit('setGlobalNetworkSettings', ethernetInterfaces);\n      }).catch(error => {\n        console.log('Network Data:', error);\n      });\n    },\n    async saveDhcpEnabledState({\n      state,\n      dispatch\n    }, dhcpState) {\n      const data = {\n        DHCPv4: {\n          DHCPEnabled: dhcpState\n        }\n      };\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`, data).then(dispatch('getEthernetData')).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.dhcp')\n        });\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.dhcp')\n        }));\n      });\n    },\n    async saveDhcp6EnabledState({\n      state,\n      dispatch\n    }, dhcpState) {\n      const data = {\n        DHCPv6: {\n          OperatingMode: dhcpState ? 'Enabled' : 'Disabled'\n        }\n      };\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`, data).then(dispatch('getEthernetData')).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.dhcp6')\n        });\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.dhcp6')\n        }));\n      });\n    },\n    async saveDomainNameState({\n      commit,\n      state\n    }, {\n      domainState,\n      ipVersion\n    }) {\n      var data;\n      if (ipVersion === 'IPv4') {\n        commit('setDomainNameState', domainState);\n        data = {\n          DHCPv4: {\n            UseDomainName: domainState\n          }\n        };\n      } else if (ipVersion === 'IPv6') {\n        commit('setDomainNameStateIpv6', domainState);\n        data = {\n          DHCPv6: {\n            UseDomainName: domainState\n          }\n        };\n      }\n      // Saving to the first interface automatically updates DHCPv4 and DHCPv6\n      // on all interfaces\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.firstInterfaceId}`, data).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.domainName')\n        });\n      }).catch(error => {\n        console.log(error);\n        if (ipVersion === 'IPv4') commit('setDomainNameState', !domainState);else if (ipVersion === 'IPv6') commit('setDomainNameStateIpv6', !domainState);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.domainName')\n        }));\n      });\n    },\n    async saveDnsState({\n      commit,\n      state\n    }, {\n      dnsState,\n      ipVersion\n    }) {\n      var data;\n      if (ipVersion === 'IPv4') {\n        commit('setDnsState', dnsState);\n        data = {\n          DHCPv4: {\n            UseDNSServers: dnsState\n          }\n        };\n      } else if (ipVersion === 'IPv6') {\n        commit('setDnsStateIpv6', dnsState);\n        data = {\n          DHCPv6: {\n            UseDNSServers: dnsState\n          }\n        };\n      }\n      // Saving to the first interface automatically updates DHCPv4 and DHCPv6\n      // on all interfaces\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.firstInterfaceId}`, data).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.dns')\n        });\n      }).catch(error => {\n        console.log(error);\n        if (ipVersion === 'IPv4') commit('setDnsState', !dnsState);else if (ipVersion === 'IPv6') commit('setDnsStateIpv6', !dnsState);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.dns')\n        }));\n      });\n    },\n    async saveNtpState({\n      commit,\n      state\n    }, {\n      ntpState,\n      ipVersion\n    }) {\n      var data;\n      if (ipVersion === 'IPv4') {\n        commit('setNtpState', ntpState);\n        data = {\n          DHCPv4: {\n            UseNTPServers: ntpState\n          }\n        };\n      } else if (ipVersion === 'IPv6') {\n        commit('setNtpStateIpv6', ntpState);\n        data = {\n          DHCPv6: {\n            UseNTPServers: ntpState\n          }\n        };\n      }\n      // Saving to the first interface automatically updates DHCPv4 and DHCPv6\n      // on all interfaces\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.firstInterfaceId}`, data).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.ntp')\n        });\n      }).catch(error => {\n        console.log(error);\n        if (ipVersion === 'IPv4') commit('setNtpState', !ntpState);else if (ipVersion === 'IPv6') commit('setNtpStateIpv6', !ntpState);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.ntp')\n        }));\n      });\n    },\n    async setSelectedTabIndex({\n      commit\n    }, tabIndex) {\n      commit('setSelectedInterfaceIndex', tabIndex);\n    },\n    async setSelectedTabId({\n      commit\n    }, tabId) {\n      commit('setSelectedInterfaceId', tabId);\n    },\n    async saveIpv4Address({\n      dispatch,\n      state\n    }, ipv4Form) {\n      const originalAddresses = state.ethernetData[state.selectedInterfaceIndex].IPv4StaticAddresses.map(ipv4 => {\n        const {\n          Address,\n          SubnetMask,\n          Gateway\n        } = ipv4;\n        return {\n          Address,\n          SubnetMask,\n          Gateway\n        };\n      });\n      const newAddress = [ipv4Form];\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`, {\n        IPv4StaticAddresses: originalAddresses.concat(newAddress)\n      }).then(dispatch('getEthernetData')).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.ipv4')\n        });\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.ipv4')\n        }));\n      });\n    },\n    async saveIpv6Address({\n      dispatch,\n      state\n    }, ipv6Form) {\n      const originalAddresses = state.ethernetData[state.selectedInterfaceIndex].IPv6StaticAddresses.map(ipv6 => {\n        const {\n          Address,\n          PrefixLength\n        } = ipv6;\n        return {\n          Address,\n          PrefixLength\n        };\n      });\n      const newAddress = [ipv6Form];\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`, {\n        IPv6StaticAddresses: originalAddresses.concat(newAddress)\n      }).then(dispatch('getEthernetData')).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.ipv6')\n        });\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.ipv6')\n        }));\n      });\n    },\n    async editIpv4Address({\n      dispatch,\n      state\n    }, ipv4TableData) {\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`, {\n        IPv4StaticAddresses: ipv4TableData\n      }).then(dispatch('getEthernetData')).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.ipv4')\n        });\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.ipv4')\n        }));\n      });\n    },\n    async editIpv6Address({\n      dispatch,\n      state\n    }, ipv6TableData) {\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`, {\n        IPv6StaticAddresses: ipv6TableData\n      }).then(dispatch('getEthernetData')).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.ipv6')\n        });\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.ipv6')\n        }));\n      });\n    },\n    async saveSettings({\n      state,\n      dispatch\n    }, interfaceSettingsForm) {\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`, interfaceSettingsForm).then(dispatch('getEthernetData')).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.network')\n        });\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.network')\n        }));\n      });\n    },\n    async saveDnsAddress({\n      dispatch,\n      state\n    }, dnsForm) {\n      const newAddress = dnsForm;\n      const originalAddresses = state.ethernetData[state.selectedInterfaceIndex].StaticNameServers;\n      const newDnsArray = originalAddresses.concat(newAddress);\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`, {\n        StaticNameServers: newDnsArray\n      }).then(dispatch('getEthernetData')).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.dns')\n        });\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.dns')\n        }));\n      });\n    },\n    async editDnsAddress({\n      dispatch,\n      state\n    }, dnsTableData) {\n      return api.patch(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`, {\n        StaticNameServers: dnsTableData\n      }).then(dispatch('getEthernetData')).then(() => {\n        return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.dns')\n        });\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n          setting: i18n.global.t('pageNetwork.dns')\n        }));\n      });\n    }\n  }\n};\nexport default NetworkStore;","map":{"version":3,"names":["api","i18n","NetworkStore","namespaced","state","ethernetData","firstInterfaceId","globalNetworkSettings","selectedInterfaceId","selectedInterfaceIndex","getters","mutations","setDomainNameState","domainState","setDnsState","dnsState","setEthernetData","setFirstInterfaceId","setGlobalNetworkSettings","data","map","DHCPv4","DHCPv6","HostName","IPv4Addresses","IPv4StaticAddresses","IPv6Addresses","IPv6StaticAddresses","LinkStatus","MACAddress","IPv6DefaultGateway","defaultGateway","Gateway","ipv6DefaultGateway","dhcpAddress","filter","ipv4","AddressOrigin","dhcpv6Address","ipv6","dhcpEnabled","DHCPEnabled","dhcp6Enabled","OperatingMode","hostname","macAddress","linkStatus","staticAddress","Address","ipv6StaticAddress","useDnsEnabled","UseDNSServers","useDomainNameEnabled","UseDomainName","useNtpEnabled","UseNTPServers","useDnsEnabledIpv6","useDomainNameEnabledIpv6","useNtpEnabledIpv6","setNtpState","ntpState","setDomainNameStateIpv6","domainStateIpv6","setDnsStateIpv6","dnsStateIpv6","setNtpStateIpv6","ntpStateIpv6","setSelectedInterfaceId","setSelectedInterfaceIndex","actions","getEthernetData","commit","get","dispatch","then","response","Members","ethernetInterface","ethernetInterfaceIds","all","ethernetInterfaces","Id","catch","error","console","log","saveDhcpEnabledState","dhcpState","patch","global","t","setting","Error","saveDhcp6EnabledState","saveDomainNameState","ipVersion","saveDnsState","saveNtpState","setSelectedTabIndex","tabIndex","setSelectedTabId","tabId","saveIpv4Address","ipv4Form","originalAddresses","SubnetMask","newAddress","concat","saveIpv6Address","ipv6Form","PrefixLength","editIpv4Address","ipv4TableData","editIpv6Address","ipv6TableData","saveSettings","interfaceSettingsForm","saveDnsAddress","dnsForm","StaticNameServers","newDnsArray","editDnsAddress","dnsTableData"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/Settings/NetworkStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst NetworkStore = {\n  namespaced: true,\n  state: {\n    ethernetData: [],\n    firstInterfaceId: '', //used for setting global DHCP settings\n    globalNetworkSettings: [],\n    selectedInterfaceId: '', // which tab is selected\n    selectedInterfaceIndex: 0, // which tab is selected\n  },\n  getters: {\n    ethernetData: (state) => state.ethernetData,\n    firstInterfaceId: (state) => state.firstInterfaceId,\n    globalNetworkSettings: (state) => state.globalNetworkSettings,\n    selectedInterfaceId: (state) => state.selectedInterfaceId,\n    selectedInterfaceIndex: (state) => state.selectedInterfaceIndex,\n  },\n  mutations: {\n    setDomainNameState: (state, domainState) =>\n      (state.domainState = domainState),\n    setDnsState: (state, dnsState) => (state.dnsState = dnsState),\n    setEthernetData: (state, ethernetData) =>\n      (state.ethernetData = ethernetData),\n    setFirstInterfaceId: (state, firstInterfaceId) =>\n      (state.firstInterfaceId = firstInterfaceId),\n    setGlobalNetworkSettings: (state, data) => {\n      state.globalNetworkSettings = data.map(({ data }) => {\n        const {\n          DHCPv4,\n          DHCPv6,\n          HostName,\n          IPv4Addresses,\n          IPv4StaticAddresses,\n          IPv6Addresses,\n          IPv6StaticAddresses,\n          LinkStatus,\n          MACAddress,\n          IPv6DefaultGateway,\n        } = data;\n        return {\n          defaultGateway: IPv4StaticAddresses[0]?.Gateway, //First static gateway is the default gateway\n          ipv6DefaultGateway: IPv6DefaultGateway,\n          dhcpAddress: IPv4Addresses.filter(\n            (ipv4) => ipv4.AddressOrigin === 'DHCP',\n          ),\n          dhcpv6Address: IPv6Addresses.filter(\n            (ipv6) =>\n              ipv6.AddressOrigin === 'SLAAC' || ipv6.AddressOrigin === 'DHCPv6',\n          ),\n          dhcpEnabled: DHCPv4.DHCPEnabled,\n          dhcp6Enabled: DHCPv6.OperatingMode,\n          hostname: HostName,\n          macAddress: MACAddress,\n          linkStatus: LinkStatus,\n          staticAddress: IPv4StaticAddresses[0]?.Address, // Display first static address on overview page\n          ipv6StaticAddress: IPv6StaticAddresses[0]?.Address,\n          useDnsEnabled: DHCPv4.UseDNSServers,\n          useDomainNameEnabled: DHCPv4.UseDomainName,\n          useNtpEnabled: DHCPv4.UseNTPServers,\n          useDnsEnabledIpv6: DHCPv6.UseDNSServers,\n          useDomainNameEnabledIpv6: DHCPv6.UseDomainName,\n          useNtpEnabledIpv6: DHCPv6.UseNTPServers,\n        };\n      });\n    },\n    setNtpState: (state, ntpState) => (state.ntpState = ntpState),\n    setDomainNameStateIpv6: (state, domainState) =>\n      (state.domainStateIpv6 = domainState),\n    setDnsStateIpv6: (state, dnsState) => (state.dnsStateIpv6 = dnsState),\n    setNtpStateIpv6: (state, ntpState) => (state.ntpStateIpv6 = ntpState),\n    setSelectedInterfaceId: (state, selectedInterfaceId) =>\n      (state.selectedInterfaceId = selectedInterfaceId),\n    setSelectedInterfaceIndex: (state, selectedInterfaceIndex) =>\n      (state.selectedInterfaceIndex = selectedInterfaceIndex),\n  },\n  actions: {\n    async getEthernetData({ commit }) {\n      return await api\n        .get(`${await this.dispatch('global/getBmcPath')}/EthernetInterfaces`)\n        .then((response) =>\n          response.data.Members.map(\n            (ethernetInterface) => ethernetInterface['@odata.id'],\n          ),\n        )\n        .then((ethernetInterfaceIds) =>\n          api.all(\n            ethernetInterfaceIds.map((ethernetInterface) =>\n              api.get(ethernetInterface),\n            ),\n          ),\n        )\n        .then((ethernetInterfaces) => {\n          const ethernetData = ethernetInterfaces.map(\n            (ethernetInterface) => ethernetInterface.data,\n          );\n          const firstInterfaceId = ethernetData[0].Id;\n\n          commit('setEthernetData', ethernetData);\n          commit('setFirstInterfaceId', firstInterfaceId);\n          commit('setSelectedInterfaceId', firstInterfaceId);\n          commit('setGlobalNetworkSettings', ethernetInterfaces);\n        })\n        .catch((error) => {\n          console.log('Network Data:', error);\n        });\n    },\n    async saveDhcpEnabledState({ state, dispatch }, dhcpState) {\n      const data = {\n        DHCPv4: {\n          DHCPEnabled: dhcpState,\n        },\n      };\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`,\n          data,\n        )\n        .then(dispatch('getEthernetData'))\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.dhcp'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.dhcp'),\n            }),\n          );\n        });\n    },\n    async saveDhcp6EnabledState({ state, dispatch }, dhcpState) {\n      const data = {\n        DHCPv6: {\n          OperatingMode: dhcpState ? 'Enabled' : 'Disabled',\n        },\n      };\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`,\n          data,\n        )\n        .then(dispatch('getEthernetData'))\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.dhcp6'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.dhcp6'),\n            }),\n          );\n        });\n    },\n    async saveDomainNameState({ commit, state }, { domainState, ipVersion }) {\n      var data;\n      if (ipVersion === 'IPv4') {\n        commit('setDomainNameState', domainState);\n        data = {\n          DHCPv4: {\n            UseDomainName: domainState,\n          },\n        };\n      } else if (ipVersion === 'IPv6') {\n        commit('setDomainNameStateIpv6', domainState);\n        data = {\n          DHCPv6: {\n            UseDomainName: domainState,\n          },\n        };\n      }\n      // Saving to the first interface automatically updates DHCPv4 and DHCPv6\n      // on all interfaces\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.firstInterfaceId}`,\n          data,\n        )\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.domainName'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          if (ipVersion === 'IPv4') commit('setDomainNameState', !domainState);\n          else if (ipVersion === 'IPv6')\n            commit('setDomainNameStateIpv6', !domainState);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.domainName'),\n            }),\n          );\n        });\n    },\n    async saveDnsState({ commit, state }, { dnsState, ipVersion }) {\n      var data;\n      if (ipVersion === 'IPv4') {\n        commit('setDnsState', dnsState);\n        data = {\n          DHCPv4: {\n            UseDNSServers: dnsState,\n          },\n        };\n      } else if (ipVersion === 'IPv6') {\n        commit('setDnsStateIpv6', dnsState);\n        data = {\n          DHCPv6: {\n            UseDNSServers: dnsState,\n          },\n        };\n      }\n      // Saving to the first interface automatically updates DHCPv4 and DHCPv6\n      // on all interfaces\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.firstInterfaceId}`,\n          data,\n        )\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.dns'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          if (ipVersion === 'IPv4') commit('setDnsState', !dnsState);\n          else if (ipVersion === 'IPv6') commit('setDnsStateIpv6', !dnsState);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.dns'),\n            }),\n          );\n        });\n    },\n    async saveNtpState({ commit, state }, { ntpState, ipVersion }) {\n      var data;\n      if (ipVersion === 'IPv4') {\n        commit('setNtpState', ntpState);\n        data = {\n          DHCPv4: {\n            UseNTPServers: ntpState,\n          },\n        };\n      } else if (ipVersion === 'IPv6') {\n        commit('setNtpStateIpv6', ntpState);\n        data = {\n          DHCPv6: {\n            UseNTPServers: ntpState,\n          },\n        };\n      }\n      // Saving to the first interface automatically updates DHCPv4 and DHCPv6\n      // on all interfaces\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.firstInterfaceId}`,\n          data,\n        )\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.ntp'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          if (ipVersion === 'IPv4') commit('setNtpState', !ntpState);\n          else if (ipVersion === 'IPv6') commit('setNtpStateIpv6', !ntpState);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.ntp'),\n            }),\n          );\n        });\n    },\n    async setSelectedTabIndex({ commit }, tabIndex) {\n      commit('setSelectedInterfaceIndex', tabIndex);\n    },\n    async setSelectedTabId({ commit }, tabId) {\n      commit('setSelectedInterfaceId', tabId);\n    },\n    async saveIpv4Address({ dispatch, state }, ipv4Form) {\n      const originalAddresses = state.ethernetData[\n        state.selectedInterfaceIndex\n      ].IPv4StaticAddresses.map((ipv4) => {\n        const { Address, SubnetMask, Gateway } = ipv4;\n        return {\n          Address,\n          SubnetMask,\n          Gateway,\n        };\n      });\n      const newAddress = [ipv4Form];\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`,\n          { IPv4StaticAddresses: originalAddresses.concat(newAddress) },\n        )\n        .then(dispatch('getEthernetData'))\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.ipv4'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.ipv4'),\n            }),\n          );\n        });\n    },\n    async saveIpv6Address({ dispatch, state }, ipv6Form) {\n      const originalAddresses = state.ethernetData[\n        state.selectedInterfaceIndex\n      ].IPv6StaticAddresses.map((ipv6) => {\n        const { Address, PrefixLength } = ipv6;\n        return {\n          Address,\n          PrefixLength,\n        };\n      });\n      const newAddress = [ipv6Form];\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`,\n          { IPv6StaticAddresses: originalAddresses.concat(newAddress) },\n        )\n        .then(dispatch('getEthernetData'))\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.ipv6'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.ipv6'),\n            }),\n          );\n        });\n    },\n    async editIpv4Address({ dispatch, state }, ipv4TableData) {\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`,\n          { IPv4StaticAddresses: ipv4TableData },\n        )\n        .then(dispatch('getEthernetData'))\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.ipv4'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.ipv4'),\n            }),\n          );\n        });\n    },\n    async editIpv6Address({ dispatch, state }, ipv6TableData) {\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`,\n          { IPv6StaticAddresses: ipv6TableData },\n        )\n        .then(dispatch('getEthernetData'))\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.ipv6'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.ipv6'),\n            }),\n          );\n        });\n    },\n    async saveSettings({ state, dispatch }, interfaceSettingsForm) {\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`,\n          interfaceSettingsForm,\n        )\n        .then(dispatch('getEthernetData'))\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.network'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.network'),\n            }),\n          );\n        });\n    },\n    async saveDnsAddress({ dispatch, state }, dnsForm) {\n      const newAddress = dnsForm;\n      const originalAddresses =\n        state.ethernetData[state.selectedInterfaceIndex].StaticNameServers;\n      const newDnsArray = originalAddresses.concat(newAddress);\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`,\n          { StaticNameServers: newDnsArray },\n        )\n        .then(dispatch('getEthernetData'))\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.dns'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.dns'),\n            }),\n          );\n        });\n    },\n    async editDnsAddress({ dispatch, state }, dnsTableData) {\n      return api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/EthernetInterfaces/${state.selectedInterfaceId}`,\n          { StaticNameServers: dnsTableData },\n        )\n        .then(dispatch('getEthernetData'))\n        .then(() => {\n          return i18n.global.t('pageNetwork.toast.successSaveNetworkSettings', {\n            setting: i18n.global.t('pageNetwork.dns'),\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageNetwork.toast.errorSaveNetworkSettings', {\n              setting: i18n.global.t('pageNetwork.dns'),\n            }),\n          );\n        });\n    },\n  },\n};\n\nexport default NetworkStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}