{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconReplace from '@carbon/icons-vue/es/renew/20';\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport ModalGenerateCsr from './ModalGenerateCsr';\nimport ModalUploadCertificate from './ModalUploadCertificate';\nimport PageTitle from '@/components/Global/PageTitle';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport StatusIcon from '@/components/Global/StatusIcon';\nimport Alert from '@/components/Global/Alert';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  name: 'Certificates',\n  components: {\n    Alert,\n    IconAdd,\n    IconReplace,\n    IconTrashcan,\n    ModalGenerateCsr,\n    ModalUploadCertificate,\n    PageTitle,\n    StatusIcon,\n    TableRowAction\n  },\n  mixins: [BVToastMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      modalCertificate: null,\n      fileTypeCorrect: undefined,\n      fields: [{\n        key: 'certificate',\n        label: i18n.global.t('pageCertificates.table.certificate')\n      }, {\n        key: 'issuedBy',\n        label: i18n.global.t('pageCertificates.table.issuedBy')\n      }, {\n        key: 'issuedTo',\n        label: i18n.global.t('pageCertificates.table.issuedTo')\n      }, {\n        key: 'validFrom',\n        label: i18n.global.t('pageCertificates.table.validFrom')\n      }, {\n        key: 'validUntil',\n        label: i18n.global.t('pageCertificates.table.validUntil')\n      }, {\n        key: 'actions',\n        label: '',\n        tdClass: 'text-right text-nowrap'\n      }]\n    };\n  },\n  computed: {\n    certificates() {\n      return this.$store.getters['certificates/allCertificates'];\n    },\n    tableItems() {\n      return this.certificates.map(certificate => {\n        return {\n          ...certificate,\n          actions: [{\n            value: 'replace',\n            title: i18n.global.t('pageCertificates.replaceCertificate')\n          }, {\n            value: 'delete',\n            title: i18n.global.t('pageCertificates.deleteCertificate'),\n            enabled: certificate.type === 'TrustStore Certificate' ? true : false\n          }]\n        };\n      });\n    },\n    certificatesForUpload() {\n      return this.$store.getters['certificates/availableUploadTypes'];\n    },\n    bmcTime() {\n      return this.$store.getters['global/bmcTime'];\n    },\n    expiredCertificateTypes() {\n      return this.certificates.reduce((acc, val) => {\n        const daysUntilExpired = this.getDaysUntilExpired(val.validUntil);\n        if (daysUntilExpired < 1) {\n          acc.push(val.certificate);\n        }\n        return acc;\n      }, []);\n    },\n    expiringCertificateTypes() {\n      return this.certificates.reduce((acc, val) => {\n        const daysUntilExpired = this.getDaysUntilExpired(val.validUntil);\n        if (daysUntilExpired < 31 && daysUntilExpired > 0) {\n          acc.push(val.certificate);\n        }\n        return acc;\n      }, []);\n    }\n  },\n  async created() {\n    this.startLoader();\n    await this.$store.dispatch('global/getBmcTime');\n    this.$store.dispatch('certificates/getCertificates').finally(() => {\n      this.endLoader();\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    onTableRowAction(event, rowItem) {\n      switch (event) {\n        case 'replace':\n          this.initModalUploadCertificate(rowItem);\n          break;\n        case 'delete':\n          this.initModalDeleteCertificate(rowItem);\n          break;\n        default:\n          break;\n      }\n    },\n    initModalUploadCertificate(certificate = null) {\n      this.modalCertificate = certificate;\n      this.$bvModal.show('upload-certificate');\n    },\n    initModalDeleteCertificate(certificate) {\n      this.$bvModal.msgBoxConfirm(i18n.global.t('pageCertificates.modal.deleteConfirmMessage', {\n        issuedBy: certificate.issuedBy,\n        certificate: certificate.certificate\n      }), {\n        title: i18n.global.t('pageCertificates.deleteCertificate'),\n        okTitle: i18n.global.t('global.action.delete'),\n        cancelTitle: i18n.global.t('global.action.cancel'),\n        autoFocusButton: 'ok'\n      }).then(deleteConfirmed => {\n        if (deleteConfirmed) this.deleteCertificate(certificate);\n      });\n    },\n    onModalOk({\n      addNew,\n      file,\n      type,\n      location\n    }) {\n      if (addNew) {\n        // Upload a new certificate\n        this.fileTypeCorrect = this.getIsFileTypeCorrect(file);\n        if (this.fileTypeCorrect) {\n          this.addNewCertificate(file, type);\n        } else {\n          this.errorToast(i18n.global.t('pageCertificates.alert.incorrectCertificateFileType'), {\n            title: i18n.global.t('pageCertificates.toast.errorAddCertificate')\n          });\n        }\n      } else {\n        // Replace an existing certificate\n        this.replaceCertificate(file, type, location);\n      }\n    },\n    addNewCertificate(file, type) {\n      if (this.fileTypeCorrect === true) {\n        this.startLoader();\n        this.$store.dispatch('certificates/addNewCertificate', {\n          file,\n          type\n        }).then(success => this.successToast(success)).catch(({\n          message\n        }) => this.errorToast(message)).finally(() => this.endLoader());\n      }\n    },\n    replaceCertificate(file, type, location) {\n      this.startLoader();\n      const reader = new FileReader();\n      reader.readAsBinaryString(file);\n      reader.onloadend = event => {\n        const certificateString = event.target.result;\n        this.$store.dispatch('certificates/replaceCertificate', {\n          certificateString,\n          type,\n          location\n        }).then(success => this.successToast(success)).catch(({\n          message\n        }) => this.errorToast(message)).finally(() => this.endLoader());\n      };\n    },\n    deleteCertificate({\n      type,\n      location\n    }) {\n      this.startLoader();\n      this.$store.dispatch('certificates/deleteCertificate', {\n        type,\n        location\n      }).then(success => this.successToast(success)).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => this.endLoader());\n    },\n    getDaysUntilExpired(date) {\n      if (this.bmcTime) {\n        const validUntilMs = date.getTime();\n        const currentBmcTimeMs = this.bmcTime.getTime();\n        const oneDayInMs = 24 * 60 * 60 * 1000;\n        return Math.round((validUntilMs - currentBmcTimeMs) / oneDayInMs);\n      }\n      return new Date();\n    },\n    getIconStatus(date) {\n      const daysUntilExpired = this.getDaysUntilExpired(date);\n      if (daysUntilExpired < 1) {\n        return 'danger';\n      } else if (daysUntilExpired < 31) {\n        return 'warning';\n      }\n    },\n    getIsFileTypeCorrect(file) {\n      const fileTypeExtension = file.name.split('.').pop();\n      return fileTypeExtension === 'pem';\n    }\n  }\n};","map":{"version":3,"names":["IconAdd","IconReplace","IconTrashcan","ModalGenerateCsr","ModalUploadCertificate","PageTitle","TableRowAction","StatusIcon","Alert","BVToastMixin","LoadingBarMixin","useI18n","i18n","name","components","mixins","beforeRouteLeave","to","from","next","hideLoader","data","$t","t","isBusy","modalCertificate","fileTypeCorrect","undefined","fields","key","label","global","tdClass","computed","certificates","$store","getters","tableItems","map","certificate","actions","value","title","enabled","type","certificatesForUpload","bmcTime","expiredCertificateTypes","reduce","acc","val","daysUntilExpired","getDaysUntilExpired","validUntil","push","expiringCertificateTypes","created","startLoader","dispatch","finally","endLoader","methods","onTableRowAction","event","rowItem","initModalUploadCertificate","initModalDeleteCertificate","$bvModal","show","msgBoxConfirm","issuedBy","okTitle","cancelTitle","autoFocusButton","then","deleteConfirmed","deleteCertificate","onModalOk","addNew","file","location","getIsFileTypeCorrect","addNewCertificate","errorToast","replaceCertificate","success","successToast","catch","message","reader","FileReader","readAsBinaryString","onloadend","certificateString","target","result","date","validUntilMs","getTime","currentBmcTimeMs","oneDayInMs","Math","round","Date","getIconStatus","fileTypeExtension","split","pop"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/SecurityAndAccess/Certificates/Certificates.vue"],"sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title />\n    <b-row>\n      <b-col xl=\"11\">\n        <!-- Expired certificates banner -->\n        <alert :show=\"expiredCertificateTypes.length > 0\" variant=\"danger\">\n          <template v-if=\"expiredCertificateTypes.length > 1\">\n            {{ $t('pageCertificates.alert.certificatesExpiredMessage') }}\n          </template>\n          <template v-else>\n            {{\n              $t('pageCertificates.alert.certificateExpiredMessage', {\n                certificate: expiredCertificateTypes[0],\n              })\n            }}\n          </template>\n        </alert>\n        <!-- Expiring certificates banner -->\n        <alert :show=\"expiringCertificateTypes.length > 0\" variant=\"warning\">\n          <template v-if=\"expiringCertificateTypes.length > 1\">\n            {{ $t('pageCertificates.alert.certificatesExpiringMessage') }}\n          </template>\n          <template v-else>\n            {{\n              $t('pageCertificates.alert.certificateExpiringMessage', {\n                certificate: expiringCertificateTypes[0],\n              })\n            }}\n          </template>\n        </alert>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col xl=\"11\" class=\"text-right\">\n        <b-button\n          v-b-modal.generate-csr\n          data-test-id=\"certificates-button-generateCsr\"\n          variant=\"link\"\n        >\n          <icon-add />\n          {{ $t('pageCertificates.generateCsr') }}\n        </b-button>\n        <b-button\n          variant=\"primary\"\n          :disabled=\"certificatesForUpload.length === 0\"\n          @click=\"initModalUploadCertificate(null)\"\n        >\n          <icon-add />\n          {{ $t('pageCertificates.addNewCertificate') }}\n        </b-button>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col xl=\"11\">\n        <b-table\n          responsive=\"md\"\n          show-empty\n          hover\n          :busy=\"isBusy\"\n          :fields=\"fields\"\n          :items=\"tableItems\"\n          :empty-text=\"$t('global.table.emptyMessage')\"\n        >\n          <template #cell(validFrom)=\"{ value }\">\n            {{ $filters.formatDate(value) }}\n          </template>\n\n          <template #cell(validUntil)=\"{ value }\">\n            <status-icon\n              v-if=\"getDaysUntilExpired(value) < 31\"\n              :status=\"getIconStatus(value)\"\n            />\n            {{ $filters.formatDate(value) }}\n          </template>\n\n          <template #cell(actions)=\"{ value, item }\">\n            <table-row-action\n              v-for=\"(action, index) in value\"\n              :key=\"index\"\n              :value=\"action.value\"\n              :title=\"action.title\"\n              :enabled=\"action.enabled\"\n              @click-table-action=\"onTableRowAction($event, item)\"\n            >\n              <template #icon>\n                <icon-replace v-if=\"action.value === 'replace'\" />\n                <icon-trashcan v-if=\"action.value === 'delete'\" />\n              </template>\n            </table-row-action>\n          </template>\n        </b-table>\n      </b-col>\n    </b-row>\n\n    <!-- Modals -->\n    <modal-upload-certificate :certificate=\"modalCertificate\" @ok=\"onModalOk\" />\n    <modal-generate-csr />\n  </b-container>\n</template>\n\n<script>\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconReplace from '@carbon/icons-vue/es/renew/20';\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\n\nimport ModalGenerateCsr from './ModalGenerateCsr';\nimport ModalUploadCertificate from './ModalUploadCertificate';\nimport PageTitle from '@/components/Global/PageTitle';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport StatusIcon from '@/components/Global/StatusIcon';\nimport Alert from '@/components/Global/Alert';\n\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  name: 'Certificates',\n  components: {\n    Alert,\n    IconAdd,\n    IconReplace,\n    IconTrashcan,\n    ModalGenerateCsr,\n    ModalUploadCertificate,\n    PageTitle,\n    StatusIcon,\n    TableRowAction,\n  },\n  mixins: [BVToastMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      modalCertificate: null,\n      fileTypeCorrect: undefined,\n      fields: [\n        {\n          key: 'certificate',\n          label: i18n.global.t('pageCertificates.table.certificate'),\n        },\n        {\n          key: 'issuedBy',\n          label: i18n.global.t('pageCertificates.table.issuedBy'),\n        },\n        {\n          key: 'issuedTo',\n          label: i18n.global.t('pageCertificates.table.issuedTo'),\n        },\n        {\n          key: 'validFrom',\n          label: i18n.global.t('pageCertificates.table.validFrom'),\n        },\n        {\n          key: 'validUntil',\n          label: i18n.global.t('pageCertificates.table.validUntil'),\n        },\n        {\n          key: 'actions',\n          label: '',\n          tdClass: 'text-right text-nowrap',\n        },\n      ],\n    };\n  },\n  computed: {\n    certificates() {\n      return this.$store.getters['certificates/allCertificates'];\n    },\n    tableItems() {\n      return this.certificates.map((certificate) => {\n        return {\n          ...certificate,\n          actions: [\n            {\n              value: 'replace',\n              title: i18n.global.t('pageCertificates.replaceCertificate'),\n            },\n            {\n              value: 'delete',\n              title: i18n.global.t('pageCertificates.deleteCertificate'),\n              enabled:\n                certificate.type === 'TrustStore Certificate' ? true : false,\n            },\n          ],\n        };\n      });\n    },\n    certificatesForUpload() {\n      return this.$store.getters['certificates/availableUploadTypes'];\n    },\n    bmcTime() {\n      return this.$store.getters['global/bmcTime'];\n    },\n    expiredCertificateTypes() {\n      return this.certificates.reduce((acc, val) => {\n        const daysUntilExpired = this.getDaysUntilExpired(val.validUntil);\n        if (daysUntilExpired < 1) {\n          acc.push(val.certificate);\n        }\n        return acc;\n      }, []);\n    },\n    expiringCertificateTypes() {\n      return this.certificates.reduce((acc, val) => {\n        const daysUntilExpired = this.getDaysUntilExpired(val.validUntil);\n        if (daysUntilExpired < 31 && daysUntilExpired > 0) {\n          acc.push(val.certificate);\n        }\n        return acc;\n      }, []);\n    },\n  },\n  async created() {\n    this.startLoader();\n    await this.$store.dispatch('global/getBmcTime');\n    this.$store.dispatch('certificates/getCertificates').finally(() => {\n      this.endLoader();\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    onTableRowAction(event, rowItem) {\n      switch (event) {\n        case 'replace':\n          this.initModalUploadCertificate(rowItem);\n          break;\n        case 'delete':\n          this.initModalDeleteCertificate(rowItem);\n          break;\n        default:\n          break;\n      }\n    },\n    initModalUploadCertificate(certificate = null) {\n      this.modalCertificate = certificate;\n      this.$bvModal.show('upload-certificate');\n    },\n    initModalDeleteCertificate(certificate) {\n      this.$bvModal\n        .msgBoxConfirm(\n          i18n.global.t('pageCertificates.modal.deleteConfirmMessage', {\n            issuedBy: certificate.issuedBy,\n            certificate: certificate.certificate,\n          }),\n          {\n            title: i18n.global.t('pageCertificates.deleteCertificate'),\n            okTitle: i18n.global.t('global.action.delete'),\n            cancelTitle: i18n.global.t('global.action.cancel'),\n            autoFocusButton: 'ok',\n          },\n        )\n        .then((deleteConfirmed) => {\n          if (deleteConfirmed) this.deleteCertificate(certificate);\n        });\n    },\n    onModalOk({ addNew, file, type, location }) {\n      if (addNew) {\n        // Upload a new certificate\n        this.fileTypeCorrect = this.getIsFileTypeCorrect(file);\n        if (this.fileTypeCorrect) {\n          this.addNewCertificate(file, type);\n        } else {\n          this.errorToast(\n            i18n.global.t(\n              'pageCertificates.alert.incorrectCertificateFileType',\n            ),\n            {\n              title: i18n.global.t(\n                'pageCertificates.toast.errorAddCertificate',\n              ),\n            },\n          );\n        }\n      } else {\n        // Replace an existing certificate\n        this.replaceCertificate(file, type, location);\n      }\n    },\n    addNewCertificate(file, type) {\n      if (this.fileTypeCorrect === true) {\n        this.startLoader();\n        this.$store\n          .dispatch('certificates/addNewCertificate', { file, type })\n          .then((success) => this.successToast(success))\n          .catch(({ message }) => this.errorToast(message))\n          .finally(() => this.endLoader());\n      }\n    },\n    replaceCertificate(file, type, location) {\n      this.startLoader();\n      const reader = new FileReader();\n      reader.readAsBinaryString(file);\n      reader.onloadend = (event) => {\n        const certificateString = event.target.result;\n        this.$store\n          .dispatch('certificates/replaceCertificate', {\n            certificateString,\n            type,\n            location,\n          })\n          .then((success) => this.successToast(success))\n          .catch(({ message }) => this.errorToast(message))\n          .finally(() => this.endLoader());\n      };\n    },\n    deleteCertificate({ type, location }) {\n      this.startLoader();\n      this.$store\n        .dispatch('certificates/deleteCertificate', {\n          type,\n          location,\n        })\n        .then((success) => this.successToast(success))\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => this.endLoader());\n    },\n    getDaysUntilExpired(date) {\n      if (this.bmcTime) {\n        const validUntilMs = date.getTime();\n        const currentBmcTimeMs = this.bmcTime.getTime();\n        const oneDayInMs = 24 * 60 * 60 * 1000;\n        return Math.round((validUntilMs - currentBmcTimeMs) / oneDayInMs);\n      }\n      return new Date();\n    },\n    getIconStatus(date) {\n      const daysUntilExpired = this.getDaysUntilExpired(date);\n      if (daysUntilExpired < 1) {\n        return 'danger';\n      } else if (daysUntilExpired < 31) {\n        return 'warning';\n      }\n    },\n    getIsFileTypeCorrect(file) {\n      const fileTypeExtension = file.name.split('.').pop();\n      return fileTypeExtension === 'pem';\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}