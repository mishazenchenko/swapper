{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst PostCodeLogsStore = {\n  namespaced: true,\n  state: {\n    allPostCodes: []\n  },\n  getters: {\n    allPostCodes: state => state.allPostCodes\n  },\n  mutations: {\n    setAllPostCodes: (state, allPostCodes) => state.allPostCodes = allPostCodes\n  },\n  actions: {\n    async getPostCodesLogData({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getSystemPath')}/LogServices/PostCodes/Entries`).then(({\n        data: {\n          Members = []\n        } = {}\n      }) => {\n        const postCodeLogs = Members.map(log => {\n          const {\n            Created,\n            MessageArgs,\n            AdditionalDataURI\n          } = log;\n          return {\n            date: new Date(Created),\n            bootCount: MessageArgs[0],\n            timeStampOffset: MessageArgs[1],\n            postCode: MessageArgs[2],\n            uri: AdditionalDataURI\n          };\n        });\n        commit('setAllPostCodes', postCodeLogs);\n      }).catch(error => {\n        console.log('POST Codes Log Data:', error);\n      });\n    },\n    async deleteAllPostCodeLogs({\n      dispatch\n    }, data) {\n      return await api.post(`${await this.dispatch('global/getSystemPath')}/LogServices/PostCodes/Actions/LogService.ClearLog`).then(() => dispatch('getPostCodesLogData')).then(() => i18n.global.t('pagePostCodeLogs.toast.successDelete', data.length)).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pagePostCodeLogs.toast.errorDelete', data.length));\n      });\n    }\n  }\n};\nexport default PostCodeLogsStore;","map":{"version":3,"names":["api","i18n","PostCodeLogsStore","namespaced","state","allPostCodes","getters","mutations","setAllPostCodes","actions","getPostCodesLogData","commit","get","dispatch","then","data","Members","postCodeLogs","map","log","Created","MessageArgs","AdditionalDataURI","date","Date","bootCount","timeStampOffset","postCode","uri","catch","error","console","deleteAllPostCodeLogs","post","global","t","length","Error"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/Logs/PostCodeLogsStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst PostCodeLogsStore = {\n  namespaced: true,\n  state: {\n    allPostCodes: [],\n  },\n  getters: {\n    allPostCodes: (state) => state.allPostCodes,\n  },\n  mutations: {\n    setAllPostCodes: (state, allPostCodes) =>\n      (state.allPostCodes = allPostCodes),\n  },\n  actions: {\n    async getPostCodesLogData({ commit }) {\n      return await api\n        .get(\n          `${await this.dispatch('global/getSystemPath')}/LogServices/PostCodes/Entries`,\n        )\n        .then(({ data: { Members = [] } = {} }) => {\n          const postCodeLogs = Members.map((log) => {\n            const { Created, MessageArgs, AdditionalDataURI } = log;\n            return {\n              date: new Date(Created),\n              bootCount: MessageArgs[0],\n              timeStampOffset: MessageArgs[1],\n              postCode: MessageArgs[2],\n              uri: AdditionalDataURI,\n            };\n          });\n          commit('setAllPostCodes', postCodeLogs);\n        })\n        .catch((error) => {\n          console.log('POST Codes Log Data:', error);\n        });\n    },\n    async deleteAllPostCodeLogs({ dispatch }, data) {\n      return await api\n        .post(\n          `${await this.dispatch('global/getSystemPath')}/LogServices/PostCodes/Actions/LogService.ClearLog`,\n        )\n        .then(() => dispatch('getPostCodesLogData'))\n        .then(() =>\n          i18n.global.t('pagePostCodeLogs.toast.successDelete', data.length),\n        )\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pagePostCodeLogs.toast.errorDelete', data.length),\n          );\n        });\n    },\n  },\n};\n\nexport default PostCodeLogsStore;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,OAAOC,IAAI,MAAM,QAAQ;AAEzB,MAAMC,iBAAiB,GAAG;EACxBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACLC,YAAY,EAAE;EAChB,CAAC;EACDC,OAAO,EAAE;IACPD,YAAY,EAAGD,KAAK,IAAKA,KAAK,CAACC;EACjC,CAAC;EACDE,SAAS,EAAE;IACTC,eAAe,EAAEA,CAACJ,KAAK,EAAEC,YAAY,KAClCD,KAAK,CAACC,YAAY,GAAGA;EAC1B,CAAC;EACDI,OAAO,EAAE;IACP,MAAMC,mBAAmBA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACpC,OAAO,MAAMX,GAAG,CACbY,GAAG,CACF,GAAG,MAAM,IAAI,CAACC,QAAQ,CAAC,sBAAsB,CAAC,gCAChD,CAAC,CACAC,IAAI,CAAC,CAAC;QAAEC,IAAI,EAAE;UAAEC,OAAO,GAAG;QAAG,CAAC,GAAG,CAAC;MAAE,CAAC,KAAK;QACzC,MAAMC,YAAY,GAAGD,OAAO,CAACE,GAAG,CAAEC,GAAG,IAAK;UACxC,MAAM;YAAEC,OAAO;YAAEC,WAAW;YAAEC;UAAkB,CAAC,GAAGH,GAAG;UACvD,OAAO;YACLI,IAAI,EAAE,IAAIC,IAAI,CAACJ,OAAO,CAAC;YACvBK,SAAS,EAAEJ,WAAW,CAAC,CAAC,CAAC;YACzBK,eAAe,EAAEL,WAAW,CAAC,CAAC,CAAC;YAC/BM,QAAQ,EAAEN,WAAW,CAAC,CAAC,CAAC;YACxBO,GAAG,EAAEN;UACP,CAAC;QACH,CAAC,CAAC;QACFX,MAAM,CAAC,iBAAiB,EAAEM,YAAY,CAAC;MACzC,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACZ,GAAG,CAAC,sBAAsB,EAAEW,KAAK,CAAC;MAC5C,CAAC,CAAC;IACN,CAAC;IACD,MAAME,qBAAqBA,CAAC;MAAEnB;IAAS,CAAC,EAAEE,IAAI,EAAE;MAC9C,OAAO,MAAMf,GAAG,CACbiC,IAAI,CACH,GAAG,MAAM,IAAI,CAACpB,QAAQ,CAAC,sBAAsB,CAAC,oDAChD,CAAC,CACAC,IAAI,CAAC,MAAMD,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAC3CC,IAAI,CAAC,MACJb,IAAI,CAACiC,MAAM,CAACC,CAAC,CAAC,sCAAsC,EAAEpB,IAAI,CAACqB,MAAM,CACnE,CAAC,CACAP,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACZ,GAAG,CAACW,KAAK,CAAC;QAClB,MAAM,IAAIO,KAAK,CACbpC,IAAI,CAACiC,MAAM,CAACC,CAAC,CAAC,oCAAoC,EAAEpB,IAAI,CAACqB,MAAM,CACjE,CAAC;MACH,CAAC,CAAC;IACN;EACF;AACF,CAAC;AAED,eAAelC,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}