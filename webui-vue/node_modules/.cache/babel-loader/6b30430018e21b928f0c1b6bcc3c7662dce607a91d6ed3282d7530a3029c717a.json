{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_b_col = _resolveComponent(\"b-col\");\n  const _component_b_row = _resolveComponent(\"b-row\");\n  const _component_overview_card = _resolveComponent(\"overview-card\");\n  return _openBlock(), _createBlock(_component_overview_card, {\n    title: $data.$t('pageOverview.firmwareInformation'),\n    to: `/operations/firmware`\n  }, {\n    default: _withCtx(() => [_createVNode(_component_b_row, {\n      class: \"mt-3\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_b_col, {\n        sm: \"6\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"dl\", null, [_createElementVNode(\"dt\", null, _toDisplayString($data.$t('pageOverview.runningVersion')), 1 /* TEXT */), _createElementVNode(\"dd\", null, _toDisplayString(_ctx.dataFormatter(_ctx.runningVersion)), 1 /* TEXT */), _createElementVNode(\"dt\", null, _toDisplayString($data.$t('pageOverview.backupVersion')), 1 /* TEXT */), _createElementVNode(\"dd\", null, _toDisplayString(_ctx.dataFormatter(_ctx.backupVersion)), 1 /* TEXT */)])], undefined, true),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_b_col, {\n        sm: \"6\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"dl\", null, [_createElementVNode(\"dt\", null, _toDisplayString($data.$t('pageOverview.firmwareVersion')), 1 /* TEXT */), _createElementVNode(\"dd\", null, _toDisplayString(_ctx.dataFormatter(_ctx.firmwareVersion)), 1 /* TEXT */)])], undefined, true),\n        _: 1 /* STABLE */\n      })], undefined, true),\n      _: 1 /* STABLE */\n    })], undefined, true),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"title\"]);\n}","map":{"version":3,"names":["_createBlock","_component_overview_card","title","$data","$t","to","default","_withCtx","_createVNode","_component_b_row","class","_component_b_col","sm","_createElementVNode","_toDisplayString","_ctx","dataFormatter","runningVersion","backupVersion","_","firmwareVersion"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Overview/OverviewFirmware.vue"],"sourcesContent":["<template>\n  <overview-card\n    :title=\"$t('pageOverview.firmwareInformation')\"\n    :to=\"`/operations/firmware`\"\n  >\n    <b-row class=\"mt-3\">\n      <b-col sm=\"6\">\n        <dl>\n          <dt>{{ $t('pageOverview.runningVersion') }}</dt>\n          <dd>{{ dataFormatter(runningVersion) }}</dd>\n          <dt>{{ $t('pageOverview.backupVersion') }}</dt>\n          <dd>{{ dataFormatter(backupVersion) }}</dd>\n        </dl>\n      </b-col>\n      <b-col sm=\"6\">\n        <dl>\n          <dt>{{ $t('pageOverview.firmwareVersion') }}</dt>\n          <dd>{{ dataFormatter(firmwareVersion) }}</dd>\n        </dl>\n      </b-col>\n    </b-row>\n  </overview-card>\n</template>\n\n<script>\nimport OverviewCard from './OverviewCard';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  name: 'Firmware',\n  components: {\n    OverviewCard,\n  },\n  mixins: [DataFormatterMixin],\n  data() {\n    return {\n      $t: useI18n().t,\n    };\n  },\n  computed: {\n    ...mapState({\n      server: (state) => state.system.systems[0],\n      backupBmcFirmware() {\n        return this.$store.getters['firmware/backupBmcFirmware'];\n      },\n      backupVersion() {\n        return this.backupBmcFirmware?.version;\n      },\n      activeBmcFirmware() {\n        return this.$store.getters[`firmware/activeBmcFirmware`];\n      },\n      firmwareVersion() {\n        return this.server?.firmwareVersion;\n      },\n      runningVersion() {\n        return this.activeBmcFirmware?.version;\n      },\n    }),\n  },\n  created() {\n    this.$store.dispatch('firmware/getFirmwareInformation').finally(() => {\n      this.$root.$emit('overview-firmware-complete');\n    });\n  },\n};\n</script>\n"],"mappings":";;;;;uBACEA,YAAA,CAoBgBC,wBAAA;IAnBbC,KAAK,EAAEC,KAAA,CAAAC,EAAE;IACTC,EAAE,EAAE;;IAHTC,OAAA,EAAAC,QAAA,CAKI,MAeQ,CAfRC,YAAA,CAeQC,gBAAA;MAfDC,KAAK,EAAC;IAAM;MALvBJ,OAAA,EAAAC,QAAA,CAMM,MAOQ,CAPRC,YAAA,CAOQG,gBAAA;QAPDC,EAAE,EAAC;MAAG;QANnBN,OAAA,EAAAC,QAAA,CAOQ,MAKK,CALLM,mBAAA,CAKK,aAJHA,mBAAA,CAAgD,YAAAC,gBAAA,CAAzCX,KAAA,CAAAC,EAAE,iDACTS,mBAAA,CAA4C,YAAAC,gBAAA,CAArCC,IAAA,CAAAC,aAAa,CAACD,IAAA,CAAAE,cAAc,mBACnCJ,mBAAA,CAA+C,YAAAC,gBAAA,CAAxCX,KAAA,CAAAC,EAAE,gDACTS,mBAAA,CAA2C,YAAAC,gBAAA,CAApCC,IAAA,CAAAC,aAAa,CAACD,IAAA,CAAAG,aAAa,kB;QAX5CC,CAAA;UAcMX,YAAA,CAKQG,gBAAA;QALDC,EAAE,EAAC;MAAG;QAdnBN,OAAA,EAAAC,QAAA,CAeQ,MAGK,CAHLM,mBAAA,CAGK,aAFHA,mBAAA,CAAiD,YAAAC,gBAAA,CAA1CX,KAAA,CAAAC,EAAE,kDACTS,mBAAA,CAA6C,YAAAC,gBAAA,CAAtCC,IAAA,CAAAC,aAAa,CAACD,IAAA,CAAAK,eAAe,kB;QAjB9CD,CAAA;;MAAAA,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}