{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-background p-3\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_b_form_select_option = _resolveComponent(\"b-form-select-option\");\n  const _component_b_form_select = _resolveComponent(\"b-form-select\");\n  const _component_b_form_invalid_feedback = _resolveComponent(\"b-form-invalid-feedback\");\n  const _component_b_form_group = _resolveComponent(\"b-form-group\");\n  const _component_alert = _resolveComponent(\"alert\");\n  const _component_b_button = _resolveComponent(\"b-button\");\n  const _component_b_form = _resolveComponent(\"b-form\");\n  const _component_modal_confirmation = _resolveComponent(\"modal-confirmation\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_b_form, {\n    id: \"form-new-dump\",\n    novalidate: \"\",\n    onSubmit: _withModifiers($options.handleSubmit, [\"prevent\"])\n  }, {\n    default: _withCtx(() => [_createVNode(_component_b_form_group, {\n      label: $data.$t('pageDumps.form.selectDumpType'),\n      \"label-for\": \"selectDumpType\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_b_form_select, {\n        id: \"selectDumpType\",\n        modelValue: $data.selectedDumpType,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedDumpType = $event),\n        options: $data.dumpTypeOptions,\n        state: _ctx.getValidationState($setup.v$.selectedDumpType)\n      }, {\n        first: _withCtx(() => [_createVNode(_component_b_form_select_option, {\n          value: null,\n          disabled: \"\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.form.selectAnOption')), 1 /* TEXT */)], undefined, true),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"options\", \"state\"]), _createVNode(_component_b_form_invalid_feedback, {\n        role: \"alert\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.form.required')), 1 /* TEXT */)], undefined, true),\n        _: 1 /* STABLE */\n      })], undefined, true),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"label\"]), _createVNode(_component_alert, {\n      variant: \"info\",\n      class: \"mb-3\",\n      show: $data.selectedDumpType === 'system'\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('pageDumps.form.systemDumpInfo')), 1 /* TEXT */)], undefined, true),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"show\"]), _createVNode(_component_b_button, {\n      variant: \"primary\",\n      type: \"submit\",\n      form: \"form-new-dump\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('pageDumps.form.initiateDump')), 1 /* TEXT */)], undefined, true),\n      _: 1 /* STABLE */\n    })], undefined, true),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onSubmit\"]), _createVNode(_component_modal_confirmation, {\n    onOk: $options.createSystemDump\n  }, null, 8 /* PROPS */, [\"onOk\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_b_form","id","novalidate","onSubmit","_withModifiers","$options","handleSubmit","default","_withCtx","_component_b_form_group","label","$data","$t","_component_b_form_select","modelValue","selectedDumpType","_cache","$event","options","dumpTypeOptions","state","_ctx","getValidationState","$setup","v$","first","_component_b_form_select_option","value","disabled","_createTextVNode","_toDisplayString","_","_component_b_form_invalid_feedback","role","_component_alert","variant","show","_component_b_button","type","form","_component_modal_confirmation","onOk","createSystemDump"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Logs/Dumps/DumpsForm.vue"],"sourcesContent":["<template>\n  <div class=\"form-background p-3\">\n    <b-form id=\"form-new-dump\" novalidate @submit.prevent=\"handleSubmit\">\n      <b-form-group\n        :label=\"$t('pageDumps.form.selectDumpType')\"\n        label-for=\"selectDumpType\"\n      >\n        <b-form-select\n          id=\"selectDumpType\"\n          v-model=\"selectedDumpType\"\n          :options=\"dumpTypeOptions\"\n          :state=\"getValidationState(v$.selectedDumpType)\"\n        >\n          <template #first>\n            <b-form-select-option :value=\"null\" disabled>\n              {{ $t('global.form.selectAnOption') }}\n            </b-form-select-option>\n          </template>\n        </b-form-select>\n        <b-form-invalid-feedback role=\"alert\">\n          {{ $t('global.form.required') }}\n        </b-form-invalid-feedback>\n      </b-form-group>\n      <alert variant=\"info\" class=\"mb-3\" :show=\"selectedDumpType === 'system'\">\n        {{ $t('pageDumps.form.systemDumpInfo') }}\n      </alert>\n      <b-button variant=\"primary\" type=\"submit\" form=\"form-new-dump\">\n        {{ $t('pageDumps.form.initiateDump') }}\n      </b-button>\n    </b-form>\n    <modal-confirmation @ok=\"createSystemDump\" />\n  </div>\n</template>\n\n<script>\nimport { useVuelidate } from '@vuelidate/core';\nimport { required } from '@vuelidate/validators';\nimport ModalConfirmation from './DumpsModalConfirmation';\nimport Alert from '@/components/Global/Alert';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport i18n from '@/i18n';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  components: { Alert, ModalConfirmation },\n  mixins: [BVToastMixin, VuelidateMixin],\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      selectedDumpType: null,\n      dumpTypeOptions: [\n        { value: 'bmc', text: i18n.global.t('pageDumps.form.bmcDump') },\n        { value: 'system', text: i18n.global.t('pageDumps.form.systemDump') },\n      ],\n    };\n  },\n  validations() {\n    return {\n      selectedDumpType: { required },\n    };\n  },\n  methods: {\n    handleSubmit() {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n\n      // System dump initiation\n      if (this.selectedDumpType === 'system') {\n        this.showConfirmationModal();\n      }\n      // BMC dump initiation\n      else if (this.selectedDumpType === 'bmc') {\n        this.$store\n          .dispatch('dumps/createBmcDump')\n          .then(() =>\n            this.infoToast(\n              i18n.global.t('pageDumps.toast.successStartBmcDump'),\n              {\n                title: i18n.global.t(\n                  'pageDumps.toast.successStartBmcDumpTitle',\n                ),\n                timestamp: true,\n              },\n            ),\n          )\n          .catch(({ message }) => this.errorToast(message));\n      }\n    },\n    showConfirmationModal() {\n      this.$bvModal.show('modal-confirmation');\n    },\n    createSystemDump() {\n      this.$store\n        .dispatch('dumps/createSystemDump')\n        .then(() =>\n          this.infoToast(\n            i18n.global.t('pageDumps.toast.successStartSystemDump'),\n            {\n              title: i18n.global.t(\n                'pageDumps.toast.successStartSystemDumpTitle',\n              ),\n              timestamp: true,\n            },\n          ),\n        )\n        .catch(({ message }) => this.errorToast(message));\n    },\n  },\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAqB;;;;;;;;;;uBAAhCC,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BJC,YAAA,CA2BSC,iBAAA;IA3BDC,EAAE,EAAC,eAAe;IAACC,UAAU,EAAV,EAAU;IAAEC,QAAM,EAFjDC,cAAA,CAE2DC,QAAA,CAAAC,YAAY;;IAFvEC,OAAA,EAAAC,QAAA,CAGM,MAmBe,CAnBfT,YAAA,CAmBeU,uBAAA;MAlBZC,KAAK,EAAEC,KAAA,CAAAC,EAAE;MACV,WAAS,EAAC;;MALlBL,OAAA,EAAAC,QAAA,CAOQ,MAWgB,CAXhBT,YAAA,CAWgBc,wBAAA;QAVdZ,EAAE,EAAC,gBAAgB;QAR7Ba,UAAA,EASmBH,KAAA,CAAAI,gBAAgB;QATnC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IASmBN,KAAA,CAAAI,gBAAgB,GAAAE,MAAA;QACxBC,OAAO,EAAEP,KAAA,CAAAQ,eAAe;QACxBC,KAAK,EAAEC,IAAA,CAAAC,kBAAkB,CAACC,MAAA,CAAAC,EAAE,CAACT,gBAAgB;;QAEnCU,KAAK,EAAAjB,QAAA,CACd,MAEuB,CAFvBT,YAAA,CAEuB2B,+BAAA;UAFAC,KAAK,EAAE,IAAI;UAAEC,QAAQ,EAAR;;UAdhDrB,OAAA,EAAAC,QAAA,CAec,MAAsC,CAfpDqB,gBAAA,CAAAC,gBAAA,CAeiBnB,KAAA,CAAAC,EAAE,+C;UAfnBmB,CAAA;;QAAAA,CAAA;6DAmBQhC,YAAA,CAE0BiC,kCAAA;QAFDC,IAAI,EAAC;MAAO;QAnB7C1B,OAAA,EAAAC,QAAA,CAoBU,MAAgC,CApB1CqB,gBAAA,CAAAC,gBAAA,CAoBanB,KAAA,CAAAC,EAAE,yC;QApBfmB,CAAA;;MAAAA,CAAA;kCAuBMhC,YAAA,CAEQmC,gBAAA;MAFDC,OAAO,EAAC,MAAM;MAACvC,KAAK,EAAC,MAAM;MAAEwC,IAAI,EAAEzB,KAAA,CAAAI,gBAAgB;;MAvBhER,OAAA,EAAAC,QAAA,CAwBQ,MAAyC,CAxBjDqB,gBAAA,CAAAC,gBAAA,CAwBWnB,KAAA,CAAAC,EAAE,kD;MAxBbmB,CAAA;iCA0BMhC,YAAA,CAEWsC,mBAAA;MAFDF,OAAO,EAAC,SAAS;MAACG,IAAI,EAAC,QAAQ;MAACC,IAAI,EAAC;;MA1BrDhC,OAAA,EAAAC,QAAA,CA2BQ,MAAuC,CA3B/CqB,gBAAA,CAAAC,gBAAA,CA2BWnB,KAAA,CAAAC,EAAE,gD;MA3BbmB,CAAA;;IAAAA,CAAA;mCA8BIhC,YAAA,CAA6CyC,6BAAA;IAAxBC,IAAE,EAAEpC,QAAA,CAAAqC;EAAgB,kC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}