{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst MemoryStore = {\n  namespaced: true,\n  state: {\n    dimms: []\n  },\n  getters: {\n    dimms: state => state.dimms\n  },\n  mutations: {\n    setMemoryInfo: (state, data) => {\n      state.dimms = data.map(({\n        data\n      }) => {\n        const {\n          Id,\n          Status = {},\n          BaseModuleType,\n          BusWidthBits,\n          CapacityMiB,\n          DataWidthBits,\n          Enabled,\n          ErrorCorrection,\n          Manufacturer,\n          OperatingSpeedMhz,\n          PartNumber,\n          RankCount,\n          SerialNumber,\n          SparePartNumber,\n          Description,\n          MemoryType,\n          LocationIndicatorActive,\n          Location\n        } = data;\n        return {\n          id: Id,\n          health: Status.Health,\n          baseModuleType: BaseModuleType,\n          busWidthBits: BusWidthBits,\n          capacityMiB: CapacityMiB,\n          dataWidthBits: DataWidthBits,\n          operatingSpeedMhz: OperatingSpeedMhz,\n          enabled: Enabled,\n          errorCorrection: ErrorCorrection,\n          manufacturer: Manufacturer,\n          partNumber: PartNumber,\n          rankCount: RankCount,\n          serialNumber: SerialNumber,\n          statusState: Status.State,\n          sparePartNumber: SparePartNumber,\n          description: Description,\n          memoryType: MemoryType,\n          identifyLed: LocationIndicatorActive,\n          uri: data['@odata.id'],\n          locationNumber: Location?.PartLocation?.ServiceLabel\n        };\n      });\n    }\n  },\n  actions: {\n    async getDimms({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getSystemPath')}/Memory`).then(({\n        data: {\n          Members\n        }\n      }) => {\n        const promises = Members.map(item => api.get(item['@odata.id']));\n        return api.all(promises);\n      }).then(response => commit('setMemoryInfo', response)).catch(error => console.log(error));\n    },\n    async updateIdentifyLedValue({\n      dispatch\n    }, led) {\n      const uri = led.uri;\n      const updatedIdentifyLedValue = {\n        LocationIndicatorActive: led.identifyLed\n      };\n      return await api.patch(uri, updatedIdentifyLedValue).then(() => {\n        if (led.identifyLed) {\n          return i18n.global.t('pageInventory.toast.successEnableIdentifyLed');\n        } else {\n          return i18n.global.t('pageInventory.toast.successDisableIdentifyLed');\n        }\n      }).catch(error => {\n        dispatch('getDimms');\n        console.log('error', error);\n        if (led.identifyLed) {\n          throw new Error(i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'));\n        } else {\n          throw new Error(i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'));\n        }\n      });\n    }\n  }\n};\nexport default MemoryStore;","map":{"version":3,"names":["api","i18n","MemoryStore","namespaced","state","dimms","getters","mutations","setMemoryInfo","data","map","Id","Status","BaseModuleType","BusWidthBits","CapacityMiB","DataWidthBits","Enabled","ErrorCorrection","Manufacturer","OperatingSpeedMhz","PartNumber","RankCount","SerialNumber","SparePartNumber","Description","MemoryType","LocationIndicatorActive","Location","id","health","Health","baseModuleType","busWidthBits","capacityMiB","dataWidthBits","operatingSpeedMhz","enabled","errorCorrection","manufacturer","partNumber","rankCount","serialNumber","statusState","State","sparePartNumber","description","memoryType","identifyLed","uri","locationNumber","PartLocation","ServiceLabel","actions","getDimms","commit","get","dispatch","then","Members","promises","item","all","response","catch","error","console","log","updateIdentifyLedValue","led","updatedIdentifyLedValue","patch","global","t","Error"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/HardwareStatus/MemoryStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst MemoryStore = {\n  namespaced: true,\n  state: {\n    dimms: [],\n  },\n  getters: {\n    dimms: (state) => state.dimms,\n  },\n  mutations: {\n    setMemoryInfo: (state, data) => {\n      state.dimms = data.map(({ data }) => {\n        const {\n          Id,\n          Status = {},\n          BaseModuleType,\n          BusWidthBits,\n          CapacityMiB,\n          DataWidthBits,\n          Enabled,\n          ErrorCorrection,\n          Manufacturer,\n          OperatingSpeedMhz,\n          PartNumber,\n          RankCount,\n          SerialNumber,\n          SparePartNumber,\n          Description,\n          MemoryType,\n          LocationIndicatorActive,\n          Location,\n        } = data;\n        return {\n          id: Id,\n          health: Status.Health,\n          baseModuleType: BaseModuleType,\n          busWidthBits: BusWidthBits,\n          capacityMiB: CapacityMiB,\n          dataWidthBits: DataWidthBits,\n          operatingSpeedMhz: OperatingSpeedMhz,\n          enabled: Enabled,\n          errorCorrection: ErrorCorrection,\n          manufacturer: Manufacturer,\n          partNumber: PartNumber,\n          rankCount: RankCount,\n          serialNumber: SerialNumber,\n          statusState: Status.State,\n          sparePartNumber: SparePartNumber,\n          description: Description,\n          memoryType: MemoryType,\n          identifyLed: LocationIndicatorActive,\n          uri: data['@odata.id'],\n          locationNumber: Location?.PartLocation?.ServiceLabel,\n        };\n      });\n    },\n  },\n  actions: {\n    async getDimms({ commit }) {\n      return await api\n        .get(`${await this.dispatch('global/getSystemPath')}/Memory`)\n        .then(({ data: { Members } }) => {\n          const promises = Members.map((item) => api.get(item['@odata.id']));\n          return api.all(promises);\n        })\n        .then((response) => commit('setMemoryInfo', response))\n        .catch((error) => console.log(error));\n    },\n    async updateIdentifyLedValue({ dispatch }, led) {\n      const uri = led.uri;\n      const updatedIdentifyLedValue = {\n        LocationIndicatorActive: led.identifyLed,\n      };\n      return await api\n        .patch(uri, updatedIdentifyLedValue)\n        .then(() => {\n          if (led.identifyLed) {\n            return i18n.global.t(\n              'pageInventory.toast.successEnableIdentifyLed',\n            );\n          } else {\n            return i18n.global.t(\n              'pageInventory.toast.successDisableIdentifyLed',\n            );\n          }\n        })\n        .catch((error) => {\n          dispatch('getDimms');\n          console.log('error', error);\n          if (led.identifyLed) {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'),\n            );\n          } else {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'),\n            );\n          }\n        });\n    },\n  },\n};\n\nexport default MemoryStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}