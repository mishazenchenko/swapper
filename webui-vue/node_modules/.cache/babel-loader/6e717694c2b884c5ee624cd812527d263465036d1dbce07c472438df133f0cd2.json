{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst ChassisStore = {\n  namespaced: true,\n  state: {\n    chassis: []\n  },\n  getters: {\n    chassis: state => state.chassis\n  },\n  mutations: {\n    setChassisInfo: (state, data) => {\n      state.chassis = data.map(chassis => {\n        const {\n          Id,\n          Status = {},\n          PartNumber,\n          SerialNumber,\n          ChassisType,\n          Manufacturer,\n          PowerState,\n          LocationIndicatorActive,\n          AssetTag,\n          Model,\n          MaxPowerWatts,\n          MinPowerWatts,\n          Name,\n          Location\n        } = chassis;\n        return {\n          id: Id,\n          health: Status.Health,\n          partNumber: PartNumber,\n          serialNumber: SerialNumber,\n          chassisType: ChassisType,\n          manufacturer: Manufacturer,\n          powerState: PowerState,\n          statusState: Status.State,\n          healthRollup: Status.HealthRollup,\n          assetTag: AssetTag,\n          model: Model,\n          maxPowerWatts: MaxPowerWatts,\n          minPowerWatts: MinPowerWatts,\n          name: Name,\n          identifyLed: LocationIndicatorActive,\n          uri: chassis['@odata.id'],\n          locationNumber: Location?.PartLocation?.ServiceLabel\n        };\n      });\n    }\n  },\n  actions: {\n    async getChassisInfo({\n      commit\n    }) {\n      return await api.get('/redfish/v1/Chassis').then(({\n        data: {\n          Members = []\n        }\n      }) => Members.map(member => api.get(member['@odata.id']))).then(promises => api.all(promises)).then(response => {\n        const data = response.map(({\n          data\n        }) => data);\n        commit('setChassisInfo', data);\n      }).catch(error => console.log(error));\n    },\n    async updateIdentifyLedValue({\n      dispatch\n    }, led) {\n      const uri = led.uri;\n      const updatedIdentifyLedValue = {\n        LocationIndicatorActive: led.identifyLed\n      };\n      return await api.patch(uri, updatedIdentifyLedValue).then(() => {\n        dispatch('getChassisInfo');\n        if (led.identifyLed) {\n          return i18n.global.t('pageInventory.toast.successEnableIdentifyLed');\n        } else {\n          return i18n.global.t('pageInventory.toast.successDisableIdentifyLed');\n        }\n      }).catch(error => {\n        dispatch('getChassisInfo');\n        console.log('error', error);\n        if (led.identifyLed) {\n          throw new Error(i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'));\n        } else {\n          throw new Error(i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'));\n        }\n      });\n    }\n  }\n};\nexport default ChassisStore;","map":{"version":3,"names":["api","i18n","ChassisStore","namespaced","state","chassis","getters","mutations","setChassisInfo","data","map","Id","Status","PartNumber","SerialNumber","ChassisType","Manufacturer","PowerState","LocationIndicatorActive","AssetTag","Model","MaxPowerWatts","MinPowerWatts","Name","Location","id","health","Health","partNumber","serialNumber","chassisType","manufacturer","powerState","statusState","State","healthRollup","HealthRollup","assetTag","model","maxPowerWatts","minPowerWatts","name","identifyLed","uri","locationNumber","PartLocation","ServiceLabel","actions","getChassisInfo","commit","get","then","Members","member","promises","all","response","catch","error","console","log","updateIdentifyLedValue","dispatch","led","updatedIdentifyLedValue","patch","global","t","Error"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/HardwareStatus/ChassisStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst ChassisStore = {\n  namespaced: true,\n  state: {\n    chassis: [],\n  },\n  getters: {\n    chassis: (state) => state.chassis,\n  },\n  mutations: {\n    setChassisInfo: (state, data) => {\n      state.chassis = data.map((chassis) => {\n        const {\n          Id,\n          Status = {},\n          PartNumber,\n          SerialNumber,\n          ChassisType,\n          Manufacturer,\n          PowerState,\n          LocationIndicatorActive,\n          AssetTag,\n          Model,\n          MaxPowerWatts,\n          MinPowerWatts,\n          Name,\n          Location,\n        } = chassis;\n\n        return {\n          id: Id,\n          health: Status.Health,\n          partNumber: PartNumber,\n          serialNumber: SerialNumber,\n          chassisType: ChassisType,\n          manufacturer: Manufacturer,\n          powerState: PowerState,\n          statusState: Status.State,\n          healthRollup: Status.HealthRollup,\n          assetTag: AssetTag,\n          model: Model,\n          maxPowerWatts: MaxPowerWatts,\n          minPowerWatts: MinPowerWatts,\n          name: Name,\n          identifyLed: LocationIndicatorActive,\n          uri: chassis['@odata.id'],\n          locationNumber: Location?.PartLocation?.ServiceLabel,\n        };\n      });\n    },\n  },\n  actions: {\n    async getChassisInfo({ commit }) {\n      return await api\n        .get('/redfish/v1/Chassis')\n        .then(({ data: { Members = [] } }) =>\n          Members.map((member) => api.get(member['@odata.id'])),\n        )\n        .then((promises) => api.all(promises))\n        .then((response) => {\n          const data = response.map(({ data }) => data);\n          commit('setChassisInfo', data);\n        })\n        .catch((error) => console.log(error));\n    },\n    async updateIdentifyLedValue({ dispatch }, led) {\n      const uri = led.uri;\n      const updatedIdentifyLedValue = {\n        LocationIndicatorActive: led.identifyLed,\n      };\n      return await api\n        .patch(uri, updatedIdentifyLedValue)\n        .then(() => {\n          dispatch('getChassisInfo');\n          if (led.identifyLed) {\n            return i18n.global.t(\n              'pageInventory.toast.successEnableIdentifyLed',\n            );\n          } else {\n            return i18n.global.t(\n              'pageInventory.toast.successDisableIdentifyLed',\n            );\n          }\n        })\n        .catch((error) => {\n          dispatch('getChassisInfo');\n          console.log('error', error);\n          if (led.identifyLed) {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'),\n            );\n          } else {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'),\n            );\n          }\n        });\n    },\n  },\n};\n\nexport default ChassisStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}