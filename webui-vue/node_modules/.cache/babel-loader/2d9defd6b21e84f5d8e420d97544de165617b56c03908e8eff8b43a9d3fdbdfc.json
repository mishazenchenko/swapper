{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst DateTimeStore = {\n  namespaced: true,\n  state: {\n    ntpServers: [],\n    isNtpProtocolEnabled: null\n  },\n  getters: {\n    ntpServers: state => state.ntpServers,\n    isNtpProtocolEnabled: state => state.isNtpProtocolEnabled\n  },\n  mutations: {\n    setNtpServers: (state, ntpServers) => state.ntpServers = ntpServers,\n    setIsNtpProtocolEnabled: (state, isNtpProtocolEnabled) => state.isNtpProtocolEnabled = isNtpProtocolEnabled\n  },\n  actions: {\n    async getNtpData({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getBmcPath')}/NetworkProtocol`).then(response => {\n        const ntpServers = response.data.NTP.NTPServers;\n        const isNtpProtocolEnabled = response.data.NTP.ProtocolEnabled;\n        commit('setNtpServers', ntpServers);\n        commit('setIsNtpProtocolEnabled', isNtpProtocolEnabled);\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    async updateDateTime({\n      state\n    }, dateTimeForm) {\n      const ntpData = {\n        NTP: {\n          ProtocolEnabled: dateTimeForm.ntpProtocolEnabled\n        }\n      };\n      if (dateTimeForm.ntpProtocolEnabled) {\n        ntpData.NTP.NTPServers = dateTimeForm.ntpServersArray;\n      }\n      return await api.patch(`${await this.dispatch('global/getBmcPath')}/NetworkProtocol`, ntpData).then(async () => {\n        if (!dateTimeForm.ntpProtocolEnabled) {\n          const dateTimeData = {\n            DateTime: dateTimeForm.updatedDateTime\n          };\n          /**\n           * https://github.com/openbmc/phosphor-time-manager/blob/master/README.md#special-note-on-changing-ntp-setting\n           * When time mode is initially set to Manual from NTP,\n           * NTP service is disabled and the NTP service is\n           * stopping but not stopped, setting time will return an error.\n           * There are no responses from backend to notify when NTP is stopped.\n           * To work around, a timeout is set to allow NTP to fully stop\n           * TODO: remove timeout if backend solves\n           * https://github.com/openbmc/openbmc/issues/3459\n           */\n          const timeoutVal = state.isNtpProtocolEnabled ? 20000 : 0;\n          return await new Promise((resolve, reject) => {\n            setTimeout(async () => {\n              return api.patch(`${await this.dispatch('global/getBmcPath')}`, dateTimeData).then(() => resolve()).catch(() => reject());\n            }, timeoutVal);\n          });\n        }\n      }).then(() => {\n        return i18n.global.t('pageDateTime.toast.successSaveDateTime');\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageDateTime.toast.errorSaveDateTime'));\n      });\n    }\n  }\n};\nexport default DateTimeStore;","map":{"version":3,"names":["api","i18n","DateTimeStore","namespaced","state","ntpServers","isNtpProtocolEnabled","getters","mutations","setNtpServers","setIsNtpProtocolEnabled","actions","getNtpData","commit","get","dispatch","then","response","data","NTP","NTPServers","ProtocolEnabled","catch","error","console","log","updateDateTime","dateTimeForm","ntpData","ntpProtocolEnabled","ntpServersArray","patch","dateTimeData","DateTime","updatedDateTime","timeoutVal","Promise","resolve","reject","setTimeout","global","t","Error"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/Settings/DateTimeStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst DateTimeStore = {\n  namespaced: true,\n  state: {\n    ntpServers: [],\n    isNtpProtocolEnabled: null,\n  },\n  getters: {\n    ntpServers: (state) => state.ntpServers,\n    isNtpProtocolEnabled: (state) => state.isNtpProtocolEnabled,\n  },\n  mutations: {\n    setNtpServers: (state, ntpServers) => (state.ntpServers = ntpServers),\n    setIsNtpProtocolEnabled: (state, isNtpProtocolEnabled) =>\n      (state.isNtpProtocolEnabled = isNtpProtocolEnabled),\n  },\n  actions: {\n    async getNtpData({ commit }) {\n      return await api\n        .get(`${await this.dispatch('global/getBmcPath')}/NetworkProtocol`)\n        .then((response) => {\n          const ntpServers = response.data.NTP.NTPServers;\n          const isNtpProtocolEnabled = response.data.NTP.ProtocolEnabled;\n          commit('setNtpServers', ntpServers);\n          commit('setIsNtpProtocolEnabled', isNtpProtocolEnabled);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n    async updateDateTime({ state }, dateTimeForm) {\n      const ntpData = {\n        NTP: {\n          ProtocolEnabled: dateTimeForm.ntpProtocolEnabled,\n        },\n      };\n      if (dateTimeForm.ntpProtocolEnabled) {\n        ntpData.NTP.NTPServers = dateTimeForm.ntpServersArray;\n      }\n      return await api\n        .patch(\n          `${await this.dispatch('global/getBmcPath')}/NetworkProtocol`,\n          ntpData,\n        )\n        .then(async () => {\n          if (!dateTimeForm.ntpProtocolEnabled) {\n            const dateTimeData = {\n              DateTime: dateTimeForm.updatedDateTime,\n            };\n            /**\n             * https://github.com/openbmc/phosphor-time-manager/blob/master/README.md#special-note-on-changing-ntp-setting\n             * When time mode is initially set to Manual from NTP,\n             * NTP service is disabled and the NTP service is\n             * stopping but not stopped, setting time will return an error.\n             * There are no responses from backend to notify when NTP is stopped.\n             * To work around, a timeout is set to allow NTP to fully stop\n             * TODO: remove timeout if backend solves\n             * https://github.com/openbmc/openbmc/issues/3459\n             */\n            const timeoutVal = state.isNtpProtocolEnabled ? 20000 : 0;\n            return await new Promise((resolve, reject) => {\n              setTimeout(async () => {\n                return api\n                  .patch(\n                    `${await this.dispatch('global/getBmcPath')}`,\n                    dateTimeData,\n                  )\n                  .then(() => resolve())\n                  .catch(() => reject());\n              }, timeoutVal);\n            });\n          }\n        })\n        .then(() => {\n          return i18n.global.t('pageDateTime.toast.successSaveDateTime');\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageDateTime.toast.errorSaveDateTime'),\n          );\n        });\n    },\n  },\n};\n\nexport default DateTimeStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}