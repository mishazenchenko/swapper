{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api, { getResponseCount } from '@/store/api';\nimport i18n from '@/i18n';\nconst DumpsStore = {\n  namespaced: true,\n  state: {\n    allDumps: []\n  },\n  getters: {\n    allDumps: state => state.allDumps\n  },\n  mutations: {\n    setAllDumps: (state, dumps) => {\n      state.allDumps = dumps.map(dump => ({\n        data: dump.AdditionalDataURI,\n        dateTime: new Date(dump.Created),\n        dumpType: dump.Name,\n        id: dump.Id,\n        location: dump['@odata.id'],\n        size: dump.AdditionalDataSizeBytes\n      }));\n    }\n  },\n  actions: {\n    async getBmcDumpEntries() {\n      return api.get(`${await this.dispatch('global/getBmcPath')}`).then(response => api.get(response.data.LogServices['@odata.id'])).then(response => api.get(`${response.data['@odata.id']}/Dump`)).then(response => api.get(response.data.Entries['@odata.id'])).catch(error => console.log(error));\n    },\n    async getSystemDumpEntries() {\n      return api.get(`${await this.dispatch('global/getSystemPath')}`).then(response => api.get(response.data.LogServices['@odata.id'])).then(response => api.get(`${response.data['@odata.id']}/Dump`)).then(response => api.get(response.data.Entries['@odata.id'])).catch(error => console.log(error));\n    },\n    async getAllDumps({\n      commit,\n      dispatch\n    }) {\n      return await api.all([dispatch('getBmcDumpEntries'), dispatch('getSystemDumpEntries')]).then(response => {\n        const bmcDumpEntries = response[0].data?.Members || [];\n        const systemDumpEntries = response[1].data?.Members || [];\n        const allDumps = [...bmcDumpEntries, ...systemDumpEntries];\n        commit('setAllDumps', allDumps);\n      }).catch(error => console.log(error));\n    },\n    async createBmcDump() {\n      return await api.post(`${await this.dispatch('global/getBmcPath')}/LogServices/Dump/Actions/LogService.CollectDiagnosticData`, {\n        DiagnosticDataType: 'Manager',\n        OEMDiagnosticDataType: ''\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageDumps.toast.errorStartBmcDump'));\n      });\n    },\n    async createSystemDump() {\n      return await api.post(`${await this.dispatch('global/getSystemPath')}/LogServices/Dump/Actions/LogService.CollectDiagnosticData`, {\n        DiagnosticDataType: 'OEM',\n        OEMDiagnosticDataType: 'System'\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageDumps.toast.errorStartSystemDump'));\n      });\n    },\n    async deleteDumps({\n      dispatch\n    }, dumps) {\n      const promises = dumps.map(({\n        location\n      }) => api.delete(location).catch(error => {\n        console.log(error);\n        return error;\n      }));\n      return await api.all(promises).then(response => {\n        dispatch('getAllDumps');\n        return response;\n      }).then(api.spread((...responses) => {\n        const {\n          successCount,\n          errorCount\n        } = getResponseCount(responses);\n        const toastMessages = [];\n        if (successCount) {\n          const message = i18n.global.t('pageDumps.toast.successDeleteDump', successCount);\n          toastMessages.push({\n            type: 'success',\n            message\n          });\n        }\n        if (errorCount) {\n          const message = i18n.global.t('pageDumps.toast.errorDeleteDump', errorCount);\n          toastMessages.push({\n            type: 'error',\n            message\n          });\n        }\n        return toastMessages;\n      }));\n    },\n    async deleteAllDumps({\n      commit,\n      state\n    }) {\n      const totalDumpCount = state.allDumps.length;\n      return await api.post(`${await this.dispatch('global/getBmcPath')}/LogServices/Dump/Actions/LogService.ClearLog`).then(() => {\n        commit('setAllDumps', []);\n        return i18n.global.t('pageDumps.toast.successDeleteDump', totalDumpCount);\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageDumps.toast.errorDeleteDump', totalDumpCount));\n      });\n    }\n  }\n};\nexport default DumpsStore;","map":{"version":3,"names":["api","getResponseCount","i18n","DumpsStore","namespaced","state","allDumps","getters","mutations","setAllDumps","dumps","map","dump","data","AdditionalDataURI","dateTime","Date","Created","dumpType","Name","id","Id","location","size","AdditionalDataSizeBytes","actions","getBmcDumpEntries","get","dispatch","then","response","LogServices","Entries","catch","error","console","log","getSystemDumpEntries","getAllDumps","commit","all","bmcDumpEntries","Members","systemDumpEntries","createBmcDump","post","DiagnosticDataType","OEMDiagnosticDataType","Error","global","t","createSystemDump","deleteDumps","promises","delete","spread","responses","successCount","errorCount","toastMessages","message","push","type","deleteAllDumps","totalDumpCount","length"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/Logs/DumpsStore.js"],"sourcesContent":["import api, { getResponseCount } from '@/store/api';\nimport i18n from '@/i18n';\n\nconst DumpsStore = {\n  namespaced: true,\n  state: {\n    allDumps: [],\n  },\n  getters: {\n    allDumps: (state) => state.allDumps,\n  },\n  mutations: {\n    setAllDumps: (state, dumps) => {\n      state.allDumps = dumps.map((dump) => ({\n        data: dump.AdditionalDataURI,\n        dateTime: new Date(dump.Created),\n        dumpType: dump.Name,\n        id: dump.Id,\n        location: dump['@odata.id'],\n        size: dump.AdditionalDataSizeBytes,\n      }));\n    },\n  },\n  actions: {\n    async getBmcDumpEntries() {\n      return api\n        .get(`${await this.dispatch('global/getBmcPath')}`)\n        .then((response) => api.get(response.data.LogServices['@odata.id']))\n        .then((response) => api.get(`${response.data['@odata.id']}/Dump`))\n        .then((response) => api.get(response.data.Entries['@odata.id']))\n        .catch((error) => console.log(error));\n    },\n    async getSystemDumpEntries() {\n      return api\n        .get(`${await this.dispatch('global/getSystemPath')}`)\n        .then((response) => api.get(response.data.LogServices['@odata.id']))\n        .then((response) => api.get(`${response.data['@odata.id']}/Dump`))\n        .then((response) => api.get(response.data.Entries['@odata.id']))\n        .catch((error) => console.log(error));\n    },\n    async getAllDumps({ commit, dispatch }) {\n      return await api\n        .all([dispatch('getBmcDumpEntries'), dispatch('getSystemDumpEntries')])\n        .then((response) => {\n          const bmcDumpEntries = response[0].data?.Members || [];\n          const systemDumpEntries = response[1].data?.Members || [];\n          const allDumps = [...bmcDumpEntries, ...systemDumpEntries];\n          commit('setAllDumps', allDumps);\n        })\n        .catch((error) => console.log(error));\n    },\n    async createBmcDump() {\n      return await api\n        .post(\n          `${await this.dispatch('global/getBmcPath')}/LogServices/Dump/Actions/LogService.CollectDiagnosticData`,\n          {\n            DiagnosticDataType: 'Manager',\n            OEMDiagnosticDataType: '',\n          },\n        )\n        .catch((error) => {\n          console.log(error);\n          throw new Error(i18n.global.t('pageDumps.toast.errorStartBmcDump'));\n        });\n    },\n    async createSystemDump() {\n      return await api\n        .post(\n          `${await this.dispatch('global/getSystemPath')}/LogServices/Dump/Actions/LogService.CollectDiagnosticData`,\n          {\n            DiagnosticDataType: 'OEM',\n            OEMDiagnosticDataType: 'System',\n          },\n        )\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageDumps.toast.errorStartSystemDump'),\n          );\n        });\n    },\n    async deleteDumps({ dispatch }, dumps) {\n      const promises = dumps.map(({ location }) =>\n        api.delete(location).catch((error) => {\n          console.log(error);\n          return error;\n        }),\n      );\n      return await api\n        .all(promises)\n        .then((response) => {\n          dispatch('getAllDumps');\n          return response;\n        })\n        .then(\n          api.spread((...responses) => {\n            const { successCount, errorCount } = getResponseCount(responses);\n            const toastMessages = [];\n\n            if (successCount) {\n              const message = i18n.global.t(\n                'pageDumps.toast.successDeleteDump',\n                successCount,\n              );\n              toastMessages.push({ type: 'success', message });\n            }\n\n            if (errorCount) {\n              const message = i18n.global.t(\n                'pageDumps.toast.errorDeleteDump',\n                errorCount,\n              );\n              toastMessages.push({ type: 'error', message });\n            }\n\n            return toastMessages;\n          }),\n        );\n    },\n    async deleteAllDumps({ commit, state }) {\n      const totalDumpCount = state.allDumps.length;\n      return await api\n        .post(\n          `${await this.dispatch('global/getBmcPath')}/LogServices/Dump/Actions/LogService.ClearLog`,\n        )\n        .then(() => {\n          commit('setAllDumps', []);\n          return i18n.global.t(\n            'pageDumps.toast.successDeleteDump',\n            totalDumpCount,\n          );\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageDumps.toast.errorDeleteDump', totalDumpCount),\n          );\n        });\n    },\n  },\n};\n\nexport default DumpsStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}