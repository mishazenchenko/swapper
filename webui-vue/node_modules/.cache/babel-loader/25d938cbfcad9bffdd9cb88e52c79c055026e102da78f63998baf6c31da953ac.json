{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst getCertificateProp = (certificateTypes, type, prop) => {\n  const certificate = certificateTypes.find(certificate => certificate.type === type);\n  return certificate ? certificate[prop] : null;\n};\nconst CertificatesStore = {\n  namespaced: true,\n  state: {\n    allCertificates: [],\n    availableUploadTypes: [],\n    certificateTypes: []\n  },\n  getters: {\n    allCertificates: state => state.allCertificates,\n    availableUploadTypes: state => state.availableUploadTypes,\n    certificateTypes: state => state.certificateTypes\n  },\n  mutations: {\n    setCertificates(state, certificates) {\n      state.allCertificates = certificates;\n    },\n    setAvailableUploadTypes(state, availableUploadTypes) {\n      state.availableUploadTypes = availableUploadTypes;\n    },\n    setCertificateTypes(state, certificateTypes) {\n      state.certificateTypes = certificateTypes;\n    }\n  },\n  actions: {\n    async getCertificateTypes({\n      commit\n    }) {\n      const certificateTypes = [{\n        type: 'HTTPS Certificate',\n        location: `${await this.dispatch('global/getBmcPath')}/NetworkProtocol/HTTPS/Certificates/`,\n        label: i18n.global.t('pageCertificates.httpsCertificate')\n      }, {\n        type: 'LDAP Certificate',\n        location: '/redfish/v1/AccountService/LDAP/Certificates/',\n        label: i18n.global.t('pageCertificates.ldapCertificate')\n      }, {\n        type: 'TrustStore Certificate',\n        location: `${await this.dispatch('global/getBmcPath')}/Truststore/Certificates/`,\n        // Web UI will show 'CA Certificate' instead of\n        // 'TrustStore Certificate' after user testing revealed\n        // the term 'TrustStore Certificate' wasn't recognized/was unfamilar\n        label: i18n.global.t('pageCertificates.caCertificate')\n      }];\n      await commit('setCertificateTypes', certificateTypes);\n    },\n    async getCertificates({\n      dispatch,\n      getters,\n      commit\n    }) {\n      await dispatch('getCertificateTypes');\n      return await api.get('/redfish/v1/CertificateService/CertificateLocations').then(({\n        data: {\n          Links: {\n            Certificates\n          }\n        }\n      }) => Certificates.map(certificate => certificate['@odata.id'])).then(certificateLocations => {\n        const promises = certificateLocations.map(location => api.get(location));\n        api.all(promises).then(api.spread((...responses) => {\n          const certificates = responses.map(({\n            data\n          }) => {\n            const {\n              Name,\n              ValidNotAfter,\n              ValidNotBefore,\n              Issuer = {},\n              Subject = {}\n            } = data;\n            return {\n              type: Name,\n              location: data['@odata.id'],\n              certificate: getCertificateProp(getters['certificateTypes'], Name, 'label'),\n              issuedBy: Issuer.CommonName,\n              issuedTo: Subject.CommonName,\n              validFrom: new Date(ValidNotBefore),\n              validUntil: new Date(ValidNotAfter)\n            };\n          });\n          const availableUploadTypes = getters['certificateTypes'].filter(({\n            type\n          }) => !certificates.map(certificate => certificate.type).includes(type));\n          commit('setCertificates', certificates);\n          commit('setAvailableUploadTypes', availableUploadTypes);\n        }));\n      });\n    },\n    async addNewCertificate({\n      dispatch,\n      getters\n    }, {\n      file,\n      type\n    }) {\n      return await api.post(getCertificateProp(getters['certificateTypes'], type, 'location'), file, {\n        headers: {\n          'Content-Type': 'application/x-pem-file'\n        }\n      }).then(() => dispatch('getCertificates')).then(() => i18n.global.t('pageCertificates.toast.successAddCertificate', {\n        certificate: getCertificateProp(getters['certificateTypes'], type, 'label')\n      })).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageCertificates.toast.errorAddCertificate'));\n      });\n    },\n    async replaceCertificate({\n      dispatch,\n      getters\n    }, {\n      certificateString,\n      location,\n      type\n    }) {\n      const data = {};\n      data.CertificateString = certificateString;\n      data.CertificateType = 'PEM';\n      data.CertificateUri = {\n        '@odata.id': location\n      };\n      return await api.post('/redfish/v1/CertificateService/Actions/CertificateService.ReplaceCertificate', data).then(() => dispatch('getCertificates')).then(() => i18n.global.t('pageCertificates.toast.successReplaceCertificate', {\n        certificate: getCertificateProp(getters['certificateTypes'], type, 'label')\n      })).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageCertificates.toast.errorReplaceCertificate'));\n      });\n    },\n    async deleteCertificate({\n      dispatch,\n      getters\n    }, {\n      type,\n      location\n    }) {\n      return await api.delete(location).then(() => dispatch('getCertificates')).then(() => i18n.global.t('pageCertificates.toast.successDeleteCertificate', {\n        certificate: getCertificateProp(getters['certificateTypes'], type, 'label')\n      })).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageCertificates.toast.errorDeleteCertificate'));\n      });\n    },\n    async generateCsr({\n      getters\n    }, userData) {\n      const {\n        certificateType,\n        country,\n        state,\n        city,\n        companyName,\n        companyUnit,\n        commonName,\n        keyPairAlgorithm,\n        keyBitLength,\n        keyCurveId,\n        contactPerson,\n        emailAddress,\n        alternateName\n      } = userData;\n      const data = {};\n      data.CertificateCollection = {\n        '@odata.id': getCertificateProp(getters['certificateTypes'], certificateType, 'location')\n      };\n      data.Country = country;\n      data.State = state;\n      data.City = city;\n      data.Organization = companyName;\n      data.OrganizationalUnit = companyUnit;\n      data.CommonName = commonName;\n      data.KeyPairAlgorithm = keyPairAlgorithm;\n      data.AlternativeNames = alternateName;\n      if (keyCurveId) data.KeyCurveId = keyCurveId;\n      if (keyBitLength) data.KeyBitLength = keyBitLength;\n      if (contactPerson) data.ContactPerson = contactPerson;\n      if (emailAddress) data.Email = emailAddress;\n      return await api.post('/redfish/v1/CertificateService/Actions/CertificateService.GenerateCSR', data)\n      //TODO: Success response also throws error so\n      // can't accurately show legitimate error in UI\n      .catch(error => console.log(error));\n    }\n  }\n};\nexport default CertificatesStore;","map":{"version":3,"names":["api","i18n","getCertificateProp","certificateTypes","type","prop","certificate","find","CertificatesStore","namespaced","state","allCertificates","availableUploadTypes","getters","mutations","setCertificates","certificates","setAvailableUploadTypes","setCertificateTypes","actions","getCertificateTypes","commit","location","dispatch","label","global","t","getCertificates","get","then","data","Links","Certificates","map","certificateLocations","promises","all","spread","responses","Name","ValidNotAfter","ValidNotBefore","Issuer","Subject","issuedBy","CommonName","issuedTo","validFrom","Date","validUntil","filter","includes","addNewCertificate","file","post","headers","catch","error","console","log","Error","replaceCertificate","certificateString","CertificateString","CertificateType","CertificateUri","deleteCertificate","delete","generateCsr","userData","certificateType","country","city","companyName","companyUnit","commonName","keyPairAlgorithm","keyBitLength","keyCurveId","contactPerson","emailAddress","alternateName","CertificateCollection","Country","State","City","Organization","OrganizationalUnit","KeyPairAlgorithm","AlternativeNames","KeyCurveId","KeyBitLength","ContactPerson","Email"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/SecurityAndAccess/CertificatesStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst getCertificateProp = (certificateTypes, type, prop) => {\n  const certificate = certificateTypes.find(\n    (certificate) => certificate.type === type,\n  );\n  return certificate ? certificate[prop] : null;\n};\n\nconst CertificatesStore = {\n  namespaced: true,\n  state: {\n    allCertificates: [],\n    availableUploadTypes: [],\n    certificateTypes: [],\n  },\n  getters: {\n    allCertificates: (state) => state.allCertificates,\n    availableUploadTypes: (state) => state.availableUploadTypes,\n    certificateTypes: (state) => state.certificateTypes,\n  },\n  mutations: {\n    setCertificates(state, certificates) {\n      state.allCertificates = certificates;\n    },\n    setAvailableUploadTypes(state, availableUploadTypes) {\n      state.availableUploadTypes = availableUploadTypes;\n    },\n    setCertificateTypes(state, certificateTypes) {\n      state.certificateTypes = certificateTypes;\n    },\n  },\n  actions: {\n    async getCertificateTypes({ commit }) {\n      const certificateTypes = [\n        {\n          type: 'HTTPS Certificate',\n          location: `${await this.dispatch(\n            'global/getBmcPath',\n          )}/NetworkProtocol/HTTPS/Certificates/`,\n          label: i18n.global.t('pageCertificates.httpsCertificate'),\n        },\n        {\n          type: 'LDAP Certificate',\n          location: '/redfish/v1/AccountService/LDAP/Certificates/',\n          label: i18n.global.t('pageCertificates.ldapCertificate'),\n        },\n        {\n          type: 'TrustStore Certificate',\n          location: `${await this.dispatch(\n            'global/getBmcPath',\n          )}/Truststore/Certificates/`,\n          // Web UI will show 'CA Certificate' instead of\n          // 'TrustStore Certificate' after user testing revealed\n          // the term 'TrustStore Certificate' wasn't recognized/was unfamilar\n          label: i18n.global.t('pageCertificates.caCertificate'),\n        },\n      ];\n      await commit('setCertificateTypes', certificateTypes);\n    },\n    async getCertificates({ dispatch, getters, commit }) {\n      await dispatch('getCertificateTypes');\n      return await api\n        .get('/redfish/v1/CertificateService/CertificateLocations')\n        .then(\n          ({\n            data: {\n              Links: { Certificates },\n            },\n          }) => Certificates.map((certificate) => certificate['@odata.id']),\n        )\n        .then((certificateLocations) => {\n          const promises = certificateLocations.map((location) =>\n            api.get(location),\n          );\n          api.all(promises).then(\n            api.spread((...responses) => {\n              const certificates = responses.map(({ data }) => {\n                const {\n                  Name,\n                  ValidNotAfter,\n                  ValidNotBefore,\n                  Issuer = {},\n                  Subject = {},\n                } = data;\n                return {\n                  type: Name,\n                  location: data['@odata.id'],\n                  certificate: getCertificateProp(\n                    getters['certificateTypes'],\n                    Name,\n                    'label',\n                  ),\n                  issuedBy: Issuer.CommonName,\n                  issuedTo: Subject.CommonName,\n                  validFrom: new Date(ValidNotBefore),\n                  validUntil: new Date(ValidNotAfter),\n                };\n              });\n              const availableUploadTypes = getters['certificateTypes'].filter(\n                ({ type }) =>\n                  !certificates\n                    .map((certificate) => certificate.type)\n                    .includes(type),\n              );\n\n              commit('setCertificates', certificates);\n              commit('setAvailableUploadTypes', availableUploadTypes);\n            }),\n          );\n        });\n    },\n    async addNewCertificate({ dispatch, getters }, { file, type }) {\n      return await api\n        .post(\n          getCertificateProp(getters['certificateTypes'], type, 'location'),\n          file,\n          {\n            headers: { 'Content-Type': 'application/x-pem-file' },\n          },\n        )\n        .then(() => dispatch('getCertificates'))\n        .then(() =>\n          i18n.global.t('pageCertificates.toast.successAddCertificate', {\n            certificate: getCertificateProp(\n              getters['certificateTypes'],\n              type,\n              'label',\n            ),\n          }),\n        )\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageCertificates.toast.errorAddCertificate'),\n          );\n        });\n    },\n    async replaceCertificate(\n      { dispatch, getters },\n      { certificateString, location, type },\n    ) {\n      const data = {};\n      data.CertificateString = certificateString;\n      data.CertificateType = 'PEM';\n      data.CertificateUri = { '@odata.id': location };\n\n      return await api\n        .post(\n          '/redfish/v1/CertificateService/Actions/CertificateService.ReplaceCertificate',\n          data,\n        )\n        .then(() => dispatch('getCertificates'))\n        .then(() =>\n          i18n.global.t('pageCertificates.toast.successReplaceCertificate', {\n            certificate: getCertificateProp(\n              getters['certificateTypes'],\n              type,\n              'label',\n            ),\n          }),\n        )\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageCertificates.toast.errorReplaceCertificate'),\n          );\n        });\n    },\n    async deleteCertificate({ dispatch, getters }, { type, location }) {\n      return await api\n        .delete(location)\n        .then(() => dispatch('getCertificates'))\n        .then(() =>\n          i18n.global.t('pageCertificates.toast.successDeleteCertificate', {\n            certificate: getCertificateProp(\n              getters['certificateTypes'],\n              type,\n              'label',\n            ),\n          }),\n        )\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageCertificates.toast.errorDeleteCertificate'),\n          );\n        });\n    },\n    async generateCsr({ getters }, userData) {\n      const {\n        certificateType,\n        country,\n        state,\n        city,\n        companyName,\n        companyUnit,\n        commonName,\n        keyPairAlgorithm,\n        keyBitLength,\n        keyCurveId,\n        contactPerson,\n        emailAddress,\n        alternateName,\n      } = userData;\n      const data = {};\n\n      data.CertificateCollection = {\n        '@odata.id': getCertificateProp(\n          getters['certificateTypes'],\n          certificateType,\n          'location',\n        ),\n      };\n      data.Country = country;\n      data.State = state;\n      data.City = city;\n      data.Organization = companyName;\n      data.OrganizationalUnit = companyUnit;\n      data.CommonName = commonName;\n      data.KeyPairAlgorithm = keyPairAlgorithm;\n      data.AlternativeNames = alternateName;\n\n      if (keyCurveId) data.KeyCurveId = keyCurveId;\n      if (keyBitLength) data.KeyBitLength = keyBitLength;\n      if (contactPerson) data.ContactPerson = contactPerson;\n      if (emailAddress) data.Email = emailAddress;\n\n      return await api\n        .post(\n          '/redfish/v1/CertificateService/Actions/CertificateService.GenerateCSR',\n          data,\n        )\n        //TODO: Success response also throws error so\n        // can't accurately show legitimate error in UI\n        .catch((error) => console.log(error));\n    },\n  },\n};\n\nexport default CertificatesStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}