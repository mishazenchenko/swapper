{"ast":null,"code":"import api from '@/store/api';\nconst PowerSupplyStore = {\n  namespaced: true,\n  state: {\n    powerSupplies: []\n  },\n  getters: {\n    powerSupplies: state => state.powerSupplies\n  },\n  mutations: {\n    setPowerSupply: (state, data) => {\n      state.powerSupplies = data.map(powerSupply => {\n        const {\n          EfficiencyRatings = [],\n          FirmwareVersion,\n          LocationIndicatorActive,\n          Id,\n          Manufacturer,\n          Model,\n          Name,\n          PartNumber,\n          PowerInputWatts,\n          SerialNumber,\n          SparePartNumber,\n          Location,\n          Status = {}\n        } = powerSupply;\n        return {\n          id: Id,\n          health: Status.Health,\n          partNumber: PartNumber,\n          serialNumber: SerialNumber,\n          efficiencyPercent: EfficiencyRatings[0].EfficiencyPercent,\n          firmwareVersion: FirmwareVersion,\n          identifyLed: LocationIndicatorActive,\n          manufacturer: Manufacturer,\n          model: Model,\n          powerInputWatts: PowerInputWatts,\n          name: Name,\n          sparePartNumber: SparePartNumber,\n          locationNumber: Location?.PartLocation?.ServiceLabel,\n          statusState: Status.State\n        };\n      });\n    }\n  },\n  actions: {\n    async getChassisCollection() {\n      return await api.get('/redfish/v1/Chassis').then(({\n        data: {\n          Members\n        }\n      }) => Members.map(member => member['@odata.id'])).catch(error => console.log(error));\n    },\n    async getAllPowerSupplies({\n      dispatch,\n      commit\n    }) {\n      const collection = await dispatch('getChassisCollection');\n      if (!collection) return;\n      return await api.all(collection.map(chassis => dispatch('getChassisPower', chassis))).then(supplies => {\n        let suppliesList = [];\n        supplies.forEach(supply => suppliesList = [...suppliesList, ...supply]);\n        commit('setPowerSupply', suppliesList);\n      }).catch(error => console.log(error));\n    },\n    async getChassisPower(_, id) {\n      return await api.get(`${id}/PowerSubsystem`).then(response => {\n        return api.get(`${response.data.PowerSupplies['@odata.id']}`);\n      }).then(({\n        data: {\n          Members\n        }\n      }) => {\n        const promises = Members.map(member => api.get(member['@odata.id']));\n        return api.all(promises);\n      }).then(response => {\n        const data = response.map(({\n          data\n        }) => data);\n        return data;\n      }).catch(error => console.log(error));\n    }\n  }\n};\nexport default PowerSupplyStore;","map":{"version":3,"names":["api","PowerSupplyStore","namespaced","state","powerSupplies","getters","mutations","setPowerSupply","data","map","powerSupply","EfficiencyRatings","FirmwareVersion","LocationIndicatorActive","Id","Manufacturer","Model","Name","PartNumber","PowerInputWatts","SerialNumber","SparePartNumber","Location","Status","id","health","Health","partNumber","serialNumber","efficiencyPercent","EfficiencyPercent","firmwareVersion","identifyLed","manufacturer","model","powerInputWatts","name","sparePartNumber","locationNumber","PartLocation","ServiceLabel","statusState","State","actions","getChassisCollection","get","then","Members","member","catch","error","console","log","getAllPowerSupplies","dispatch","commit","collection","all","chassis","supplies","suppliesList","forEach","supply","getChassisPower","_","response","PowerSupplies","promises"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/HardwareStatus/PowerSupplyStore.js"],"sourcesContent":["import api from '@/store/api';\n\nconst PowerSupplyStore = {\n  namespaced: true,\n  state: {\n    powerSupplies: [],\n  },\n  getters: {\n    powerSupplies: (state) => state.powerSupplies,\n  },\n  mutations: {\n    setPowerSupply: (state, data) => {\n      state.powerSupplies = data.map((powerSupply) => {\n        const {\n          EfficiencyRatings = [],\n          FirmwareVersion,\n          LocationIndicatorActive,\n          Id,\n          Manufacturer,\n          Model,\n          Name,\n          PartNumber,\n          PowerInputWatts,\n          SerialNumber,\n          SparePartNumber,\n          Location,\n          Status = {},\n        } = powerSupply;\n        return {\n          id: Id,\n          health: Status.Health,\n          partNumber: PartNumber,\n          serialNumber: SerialNumber,\n          efficiencyPercent: EfficiencyRatings[0].EfficiencyPercent,\n          firmwareVersion: FirmwareVersion,\n          identifyLed: LocationIndicatorActive,\n          manufacturer: Manufacturer,\n          model: Model,\n          powerInputWatts: PowerInputWatts,\n          name: Name,\n          sparePartNumber: SparePartNumber,\n          locationNumber: Location?.PartLocation?.ServiceLabel,\n          statusState: Status.State,\n        };\n      });\n    },\n  },\n  actions: {\n    async getChassisCollection() {\n      return await api\n        .get('/redfish/v1/Chassis')\n        .then(({ data: { Members } }) =>\n          Members.map((member) => member['@odata.id']),\n        )\n        .catch((error) => console.log(error));\n    },\n    async getAllPowerSupplies({ dispatch, commit }) {\n      const collection = await dispatch('getChassisCollection');\n      if (!collection) return;\n      return await api\n        .all(collection.map((chassis) => dispatch('getChassisPower', chassis)))\n        .then((supplies) => {\n          let suppliesList = [];\n          supplies.forEach(\n            (supply) => (suppliesList = [...suppliesList, ...supply]),\n          );\n          commit('setPowerSupply', suppliesList);\n        })\n        .catch((error) => console.log(error));\n    },\n    async getChassisPower(_, id) {\n      return await api\n        .get(`${id}/PowerSubsystem`)\n        .then((response) => {\n          return api.get(`${response.data.PowerSupplies['@odata.id']}`);\n        })\n        .then(({ data: { Members } }) => {\n          const promises = Members.map((member) =>\n            api.get(member['@odata.id']),\n          );\n          return api.all(promises);\n        })\n        .then((response) => {\n          const data = response.map(({ data }) => data);\n          return data;\n        })\n        .catch((error) => console.log(error));\n    },\n  },\n};\n\nexport default PowerSupplyStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}