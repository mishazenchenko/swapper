{"ast":null,"code":"import BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconEdit from '@carbon/icons-vue/es/edit/20';\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport PageSection from '@/components/Global/PageSection';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport { mapState } from 'vuex';\nimport i18n from '@/i18n';\nimport { useI18n } from 'vue-i18n';\nexport default {\n  name: 'Ipv6Table',\n  components: {\n    IconAdd,\n    IconEdit,\n    IconTrashcan,\n    PageSection,\n    TableRowAction\n  },\n  mixins: [BVToastMixin, LoadingBarMixin, DataFormatterMixin],\n  props: {\n    tabIndex: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        ipv6TableItems: []\n      },\n      actions: [{\n        value: 'edit',\n        title: i18n.global.t('global.action.edit')\n      }, {\n        value: 'delete',\n        title: i18n.global.t('global.action.delete')\n      }],\n      ipv6TableFields: [{\n        key: 'Address',\n        label: i18n.global.t('pageNetwork.table.ipAddress')\n      }, {\n        key: 'PrefixLength',\n        label: i18n.global.t('pageNetwork.table.prefixLength')\n      }, {\n        key: 'AddressOrigin',\n        label: i18n.global.t('pageNetwork.table.addressOrigin')\n      }, {\n        key: 'actions',\n        label: '',\n        tdClass: 'text-right'\n      }],\n      defaultGateway: '',\n      defaultGatewayEditable: process.env.VUE_APP_ENV_NAME !== 'nvidia-bluefield'\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData']),\n    selectedInterface() {\n      return this.$store.getters['network/selectedInterfaceIndex'];\n    },\n    dhcp6EnabledState: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][this.selectedInterface].dhcp6Enabled === 'Enabled';\n      },\n      set(newValue) {\n        return newValue;\n      }\n    },\n    filteredActions() {\n      return item => {\n        if (item.AddressOrigin === 'DHCPv6' || item.AddressOrigin === 'SLAAC') {\n          return item.actions.filter(action => action.value !== 'delete');\n        } else {\n          return item.actions;\n        }\n      };\n    }\n  },\n  watch: {\n    // Watch for change in tab index\n    tabIndex() {\n      this.getIpv6TableItems();\n      this.getDefaultGateway();\n    },\n    ethernetData() {\n      this.getIpv6TableItems();\n      this.getDefaultGateway();\n    }\n  },\n  created() {\n    this.getIpv6TableItems();\n    this.getDefaultGateway();\n    this.$store.dispatch('network/getEthernetData').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('network-table-ipv6-complete');\n    });\n  },\n  methods: {\n    getDefaultGateway() {\n      this.defaultGateway = this.ethernetData[this.tabIndex].IPv6DefaultGateway;\n    },\n    getIpv6TableItems() {\n      const index = this.tabIndex;\n      const addresses = this.ethernetData[index].IPv6Addresses.filter(ipv6 => ipv6.AddressOrigin === 'LinkLocal' || ipv6.AddressOrigin === 'Static' || ipv6.AddressOrigin === 'SLAAC' || ipv6.AddressOrigin === 'DHCPv6') || [];\n      this.form.ipv6TableItems = addresses.map(ipv6 => {\n        return {\n          Address: ipv6.Address,\n          PrefixLength: ipv6.PrefixLength,\n          AddressOrigin: ipv6.AddressOrigin,\n          actions: [{\n            value: 'delete',\n            title: i18n.global.t('pageNetwork.table.deleteIpv6')\n          }]\n        };\n      });\n    },\n    onIpv6TableAction(action, $event, index) {\n      if ($event === 'delete') {\n        this.deleteIpv6TableRow(index);\n      }\n    },\n    deleteIpv6TableRow(index) {\n      const AddressOrigin = this.form.ipv6TableItems[index].AddressOrigin;\n      this.form.ipv6TableItems.splice(index, 1);\n      const newIpv6Array = this.form.ipv6TableItems.map(ipv6 => {\n        const {\n          Address,\n          PrefixLength\n        } = ipv6;\n        return {\n          Address,\n          PrefixLength\n        };\n      });\n      if (newIpv6Array.length == 0 && (AddressOrigin === 'Static' || AddressOrigin === 'LinkLocal')) {\n        this.$store.dispatch('network/saveDhcp6EnabledState', true).then(message => this.successToast(message)).catch(({\n          message\n        }) => this.errorToast(message));\n      }\n      this.$store.dispatch('network/editIpv6Address', newIpv6Array).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    initAddIpv6Address() {\n      this.$bvModal.show('modal-add-ipv6');\n    },\n    changeDhcp6EnabledState(state) {\n      this.$bvModal.msgBoxConfirm(state ? i18n.global.t('pageNetwork.modal.confirmEnableDhcp') : i18n.global.t('pageNetwork.modal.confirmDisableDhcp'), {\n        title: i18n.global.t('pageNetwork.modal.dhcpConfirmTitle', {\n          dhcpState: state ? i18n.global.t('global.action.enable') : i18n.global.t('global.action.disable')\n        }),\n        okTitle: state ? i18n.global.t('global.action.enable') : i18n.global.t('global.action.disable'),\n        okVariant: 'danger',\n        cancelTitle: i18n.global.t('global.action.cancel')\n      }).then(dhcpEnableConfirmed => {\n        if (dhcpEnableConfirmed) {\n          this.$store.dispatch('network/saveDhcp6EnabledState', state).then(message => this.successToast(message)).catch(({\n            message\n          }) => this.errorToast(message));\n        } else {\n          let onDhcpCancel = document.getElementById('dhcp6Switch');\n          onDhcpCancel.checked = !state;\n        }\n      });\n    },\n    initDefaultGatewayModal() {\n      this.$bvModal.show('modal-default-gateway');\n    }\n  }\n};","map":{"version":3,"names":["BVToastMixin","IconAdd","IconEdit","IconTrashcan","LoadingBarMixin","PageSection","TableRowAction","DataFormatterMixin","mapState","i18n","useI18n","name","components","mixins","props","tabIndex","type","Number","default","data","$t","t","form","ipv6TableItems","actions","value","title","global","ipv6TableFields","key","label","tdClass","defaultGateway","defaultGatewayEditable","process","env","VUE_APP_ENV_NAME","computed","selectedInterface","$store","getters","dhcp6EnabledState","get","dhcp6Enabled","set","newValue","filteredActions","item","AddressOrigin","filter","action","watch","getIpv6TableItems","getDefaultGateway","ethernetData","created","dispatch","finally","$root","$emit","methods","IPv6DefaultGateway","index","addresses","IPv6Addresses","ipv6","map","Address","PrefixLength","onIpv6TableAction","$event","deleteIpv6TableRow","splice","newIpv6Array","length","then","message","successToast","catch","errorToast","initAddIpv6Address","$bvModal","show","changeDhcp6EnabledState","state","msgBoxConfirm","dhcpState","okTitle","okVariant","cancelTitle","dhcpEnableConfirmed","onDhcpCancel","document","getElementById","checked","initDefaultGatewayModal"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Settings/Network/TableIpv6.vue"],"sourcesContent":["<template>\n  <page-section :section-title=\"$t('pageNetwork.ipv6')\">\n    <b-row class=\"mb-4\">\n      <b-col lg=\"2\" md=\"6\">\n        <dl>\n          <dt>{{ $t('pageNetwork.dhcp6') }}</dt>\n          <dd>\n            <b-form-checkbox\n              id=\"dhcp6Switch\"\n              v-model=\"dhcp6EnabledState\"\n              data-test-id=\"networkSettings-switch-dhcp6Enabled\"\n              switch\n              @change=\"changeDhcp6EnabledState\"\n            >\n              <span v-if=\"dhcp6EnabledState\">\n                {{ $t('global.status.enabled') }}\n              </span>\n              <span v-else>{{ $t('global.status.disabled') }}</span>\n            </b-form-checkbox>\n          </dd>\n        </dl>\n      </b-col>\n      <b-col lg=\"2\" md=\"6\">\n        <dl class=\"text-nowrap\">\n          <dt>\n            {{ $t('pageNetwork.ipv6DefaultGateway') }}\n            <b-button\n              v-if=\"defaultGatewayEditable\"\n              variant=\"link\"\n              class=\"p-1\"\n              @click=\"initDefaultGatewayModal()\"\n            >\n              <icon-edit\n                :title=\"$t('pageNetwork.modal.editIPv6DefaultGatewayTitle')\"\n              />\n            </b-button>\n          </dt>\n          <dd>\n            {{ dataFormatter(defaultGateway) }}\n          </dd>\n        </dl>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <h3 class=\"h5\">\n          {{ $t('pageNetwork.ipv6Addresses') }}\n        </h3>\n      </b-col>\n      <b-col class=\"text-right\">\n        <b-button variant=\"primary\" @click=\"initAddIpv6Address()\">\n          <icon-add />\n          {{ $t('pageNetwork.table.addIpv6Address') }}\n        </b-button>\n      </b-col>\n    </b-row>\n    <b-table\n      responsive=\"md\"\n      hover\n      :fields=\"ipv6TableFields\"\n      :items=\"form.ipv6TableItems\"\n      :empty-text=\"$t('global.table.emptyMessage')\"\n      class=\"mb-0\"\n      show-empty\n    >\n      <template #cell(actions)=\"{ item, index }\">\n        <table-row-action\n          v-for=\"(action, actionIndex) in filteredActions(item)\"\n          :key=\"actionIndex\"\n          :value=\"action.value\"\n          :title=\"action.title\"\n          :enabled=\"action.enabled\"\n          @click-table-action=\"onIpv6TableAction(action, $event, index)\"\n        >\n          <template #icon>\n            <icon-edit v-if=\"action.value === 'edit'\" />\n            <icon-trashcan v-if=\"action.value === 'delete'\" />\n          </template>\n        </table-row-action>\n      </template>\n    </b-table>\n  </page-section>\n</template>\n\n<script>\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconEdit from '@carbon/icons-vue/es/edit/20';\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport PageSection from '@/components/Global/PageSection';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport { mapState } from 'vuex';\nimport i18n from '@/i18n';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  name: 'Ipv6Table',\n  components: {\n    IconAdd,\n    IconEdit,\n    IconTrashcan,\n    PageSection,\n    TableRowAction,\n  },\n  mixins: [BVToastMixin, LoadingBarMixin, DataFormatterMixin],\n  props: {\n    tabIndex: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        ipv6TableItems: [],\n      },\n      actions: [\n        {\n          value: 'edit',\n          title: i18n.global.t('global.action.edit'),\n        },\n        {\n          value: 'delete',\n          title: i18n.global.t('global.action.delete'),\n        },\n      ],\n      ipv6TableFields: [\n        {\n          key: 'Address',\n          label: i18n.global.t('pageNetwork.table.ipAddress'),\n        },\n        {\n          key: 'PrefixLength',\n          label: i18n.global.t('pageNetwork.table.prefixLength'),\n        },\n        {\n          key: 'AddressOrigin',\n          label: i18n.global.t('pageNetwork.table.addressOrigin'),\n        },\n        { key: 'actions', label: '', tdClass: 'text-right' },\n      ],\n      defaultGateway: '',\n      defaultGatewayEditable:\n        process.env.VUE_APP_ENV_NAME !== 'nvidia-bluefield',\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData']),\n    selectedInterface() {\n      return this.$store.getters['network/selectedInterfaceIndex'];\n    },\n    dhcp6EnabledState: {\n      get() {\n        return (\n          this.$store.getters['network/globalNetworkSettings'][\n            this.selectedInterface\n          ].dhcp6Enabled === 'Enabled'\n        );\n      },\n      set(newValue) {\n        return newValue;\n      },\n    },\n    filteredActions() {\n      return (item) => {\n        if (item.AddressOrigin === 'DHCPv6' || item.AddressOrigin === 'SLAAC') {\n          return item.actions.filter((action) => action.value !== 'delete');\n        } else {\n          return item.actions;\n        }\n      };\n    },\n  },\n  watch: {\n    // Watch for change in tab index\n    tabIndex() {\n      this.getIpv6TableItems();\n      this.getDefaultGateway();\n    },\n    ethernetData() {\n      this.getIpv6TableItems();\n      this.getDefaultGateway();\n    },\n  },\n  created() {\n    this.getIpv6TableItems();\n    this.getDefaultGateway();\n    this.$store.dispatch('network/getEthernetData').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('network-table-ipv6-complete');\n    });\n  },\n  methods: {\n    getDefaultGateway() {\n      this.defaultGateway = this.ethernetData[this.tabIndex].IPv6DefaultGateway;\n    },\n    getIpv6TableItems() {\n      const index = this.tabIndex;\n      const addresses =\n        this.ethernetData[index].IPv6Addresses.filter(\n          (ipv6) =>\n            ipv6.AddressOrigin === 'LinkLocal' ||\n            ipv6.AddressOrigin === 'Static' ||\n            ipv6.AddressOrigin === 'SLAAC' ||\n            ipv6.AddressOrigin === 'DHCPv6',\n        ) || [];\n      this.form.ipv6TableItems = addresses.map((ipv6) => {\n        return {\n          Address: ipv6.Address,\n          PrefixLength: ipv6.PrefixLength,\n          AddressOrigin: ipv6.AddressOrigin,\n          actions: [\n            {\n              value: 'delete',\n              title: i18n.global.t('pageNetwork.table.deleteIpv6'),\n            },\n          ],\n        };\n      });\n    },\n    onIpv6TableAction(action, $event, index) {\n      if ($event === 'delete') {\n        this.deleteIpv6TableRow(index);\n      }\n    },\n    deleteIpv6TableRow(index) {\n      const AddressOrigin = this.form.ipv6TableItems[index].AddressOrigin;\n      this.form.ipv6TableItems.splice(index, 1);\n      const newIpv6Array = this.form.ipv6TableItems.map((ipv6) => {\n        const { Address, PrefixLength } = ipv6;\n        return {\n          Address,\n          PrefixLength,\n        };\n      });\n      if (\n        newIpv6Array.length == 0 &&\n        (AddressOrigin === 'Static' || AddressOrigin === 'LinkLocal')\n      ) {\n        this.$store\n          .dispatch('network/saveDhcp6EnabledState', true)\n          .then((message) => this.successToast(message))\n          .catch(({ message }) => this.errorToast(message));\n      }\n      this.$store\n        .dispatch('network/editIpv6Address', newIpv6Array)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message));\n    },\n    initAddIpv6Address() {\n      this.$bvModal.show('modal-add-ipv6');\n    },\n    changeDhcp6EnabledState(state) {\n      this.$bvModal\n        .msgBoxConfirm(\n          state\n            ? i18n.global.t('pageNetwork.modal.confirmEnableDhcp')\n            : i18n.global.t('pageNetwork.modal.confirmDisableDhcp'),\n          {\n            title: i18n.global.t('pageNetwork.modal.dhcpConfirmTitle', {\n              dhcpState: state\n                ? i18n.global.t('global.action.enable')\n                : i18n.global.t('global.action.disable'),\n            }),\n            okTitle: state\n              ? i18n.global.t('global.action.enable')\n              : i18n.global.t('global.action.disable'),\n            okVariant: 'danger',\n            cancelTitle: i18n.global.t('global.action.cancel'),\n          },\n        )\n        .then((dhcpEnableConfirmed) => {\n          if (dhcpEnableConfirmed) {\n            this.$store\n              .dispatch('network/saveDhcp6EnabledState', state)\n              .then((message) => this.successToast(message))\n              .catch(({ message }) => this.errorToast(message));\n          } else {\n            let onDhcpCancel = document.getElementById('dhcp6Switch');\n            onDhcpCancel.checked = !state;\n          }\n        });\n    },\n    initDefaultGatewayModal() {\n      this.$bvModal.show('modal-default-gateway');\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}