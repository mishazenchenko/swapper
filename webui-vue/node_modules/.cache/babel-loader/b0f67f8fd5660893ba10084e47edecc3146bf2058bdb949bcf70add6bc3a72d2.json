{"ast":null,"code":"import PageSection from '@/components/Global/PageSection';\nimport IconChevron from '@carbon/icons-vue/es/chevron--down/20';\nimport StatusIcon from '@/components/Global/StatusIcon';\nimport TableCellCount from '@/components/Global/TableCellCount';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport TableSortMixin from '@/components/Mixins/TableSortMixin';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport Search from '@/components/Global/Search';\nimport SearchFilterMixin, { searchFilter } from '@/components/Mixins/SearchFilterMixin';\nimport TableRowExpandMixin, { expandRowLabel } from '@/components/Mixins/TableRowExpandMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  components: {\n    IconChevron,\n    PageSection,\n    StatusIcon,\n    Search,\n    TableCellCount\n  },\n  mixins: [BVToastMixin, TableRowExpandMixin, DataFormatterMixin, TableSortMixin, SearchFilterMixin],\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      fields: [{\n        key: 'expandRow',\n        label: '',\n        tdClass: 'table-row-expand',\n        sortable: false\n      }, {\n        key: 'id',\n        label: i18n.global.t('pageInventory.table.id'),\n        formatter: this.dataFormatter,\n        sortable: true\n      }, {\n        key: 'health',\n        label: i18n.global.t('pageInventory.table.health'),\n        formatter: this.dataFormatter,\n        sortable: true,\n        tdClass: 'text-nowrap'\n      }, {\n        key: 'statusState',\n        label: i18n.global.t('pageInventory.table.state'),\n        formatter: this.dataFormatter,\n        sortable: true,\n        tdClass: 'text-nowrap'\n      }, {\n        key: 'locationNumber',\n        label: i18n.global.t('pageInventory.table.locationNumber'),\n        formatter: this.dataFormatter,\n        sortable: true\n      }, {\n        key: 'identifyLed',\n        label: i18n.global.t('pageInventory.table.identifyLed'),\n        formatter: this.dataFormatter,\n        sortable: false\n      }],\n      searchFilter: searchFilter,\n      searchTotalFilteredRows: 0,\n      expandRowLabel: expandRowLabel\n    };\n  },\n  computed: {\n    filteredRows() {\n      return this.searchFilter ? this.searchTotalFilteredRows : this.processors.length;\n    },\n    processors() {\n      return this.$store.getters['processors/processors'];\n    }\n  },\n  created() {\n    this.$store.dispatch('processors/getProcessorsInfo').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('hardware-status-processors-complete');\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    onFiltered(filteredItems) {\n      this.searchTotalFilteredRows = filteredItems.length;\n    },\n    toggleIdentifyLedValue(row) {\n      this.$store.dispatch('processors/updateIdentifyLedValue', {\n        uri: row.uri,\n        identifyLed: row.identifyLed\n      }).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    // TO DO: remove hasIdentifyLed when the following is merged:\n    // https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/37045\n    hasIdentifyLed(identifyLed) {\n      return typeof identifyLed === 'boolean';\n    },\n    statusStateIcon(status) {\n      switch (status) {\n        case 'Enabled':\n          return 'success';\n        case 'Absent':\n          return 'warning';\n        default:\n          return '';\n      }\n    }\n  }\n};","map":{"version":3,"names":["PageSection","IconChevron","StatusIcon","TableCellCount","BVToastMixin","TableSortMixin","DataFormatterMixin","Search","SearchFilterMixin","searchFilter","TableRowExpandMixin","expandRowLabel","useI18n","i18n","components","mixins","data","$t","t","isBusy","fields","key","label","tdClass","sortable","global","formatter","dataFormatter","searchTotalFilteredRows","computed","filteredRows","processors","length","$store","getters","created","dispatch","finally","$root","$emit","methods","onFiltered","filteredItems","toggleIdentifyLedValue","row","uri","identifyLed","then","message","successToast","catch","errorToast","hasIdentifyLed","statusStateIcon","status"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/HardwareStatus/Inventory/InventoryTableProcessors.vue"],"sourcesContent":["<template>\n  <page-section :section-title=\"$t('pageInventory.processors')\">\n    <!-- Search -->\n    <b-row class=\"align-items-end\">\n      <b-col sm=\"6\" md=\"5\" xl=\"4\">\n        <search\n          @change-search=\"onChangeSearchInput\"\n          @clear-search=\"onClearSearchInput\"\n        />\n      </b-col>\n      <b-col sm=\"6\" md=\"3\" xl=\"2\">\n        <table-cell-count\n          :filtered-items-count=\"filteredRows\"\n          :total-number-of-cells=\"processors.length\"\n        ></table-cell-count>\n      </b-col>\n    </b-row>\n    <b-table\n      sort-icon-left\n      no-sort-reset\n      hover\n      responsive=\"md\"\n      show-empty\n      :items=\"processors\"\n      :fields=\"fields\"\n      :sort-desc=\"true\"\n      :filter=\"searchFilter\"\n      :empty-text=\"$t('global.table.emptyMessage')\"\n      :empty-filtered-text=\"$t('global.table.emptySearchMessage')\"\n      :busy=\"isBusy\"\n      @filtered=\"onFiltered\"\n    >\n      <!-- Expand button -->\n      <template #cell(expandRow)=\"row\">\n        <b-button\n          variant=\"link\"\n          data-test-id=\"hardwareStatus-button-expandProcessors\"\n          :title=\"expandRowLabel\"\n          class=\"btn-icon-only\"\n          @click=\"toggleRowDetails(row)\"\n        >\n          <icon-chevron />\n          <span class=\"sr-only\">{{ expandRowLabel }}</span>\n        </b-button>\n      </template>\n      <!-- Health -->\n      <template #cell(health)=\"{ value }\">\n        <status-icon :status=\"statusIcon(value)\" />\n        {{ value }}\n      </template>\n      <!-- StatusState -->\n      <template #cell(statusState)=\"{ value }\">\n        <status-icon :status=\"statusStateIcon(value)\" />\n        {{ value }}\n      </template>\n\n      <!-- Toggle identify LED -->\n      <template #cell(identifyLed)=\"row\">\n        <b-form-checkbox\n          v-if=\"hasIdentifyLed(row.item.identifyLed)\"\n          v-model=\"row.item.identifyLed\"\n          name=\"switch\"\n          switch\n          @change=\"toggleIdentifyLedValue(row.item)\"\n        >\n          <span v-if=\"row.item.identifyLed\">\n            {{ $t('global.status.on') }}\n          </span>\n          <span v-else> {{ $t('global.status.off') }} </span>\n        </b-form-checkbox>\n        <div v-else>--</div>\n      </template>\n\n      <template #row-details=\"{ item }\">\n        <b-container fluid>\n          <b-row>\n            <b-col class=\"mt-2\" sm=\"6\" xl=\"6\">\n              <dl>\n                <!-- Name -->\n                <dt>{{ $t('pageInventory.table.name') }}:</dt>\n                <dd>{{ dataFormatter(item.name) }}</dd>\n                <!-- Part Number -->\n                <dt>{{ $t('pageInventory.table.partNumber') }}:</dt>\n                <dd>{{ dataFormatter(item.partNumber) }}</dd>\n                <!-- Serial Number -->\n                <dt>{{ $t('pageInventory.table.serialNumber') }}:</dt>\n                <dd>{{ dataFormatter(item.serialNumber) }}</dd>\n                <!-- Spare Part Number -->\n                <dt>{{ $t('pageInventory.table.sparePartNumber') }}:</dt>\n                <dd>{{ dataFormatter(item.sparePartNumber) }}</dd>\n                <!-- Model -->\n                <dt>{{ $t('pageInventory.table.model') }}:</dt>\n                <dd>{{ dataFormatter(item.model) }}</dd>\n                <!-- Asset Tag -->\n                <dt>{{ $t('pageInventory.table.assetTag') }}:</dt>\n                <dd>{{ dataFormatter(item.assetTag) }}</dd>\n              </dl>\n            </b-col>\n            <b-col class=\"mt-2\" sm=\"6\" xl=\"6\">\n              <dl>\n                <!-- Status state -->\n                <dt>{{ $t('pageInventory.table.statusState') }}:</dt>\n                <dd>{{ dataFormatter(item.statusState) }}</dd>\n                <!-- Health Rollup -->\n                <dt>{{ $t('pageInventory.table.healthRollup') }}:</dt>\n                <dd>{{ dataFormatter(item.healthRollup) }}</dd>\n              </dl>\n            </b-col>\n          </b-row>\n          <div class=\"section-divider mb-3 mt-3\"></div>\n          <b-row>\n            <b-col class=\"mt-1\" sm=\"6\" xl=\"6\">\n              <dl>\n                <!-- Manufacturer -->\n                <dt>{{ $t('pageInventory.table.manufacturer') }}:</dt>\n                <dd>{{ dataFormatter(item.manufacturer) }}</dd>\n                <!-- Processor Type -->\n                <dt>{{ $t('pageInventory.table.processorType') }}:</dt>\n                <dd>{{ dataFormatter(item.processorType) }}</dd>\n                <!-- Processor Architecture -->\n                <dt>{{ $t('pageInventory.table.processorArchitecture') }}:</dt>\n                <dd>{{ dataFormatter(item.processorArchitecture) }}</dd>\n                <!-- Instruction Set -->\n                <dt>{{ $t('pageInventory.table.instructionSet') }}:</dt>\n                <dd>{{ dataFormatter(item.instructionSet) }}</dd>\n                <!-- Version -->\n                <dt>{{ $t('pageInventory.table.version') }}:</dt>\n                <dd>{{ dataFormatter(item.version) }}</dd>\n              </dl>\n            </b-col>\n            <b-col class=\"mt-1\" sm=\"6\" xl=\"6\">\n              <dl>\n                <!-- Min Speed MHz -->\n                <dt>{{ $t('pageInventory.table.minSpeedMHz') }}:</dt>\n                <dd>\n                  {{ dataFormatter(item.minSpeedMHz) }}\n                  {{ $t('unit.MHz') }}\n                </dd>\n                <!-- Max Speed MHz -->\n                <dt>{{ $t('pageInventory.table.maxSpeedMHz') }}:</dt>\n                <dd>\n                  {{ dataFormatter(item.maxSpeedMHz) }}\n                  {{ $t('unit.MHz') }}\n                </dd>\n                <!-- Total Cores -->\n                <dt>{{ $t('pageInventory.table.totalCores') }}:</dt>\n                <dd>{{ dataFormatter(item.totalCores) }}</dd>\n                <!-- Total Threads -->\n                <dt>{{ $t('pageInventory.table.totalThreads') }}:</dt>\n                <dd>{{ dataFormatter(item.totalThreads) }}</dd>\n              </dl>\n            </b-col>\n          </b-row>\n        </b-container>\n      </template>\n    </b-table>\n  </page-section>\n</template>\n\n<script>\nimport PageSection from '@/components/Global/PageSection';\nimport IconChevron from '@carbon/icons-vue/es/chevron--down/20';\nimport StatusIcon from '@/components/Global/StatusIcon';\nimport TableCellCount from '@/components/Global/TableCellCount';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport TableSortMixin from '@/components/Mixins/TableSortMixin';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport Search from '@/components/Global/Search';\nimport SearchFilterMixin, {\n  searchFilter,\n} from '@/components/Mixins/SearchFilterMixin';\nimport TableRowExpandMixin, {\n  expandRowLabel,\n} from '@/components/Mixins/TableRowExpandMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  components: { IconChevron, PageSection, StatusIcon, Search, TableCellCount },\n  mixins: [\n    BVToastMixin,\n    TableRowExpandMixin,\n    DataFormatterMixin,\n    TableSortMixin,\n    SearchFilterMixin,\n  ],\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      fields: [\n        {\n          key: 'expandRow',\n          label: '',\n          tdClass: 'table-row-expand',\n          sortable: false,\n        },\n        {\n          key: 'id',\n          label: i18n.global.t('pageInventory.table.id'),\n          formatter: this.dataFormatter,\n          sortable: true,\n        },\n        {\n          key: 'health',\n          label: i18n.global.t('pageInventory.table.health'),\n          formatter: this.dataFormatter,\n          sortable: true,\n          tdClass: 'text-nowrap',\n        },\n        {\n          key: 'statusState',\n          label: i18n.global.t('pageInventory.table.state'),\n          formatter: this.dataFormatter,\n          sortable: true,\n          tdClass: 'text-nowrap',\n        },\n        {\n          key: 'locationNumber',\n          label: i18n.global.t('pageInventory.table.locationNumber'),\n          formatter: this.dataFormatter,\n          sortable: true,\n        },\n        {\n          key: 'identifyLed',\n          label: i18n.global.t('pageInventory.table.identifyLed'),\n          formatter: this.dataFormatter,\n          sortable: false,\n        },\n      ],\n      searchFilter: searchFilter,\n      searchTotalFilteredRows: 0,\n      expandRowLabel: expandRowLabel,\n    };\n  },\n  computed: {\n    filteredRows() {\n      return this.searchFilter\n        ? this.searchTotalFilteredRows\n        : this.processors.length;\n    },\n    processors() {\n      return this.$store.getters['processors/processors'];\n    },\n  },\n  created() {\n    this.$store.dispatch('processors/getProcessorsInfo').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('hardware-status-processors-complete');\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    onFiltered(filteredItems) {\n      this.searchTotalFilteredRows = filteredItems.length;\n    },\n    toggleIdentifyLedValue(row) {\n      this.$store\n        .dispatch('processors/updateIdentifyLedValue', {\n          uri: row.uri,\n          identifyLed: row.identifyLed,\n        })\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message));\n    },\n    // TO DO: remove hasIdentifyLed when the following is merged:\n    // https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/37045\n    hasIdentifyLed(identifyLed) {\n      return typeof identifyLed === 'boolean';\n    },\n    statusStateIcon(status) {\n      switch (status) {\n        case 'Enabled':\n          return 'success';\n        case 'Absent':\n          return 'warning';\n        default:\n          return '';\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AAgKA,OAAOA,WAAU,MAAO,iCAAiC;AACzD,OAAOC,WAAU,MAAO,uCAAuC;AAC/D,OAAOC,UAAS,MAAO,gCAAgC;AACvD,OAAOC,cAAa,MAAO,oCAAoC;AAC/D,OAAOC,YAAW,MAAO,kCAAkC;AAC3D,OAAOC,cAAa,MAAO,oCAAoC;AAC/D,OAAOC,kBAAiB,MAAO,wCAAwC;AACvE,OAAOC,MAAK,MAAO,4BAA4B;AAC/C,OAAOC,iBAAiB,IACtBC,YAAY,QACP,uCAAuC;AAC9C,OAAOC,mBAAmB,IACxBC,cAAc,QACT,yCAAyC;AAChD,SAASC,OAAM,QAAS,UAAU;AAClC,OAAOC,IAAG,MAAO,QAAQ;AAEzB,eAAe;EACbC,UAAU,EAAE;IAAEb,WAAW;IAAED,WAAW;IAAEE,UAAU;IAAEK,MAAM;IAAEJ;EAAe,CAAC;EAC5EY,MAAM,EAAE,CACNX,YAAY,EACZM,mBAAmB,EACnBJ,kBAAkB,EAClBD,cAAc,EACdG,iBAAiB,CAClB;EACDQ,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,EAAE,EAAEL,OAAO,CAAC,CAAC,CAACM,CAAC;MACfC,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE,CACN;QACEC,GAAG,EAAE,WAAW;QAChBC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,kBAAkB;QAC3BC,QAAQ,EAAE;MACZ,CAAC,EACD;QACEH,GAAG,EAAE,IAAI;QACTC,KAAK,EAAET,IAAI,CAACY,MAAM,CAACP,CAAC,CAAC,wBAAwB,CAAC;QAC9CQ,SAAS,EAAE,IAAI,CAACC,aAAa;QAC7BH,QAAQ,EAAE;MACZ,CAAC,EACD;QACEH,GAAG,EAAE,QAAQ;QACbC,KAAK,EAAET,IAAI,CAACY,MAAM,CAACP,CAAC,CAAC,4BAA4B,CAAC;QAClDQ,SAAS,EAAE,IAAI,CAACC,aAAa;QAC7BH,QAAQ,EAAE,IAAI;QACdD,OAAO,EAAE;MACX,CAAC,EACD;QACEF,GAAG,EAAE,aAAa;QAClBC,KAAK,EAAET,IAAI,CAACY,MAAM,CAACP,CAAC,CAAC,2BAA2B,CAAC;QACjDQ,SAAS,EAAE,IAAI,CAACC,aAAa;QAC7BH,QAAQ,EAAE,IAAI;QACdD,OAAO,EAAE;MACX,CAAC,EACD;QACEF,GAAG,EAAE,gBAAgB;QACrBC,KAAK,EAAET,IAAI,CAACY,MAAM,CAACP,CAAC,CAAC,oCAAoC,CAAC;QAC1DQ,SAAS,EAAE,IAAI,CAACC,aAAa;QAC7BH,QAAQ,EAAE;MACZ,CAAC,EACD;QACEH,GAAG,EAAE,aAAa;QAClBC,KAAK,EAAET,IAAI,CAACY,MAAM,CAACP,CAAC,CAAC,iCAAiC,CAAC;QACvDQ,SAAS,EAAE,IAAI,CAACC,aAAa;QAC7BH,QAAQ,EAAE;MACZ,CAAC,CACF;MACDf,YAAY,EAAEA,YAAY;MAC1BmB,uBAAuB,EAAE,CAAC;MAC1BjB,cAAc,EAAEA;IAClB,CAAC;EACH,CAAC;EACDkB,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,OAAO,IAAI,CAACrB,YAAW,GACnB,IAAI,CAACmB,uBAAsB,GAC3B,IAAI,CAACG,UAAU,CAACC,MAAM;IAC5B,CAAC;IACDD,UAAUA,CAAA,EAAG;MACX,OAAO,IAAI,CAACE,MAAM,CAACC,OAAO,CAAC,uBAAuB,CAAC;IACrD;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,8BAA8B,CAAC,CAACC,OAAO,CAAC,MAAM;MACjE;MACA,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,qCAAqC,CAAC;MACvD,IAAI,CAACpB,MAAK,GAAI,KAAK;IACrB,CAAC,CAAC;EACJ,CAAC;EACDqB,OAAO,EAAE;IACPC,UAAUA,CAACC,aAAa,EAAE;MACxB,IAAI,CAACd,uBAAsB,GAAIc,aAAa,CAACV,MAAM;IACrD,CAAC;IACDW,sBAAsBA,CAACC,GAAG,EAAE;MAC1B,IAAI,CAACX,MAAK,CACPG,QAAQ,CAAC,mCAAmC,EAAE;QAC7CS,GAAG,EAAED,GAAG,CAACC,GAAG;QACZC,WAAW,EAAEF,GAAG,CAACE;MACnB,CAAC,EACAC,IAAI,CAAEC,OAAO,IAAK,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC,EAC5CE,KAAK,CAAC,CAAC;QAAEF;MAAQ,CAAC,KAAK,IAAI,CAACG,UAAU,CAACH,OAAO,CAAC,CAAC;IACrD,CAAC;IACD;IACA;IACAI,cAAcA,CAACN,WAAW,EAAE;MAC1B,OAAO,OAAOA,WAAU,KAAM,SAAS;IACzC,CAAC;IACDO,eAAeA,CAACC,MAAM,EAAE;MACtB,QAAQA,MAAM;QACZ,KAAK,SAAS;UACZ,OAAO,SAAS;QAClB,KAAK,QAAQ;UACX,OAAO,SAAS;QAClB;UACE,OAAO,EAAE;MACb;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}