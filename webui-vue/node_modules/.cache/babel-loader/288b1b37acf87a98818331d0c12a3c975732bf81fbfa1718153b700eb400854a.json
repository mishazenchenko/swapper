{"ast":null,"code":"import { required, ipAddress, minValue, maxValue } from '@vuelidate/validators';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { useI18n } from 'vue-i18n';\nexport default {\n  mixins: [VuelidateMixin],\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        ipaddress: null,\n        port: null\n      }\n    };\n  },\n  validations() {\n    return {\n      form: {\n        ipAddress: {\n          required,\n          ipAddress\n        },\n        port: {\n          minValue: minValue(0),\n          maxValue: maxValue(65535)\n        }\n      }\n    };\n  },\n  methods: {\n    handleSubmit() {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n      this.$emit('ok', {\n        ipAddress: this.form.ipAddress,\n        port: this.form.port\n      });\n      this.closeModal();\n    },\n    closeModal() {\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    },\n    resetForm() {\n      this.form.ipAddress = '';\n      this.form.port = '';\n      this.v$.$reset();\n      this.$emit('hidden');\n    },\n    onOk(bvModalEvt) {\n      // prevent modal close\n      bvModalEvt.preventDefault();\n      this.handleSubmit();\n    }\n  }\n};","map":{"version":3,"names":["required","ipAddress","minValue","maxValue","VuelidateMixin","useVuelidate","useI18n","mixins","setup","v$","data","$t","t","form","ipaddress","port","validations","methods","handleSubmit","$touch","$invalid","$emit","closeModal","$nextTick","$refs","modal","hide","resetForm","$reset","onOk","bvModalEvt","preventDefault"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Settings/SnmpAlerts/ModalAddDestination.vue"],"sourcesContent":["<template>\n  <b-modal id=\"add-destination\" ref=\"modal\" @ok=\"onOk\" @hidden=\"resetForm\">\n    <template #modal-title>\n      {{ $t('pageSnmpAlerts.modal.addSnmpDestinationTitle') }}\n    </template>\n    <b-form id=\"form-destination\">\n      <b-container>\n        <b-row>\n          <b-col sm=\"6\">\n            <!-- Add new SNMP alert destination type -->\n            <b-form-group\n              :label=\"$t('pageSnmpAlerts.modal.ipaddress')\"\n              label-for=\"ip-address\"\n            >\n              <b-form-input\n                id=\"ip-Address\"\n                v-model=\"form.ipAddress\"\n                :state=\"getValidationState(v$.form.ipAddress)\"\n                data-test-id=\"snmpAlerts-input-ipAddress\"\n                type=\"text\"\n                @blur=\"v$.form.ipAddress.$touch()\"\n              />\n\n              <b-form-invalid-feedback role=\"alert\">\n                <template v-if=\"v$.form.ipAddress.required.$invalid\">\n                  {{ $t('global.form.fieldRequired') }}\n                </template>\n                <template v-if=\"v$.form.ipAddress.ipAddress.$invalid\">\n                  {{ $t('global.form.invalidFormat') }}\n                </template>\n              </b-form-invalid-feedback>\n            </b-form-group>\n          </b-col>\n          <b-col>\n            <b-form-group label-for=\"port\">\n              <template #label>\n                {{ $t('pageSnmpAlerts.modal.port') }} -\n                <span class=\"form-text d-inline\">\n                  {{ $t('global.form.optional') }}\n                </span>\n              </template>\n              <b-form-input\n                id=\"port\"\n                v-model=\"form.port\"\n                type=\"text\"\n                :state=\"getValidationState(v$.form.port)\"\n                data-test-id=\"snmpAlerts-input-port\"\n                @blur=\"v$.form.port.$touch()\"\n              />\n              <b-form-invalid-feedback role=\"alert\">\n                <template\n                  v-if=\"!v$.form.port.minLength || !v$.form.port.maxLength\"\n                >\n                  {{\n                    $t('global.form.valueMustBeBetween', {\n                      min: 0,\n                      max: 65535,\n                    })\n                  }}\n                </template>\n              </b-form-invalid-feedback>\n            </b-form-group>\n          </b-col>\n        </b-row>\n      </b-container>\n    </b-form>\n    <template #modal-footer=\"{ cancel }\">\n      <b-button variant=\"secondary\" @click=\"cancel()\">\n        {{ $t('global.action.cancel') }}\n      </b-button>\n      <b-button\n        form=\"form-user\"\n        type=\"submit\"\n        variant=\"primary\"\n        data-test-id=\"snmpAlerts-button-ok\"\n        @click=\"onOk\"\n      >\n        {{ $t('pageSnmpAlerts.addDestination') }}\n      </b-button>\n    </template>\n  </b-modal>\n</template>\n\n<script>\nimport { required, ipAddress, minValue, maxValue } from '@vuelidate/validators';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  mixins: [VuelidateMixin],\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        ipaddress: null,\n        port: null,\n      },\n    };\n  },\n  validations() {\n    return {\n      form: {\n        ipAddress: {\n          required,\n          ipAddress,\n        },\n        port: {\n          minValue: minValue(0),\n          maxValue: maxValue(65535),\n        },\n      },\n    };\n  },\n  methods: {\n    handleSubmit() {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n      this.$emit('ok', {\n        ipAddress: this.form.ipAddress,\n        port: this.form.port,\n      });\n      this.closeModal();\n    },\n    closeModal() {\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    },\n    resetForm() {\n      this.form.ipAddress = '';\n      this.form.port = '';\n      this.v$.$reset();\n      this.$emit('hidden');\n    },\n    onOk(bvModalEvt) {\n      // prevent modal close\n      bvModalEvt.preventDefault();\n      this.handleSubmit();\n    },\n  },\n};\n</script>\n"],"mappings":"AAoFA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,QAAO,QAAS,uBAAuB;AAC/E,OAAOC,cAAa,MAAO,uCAAuC;AAClE,SAASC,YAAW,QAAS,iBAAiB;AAC9C,SAASC,OAAM,QAAS,UAAU;AAElC,eAAe;EACbC,MAAM,EAAE,CAACH,cAAc,CAAC;EACxBI,KAAKA,CAAA,EAAG;IACN,OAAO;MACLC,EAAE,EAAEJ,YAAY,CAAC;IACnB,CAAC;EACH,CAAC;EACDK,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,EAAE,EAAEL,OAAO,CAAC,CAAC,CAACM,CAAC;MACfC,IAAI,EAAE;QACJC,SAAS,EAAE,IAAI;QACfC,IAAI,EAAE;MACR;IACF,CAAC;EACH,CAAC;EACDC,WAAWA,CAAA,EAAG;IACZ,OAAO;MACLH,IAAI,EAAE;QACJZ,SAAS,EAAE;UACTD,QAAQ;UACRC;QACF,CAAC;QACDc,IAAI,EAAE;UACJb,QAAQ,EAAEA,QAAQ,CAAC,CAAC,CAAC;UACrBC,QAAQ,EAAEA,QAAQ,CAAC,KAAK;QAC1B;MACF;IACF,CAAC;EACH,CAAC;EACDc,OAAO,EAAE;IACPC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACT,EAAE,CAACU,MAAM,CAAC,CAAC;MAChB,IAAI,IAAI,CAACV,EAAE,CAACW,QAAQ,EAAE;MACtB,IAAI,CAACC,KAAK,CAAC,IAAI,EAAE;QACfpB,SAAS,EAAE,IAAI,CAACY,IAAI,CAACZ,SAAS;QAC9Bc,IAAI,EAAE,IAAI,CAACF,IAAI,CAACE;MAClB,CAAC,CAAC;MACF,IAAI,CAACO,UAAU,CAAC,CAAC;IACnB,CAAC;IACDA,UAAUA,CAAA,EAAG;MACX,IAAI,CAACC,SAAS,CAAC,MAAM;QACnB,IAAI,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC;IACDC,SAASA,CAAA,EAAG;MACV,IAAI,CAACd,IAAI,CAACZ,SAAQ,GAAI,EAAE;MACxB,IAAI,CAACY,IAAI,CAACE,IAAG,GAAI,EAAE;MACnB,IAAI,CAACN,EAAE,CAACmB,MAAM,CAAC,CAAC;MAChB,IAAI,CAACP,KAAK,CAAC,QAAQ,CAAC;IACtB,CAAC;IACDQ,IAAIA,CAACC,UAAU,EAAE;MACf;MACAA,UAAU,CAACC,cAAc,CAAC,CAAC;MAC3B,IAAI,CAACb,YAAY,CAAC,CAAC;IACrB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}