{"ast":null,"code":"import PageSection from '@/components/Global/PageSection';\nimport IconChevron from '@carbon/icons-vue/es/chevron--down/20';\nimport StatusIcon from '@/components/Global/StatusIcon';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport TableRowExpandMixin, { expandRowLabel } from '@/components/Mixins/TableRowExpandMixin';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  components: {\n    IconChevron,\n    PageSection,\n    StatusIcon\n  },\n  mixins: [BVToastMixin, TableRowExpandMixin, DataFormatterMixin],\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      fields: [{\n        key: 'expandRow',\n        label: '',\n        tdClass: 'table-row-expand'\n      }, {\n        key: 'id',\n        label: i18n.global.t('pageInventory.table.id'),\n        formatter: this.dataFormatter\n      }, {\n        key: 'health',\n        label: i18n.global.t('pageInventory.table.health'),\n        formatter: this.dataFormatter\n      }, {\n        key: 'locationNumber',\n        label: i18n.global.t('pageInventory.table.locationNumber'),\n        formatter: this.dataFormatter\n      }, {\n        key: 'identifyLed',\n        label: i18n.global.t('pageInventory.table.identifyLed'),\n        formatter: this.dataFormatter\n      }],\n      expandRowLabel: expandRowLabel\n    };\n  },\n  computed: {\n    bmc() {\n      return this.$store.getters['bmc/bmc'];\n    },\n    items() {\n      if (this.bmc) {\n        return [this.bmc];\n      } else {\n        return [];\n      }\n    }\n  },\n  created() {\n    this.$store.dispatch('bmc/getBmcInfo').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('hardware-status-bmc-manager-complete');\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    toggleIdentifyLedValue(row) {\n      this.$store.dispatch('bmc/updateIdentifyLedValue', {\n        uri: row.uri,\n        identifyLed: row.identifyLed\n      }).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    // TO DO: remove hasIdentifyLed method once the following story is merged:\n    // https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/43179\n    hasIdentifyLed(identifyLed) {\n      return typeof identifyLed === 'boolean';\n    }\n  }\n};","map":{"version":3,"names":["PageSection","IconChevron","StatusIcon","BVToastMixin","TableRowExpandMixin","expandRowLabel","DataFormatterMixin","useI18n","i18n","components","mixins","data","$t","t","isBusy","fields","key","label","tdClass","global","formatter","dataFormatter","computed","bmc","$store","getters","items","created","dispatch","finally","$root","$emit","methods","toggleIdentifyLedValue","row","uri","identifyLed","then","message","successToast","catch","errorToast","hasIdentifyLed"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/HardwareStatus/Inventory/InventoryTableBmcManager.vue"],"sourcesContent":["<template>\n  <page-section :section-title=\"$t('pageInventory.bmcManager')\">\n    <b-table\n      responsive=\"md\"\n      hover\n      :items=\"items\"\n      :fields=\"fields\"\n      show-empty\n      :empty-text=\"$t('global.table.emptyMessage')\"\n      :busy=\"isBusy\"\n    >\n      <!-- Expand chevron icon -->\n      <template #cell(expandRow)=\"row\">\n        <b-button\n          variant=\"link\"\n          data-test-id=\"hardwareStatus-button-expandBmc\"\n          :title=\"expandRowLabel\"\n          class=\"btn-icon-only\"\n          @click=\"toggleRowDetails(row)\"\n        >\n          <icon-chevron />\n          <span class=\"sr-only\">{{ expandRowLabel }}</span>\n        </b-button>\n      </template>\n\n      <!-- Health -->\n      <template #cell(health)=\"{ value }\">\n        <status-icon :status=\"statusIcon(value)\" />\n        {{ value }}\n      </template>\n\n      <!-- Toggle identify LED -->\n      <template #cell(identifyLed)=\"row\">\n        <b-form-checkbox\n          v-if=\"hasIdentifyLed(row.item.identifyLed)\"\n          v-model=\"row.item.identifyLed\"\n          name=\"switch\"\n          switch\n          @change=\"toggleIdentifyLedValue(row.item)\"\n        >\n          <span v-if=\"row.item.identifyLed\">\n            {{ $t('global.status.on') }}\n          </span>\n          <span v-else> {{ $t('global.status.off') }} </span>\n        </b-form-checkbox>\n        <div v-else>--</div>\n      </template>\n\n      <template #row-details=\"{ item }\">\n        <b-container fluid>\n          <b-row>\n            <b-col class=\"mt-2\" sm=\"6\" xl=\"6\">\n              <dl>\n                <!-- Name -->\n                <dt>{{ $t('pageInventory.table.name') }}:</dt>\n                <dd>{{ dataFormatter(item.name) }}</dd>\n                <!-- Part number -->\n                <dt>{{ $t('pageInventory.table.partNumber') }}:</dt>\n                <dd>{{ dataFormatter(item.partNumber) }}</dd>\n                <!-- Serial number -->\n                <dt>{{ $t('pageInventory.table.serialNumber') }}:</dt>\n                <dd>{{ dataFormatter(item.serialNumber) }}</dd>\n                <!-- Spare part number -->\n                <dt>{{ $t('pageInventory.table.sparePartNumber') }}:</dt>\n                <dd>{{ dataFormatter(item.sparePartNumber) }}</dd>\n                <!-- Model -->\n                <dt>{{ $t('pageInventory.table.model') }}:</dt>\n                <dd>{{ dataFormatter(item.model) }}</dd>\n                <!-- UUID -->\n                <dt>{{ $t('pageInventory.table.uuid') }}:</dt>\n                <dd>{{ dataFormatter(item.uuid) }}</dd>\n                <!-- Service entry point UUID -->\n                <dt>{{ $t('pageInventory.table.serviceEntryPointUuid') }}:</dt>\n                <dd>{{ dataFormatter(item.serviceEntryPointUuid) }}</dd>\n              </dl>\n            </b-col>\n            <b-col class=\"mt-2\" sm=\"6\" xl=\"6\">\n              <dl>\n                <!-- Status state -->\n                <dt>{{ $t('pageInventory.table.statusState') }}:</dt>\n                <dd>{{ dataFormatter(item.statusState) }}</dd>\n                <!-- Power state -->\n                <dt>{{ $t('pageInventory.table.power') }}:</dt>\n                <dd>{{ dataFormatter(item.powerState) }}</dd>\n                <!-- Health rollup -->\n                <dt>{{ $t('pageInventory.table.healthRollup') }}:</dt>\n                <dd>{{ dataFormatter(item.healthRollup) }}</dd>\n                <!-- BMC date and time -->\n                <dt>{{ $t('pageInventory.table.bmcDateTime') }}:</dt>\n                <dd>\n                  {{ $filters.formatDate(item.dateTime) }}\n                  {{ $filters.formatTime(item.dateTime) }}\n                </dd>\n                <!-- Reset date and time -->\n                <dt>{{ $t('pageInventory.table.lastResetTime') }}:</dt>\n                <dd>\n                  {{ $filters.formatDate(item.lastResetTime) }}\n                  {{ $filters.formatTime(item.lastResetTime) }}\n                </dd>\n              </dl>\n            </b-col>\n          </b-row>\n          <div class=\"section-divider mb-3 mt-3\"></div>\n          <b-row>\n            <b-col class=\"mt-2\" sm=\"6\" xl=\"6\">\n              <dl>\n                <!-- Manufacturer -->\n                <dt>{{ $t('pageInventory.table.manufacturer') }}:</dt>\n                <dd>{{ dataFormatter(item.manufacturer) }}</dd>\n                <!-- Description -->\n                <dt>{{ $t('pageInventory.table.description') }}:</dt>\n                <dd>{{ dataFormatter(item.description) }}</dd>\n                <!-- Manager type -->\n                <dt>{{ $t('pageInventory.table.managerType') }}:</dt>\n                <dd>{{ dataFormatter(item.managerType) }}</dd>\n              </dl>\n            </b-col>\n            <b-col class=\"mt-2\" sm=\"6\" xl=\"6\">\n              <!-- Firmware Version  -->\n              <dl>\n                <dt>{{ $t('pageInventory.table.firmwareVersion') }}:</dt>\n                <dd>{{ item.firmwareVersion }}</dd>\n              </dl>\n              <!-- Graphical console -->\n              <p class=\"mt-1 mb-2 h6 float-none m-0\">\n                {{ $t('pageInventory.table.graphicalConsole') }}\n              </p>\n              <dl class=\"ml-4\">\n                <dt>{{ $t('pageInventory.table.connectTypesSupported') }}:</dt>\n                <dd>\n                  {{ dataFormatterArray(item.graphicalConsoleConnectTypes) }}\n                </dd>\n                <dt>{{ $t('pageInventory.table.maxConcurrentSessions') }}:</dt>\n                <dd>\n                  {{ dataFormatter(item.graphicalConsoleMaxSessions) }}\n                </dd>\n                <dt>{{ $t('pageInventory.table.serviceEnabled') }}:</dt>\n                <dd>\n                  {{ dataFormatter(item.graphicalConsoleEnabled) }}\n                </dd>\n              </dl>\n            </b-col>\n          </b-row>\n        </b-container>\n      </template>\n    </b-table>\n  </page-section>\n</template>\n\n<script>\nimport PageSection from '@/components/Global/PageSection';\nimport IconChevron from '@carbon/icons-vue/es/chevron--down/20';\nimport StatusIcon from '@/components/Global/StatusIcon';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport TableRowExpandMixin, {\n  expandRowLabel,\n} from '@/components/Mixins/TableRowExpandMixin';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  components: { IconChevron, PageSection, StatusIcon },\n  mixins: [BVToastMixin, TableRowExpandMixin, DataFormatterMixin],\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      fields: [\n        {\n          key: 'expandRow',\n          label: '',\n          tdClass: 'table-row-expand',\n        },\n        {\n          key: 'id',\n          label: i18n.global.t('pageInventory.table.id'),\n          formatter: this.dataFormatter,\n        },\n        {\n          key: 'health',\n          label: i18n.global.t('pageInventory.table.health'),\n          formatter: this.dataFormatter,\n        },\n        {\n          key: 'locationNumber',\n          label: i18n.global.t('pageInventory.table.locationNumber'),\n          formatter: this.dataFormatter,\n        },\n        {\n          key: 'identifyLed',\n          label: i18n.global.t('pageInventory.table.identifyLed'),\n          formatter: this.dataFormatter,\n        },\n      ],\n      expandRowLabel: expandRowLabel,\n    };\n  },\n  computed: {\n    bmc() {\n      return this.$store.getters['bmc/bmc'];\n    },\n    items() {\n      if (this.bmc) {\n        return [this.bmc];\n      } else {\n        return [];\n      }\n    },\n  },\n  created() {\n    this.$store.dispatch('bmc/getBmcInfo').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('hardware-status-bmc-manager-complete');\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    toggleIdentifyLedValue(row) {\n      this.$store\n        .dispatch('bmc/updateIdentifyLedValue', {\n          uri: row.uri,\n          identifyLed: row.identifyLed,\n        })\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message));\n    },\n    // TO DO: remove hasIdentifyLed method once the following story is merged:\n    // https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/43179\n    hasIdentifyLed(identifyLed) {\n      return typeof identifyLed === 'boolean';\n    },\n  },\n};\n</script>\n"],"mappings":"AAsJA,OAAOA,WAAU,MAAO,iCAAiC;AACzD,OAAOC,WAAU,MAAO,uCAAuC;AAC/D,OAAOC,UAAS,MAAO,gCAAgC;AACvD,OAAOC,YAAW,MAAO,kCAAkC;AAC3D,OAAOC,mBAAmB,IACxBC,cAAc,QACT,yCAAyC;AAChD,OAAOC,kBAAiB,MAAO,wCAAwC;AACvE,SAASC,OAAM,QAAS,UAAU;AAClC,OAAOC,IAAG,MAAO,QAAQ;AAEzB,eAAe;EACbC,UAAU,EAAE;IAAER,WAAW;IAAED,WAAW;IAAEE;EAAW,CAAC;EACpDQ,MAAM,EAAE,CAACP,YAAY,EAAEC,mBAAmB,EAAEE,kBAAkB,CAAC;EAC/DK,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,EAAE,EAAEL,OAAO,CAAC,CAAC,CAACM,CAAC;MACfC,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE,CACN;QACEC,GAAG,EAAE,WAAW;QAChBC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE;MACX,CAAC,EACD;QACEF,GAAG,EAAE,IAAI;QACTC,KAAK,EAAET,IAAI,CAACW,MAAM,CAACN,CAAC,CAAC,wBAAwB,CAAC;QAC9CO,SAAS,EAAE,IAAI,CAACC;MAClB,CAAC,EACD;QACEL,GAAG,EAAE,QAAQ;QACbC,KAAK,EAAET,IAAI,CAACW,MAAM,CAACN,CAAC,CAAC,4BAA4B,CAAC;QAClDO,SAAS,EAAE,IAAI,CAACC;MAClB,CAAC,EACD;QACEL,GAAG,EAAE,gBAAgB;QACrBC,KAAK,EAAET,IAAI,CAACW,MAAM,CAACN,CAAC,CAAC,oCAAoC,CAAC;QAC1DO,SAAS,EAAE,IAAI,CAACC;MAClB,CAAC,EACD;QACEL,GAAG,EAAE,aAAa;QAClBC,KAAK,EAAET,IAAI,CAACW,MAAM,CAACN,CAAC,CAAC,iCAAiC,CAAC;QACvDO,SAAS,EAAE,IAAI,CAACC;MAClB,CAAC,CACF;MACDhB,cAAc,EAAEA;IAClB,CAAC;EACH,CAAC;EACDiB,QAAQ,EAAE;IACRC,GAAGA,CAAA,EAAG;MACJ,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,SAAS,CAAC;IACvC,CAAC;IACDC,KAAKA,CAAA,EAAG;MACN,IAAI,IAAI,CAACH,GAAG,EAAE;QACZ,OAAO,CAAC,IAAI,CAACA,GAAG,CAAC;MACnB,OAAO;QACL,OAAO,EAAE;MACX;IACF;EACF,CAAC;EACDI,OAAOA,CAAA,EAAG;IACR,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,gBAAgB,CAAC,CAACC,OAAO,CAAC,MAAM;MACnD;MACA,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,sCAAsC,CAAC;MACxD,IAAI,CAACjB,MAAK,GAAI,KAAK;IACrB,CAAC,CAAC;EACJ,CAAC;EACDkB,OAAO,EAAE;IACPC,sBAAsBA,CAACC,GAAG,EAAE;MAC1B,IAAI,CAACV,MAAK,CACPI,QAAQ,CAAC,4BAA4B,EAAE;QACtCO,GAAG,EAAED,GAAG,CAACC,GAAG;QACZC,WAAW,EAAEF,GAAG,CAACE;MACnB,CAAC,EACAC,IAAI,CAAEC,OAAO,IAAK,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC,EAC5CE,KAAK,CAAC,CAAC;QAAEF;MAAQ,CAAC,KAAK,IAAI,CAACG,UAAU,CAACH,OAAO,CAAC,CAAC;IACrD,CAAC;IACD;IACA;IACAI,cAAcA,CAACN,WAAW,EAAE;MAC1B,OAAO,OAAOA,WAAU,KAAM,SAAS;IACzC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}