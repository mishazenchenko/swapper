{"ast":null,"code":"import Alert from '@/components/Global/Alert';\nimport IconCalendar from '@carbon/icons-vue/es/calendar/20';\nimport PageTitle from '@/components/Global/PageTitle';\nimport PageSection from '@/components/Global/PageSection';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport LoadingBarMixin, { loading } from '@/components/Mixins/LoadingBarMixin';\nimport LocalTimezoneLabelMixin from '@/components/Mixins/LocalTimezoneLabelMixin';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { mapState } from 'vuex';\nimport { requiredIf } from '@vuelidate/validators';\nimport { helpers } from 'vuelidate/lib/validators';\nimport { useI18n } from 'vue-i18n';\nconst isoDateRegex = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$)/;\nconst isoTimeRegex = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;\nexport default {\n  name: 'DateTime',\n  components: {\n    Alert,\n    IconCalendar,\n    PageTitle,\n    PageSection\n  },\n  mixins: [BVToastMixin, LoadingBarMixin, LocalTimezoneLabelMixin, VuelidateMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      locale: this.$store.getters['global/languagePreference'],\n      form: {\n        configurationSelected: 'manual',\n        manual: {\n          date: '',\n          time: ''\n        },\n        ntp: {\n          firstAddress: '',\n          secondAddress: '',\n          thirdAddress: ''\n        }\n      },\n      loading\n    };\n  },\n  validations() {\n    return {\n      form: {\n        manual: {\n          date: {\n            required: requiredIf(function () {\n              return this.form.configurationSelected === 'manual';\n            }),\n            pattern: helpers.regex('pattern', isoDateRegex)\n          },\n          time: {\n            required: requiredIf(function () {\n              return this.form.configurationSelected === 'manual';\n            }),\n            pattern: helpers.regex('pattern', isoTimeRegex)\n          }\n        },\n        ntp: {\n          firstAddress: {\n            required: requiredIf(function () {\n              return this.form.configurationSelected === 'ntp';\n            })\n          }\n        }\n      }\n    };\n  },\n  computed: {\n    ...mapState('dateTime', ['ntpServers', 'isNtpProtocolEnabled']),\n    bmcTime() {\n      return this.$store.getters['global/bmcTime'];\n    },\n    ntpOptionSelected() {\n      return this.form.configurationSelected === 'ntp';\n    },\n    manualOptionSelected() {\n      return this.form.configurationSelected === 'manual';\n    },\n    isUtcDisplay() {\n      return this.$store.getters['global/isUtcDisplay'];\n    },\n    timezone() {\n      if (this.isUtcDisplay) {\n        return 'UTC';\n      }\n      return this.localOffset();\n    }\n  },\n  watch: {\n    ntpServers() {\n      this.setNtpValues();\n    },\n    manualDate() {\n      this.emitChange();\n    },\n    bmcTime() {\n      this.form.manual.date = this.$filters.formatDate(this.$store.getters['global/bmcTime']);\n      this.form.manual.time = this.$filters.formatTime(this.$store.getters['global/bmcTime']).slice(0, 5);\n    }\n  },\n  created() {\n    this.startLoader();\n    this.setNtpValues();\n    Promise.all([this.$store.dispatch('global/getBmcTime'), this.$store.dispatch('dateTime/getNtpData')]).finally(() => this.endLoader());\n  },\n  methods: {\n    emitChange() {\n      if (this.v$.$invalid) return;\n      this.v$.$reset(); //reset to re-validate on blur\n      this.$emit('change', {\n        manualDate: this.manualDate ? new Date(this.manualDate) : null\n      });\n    },\n    setNtpValues() {\n      this.form.configurationSelected = this.isNtpProtocolEnabled ? 'ntp' : 'manual';\n      [this.form.ntp.firstAddress = '', this.form.ntp.secondAddress = '', this.form.ntp.thirdAddress = ''] = [this.ntpServers[0], this.ntpServers[1], this.ntpServers[2]];\n    },\n    submitForm() {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n      this.startLoader();\n      let dateTimeForm = {};\n      let isNTPEnabled = this.form.configurationSelected === 'ntp';\n      if (!isNTPEnabled) {\n        const isUtcDisplay = this.$store.getters['global/isUtcDisplay'];\n        let date;\n        dateTimeForm.ntpProtocolEnabled = false;\n        if (isUtcDisplay) {\n          // Create UTC Date\n          date = this.getUtcDate(this.form.manual.date, this.form.manual.time);\n        } else {\n          // Create local Date\n          date = new Date(`${this.form.manual.date} ${this.form.manual.time}`);\n        }\n        dateTimeForm.updatedDateTime = date.toISOString();\n      } else {\n        dateTimeForm.ntpProtocolEnabled = true;\n        const ntpArray = [this.form.ntp.firstAddress, this.form.ntp.secondAddress, this.form.ntp.thirdAddress];\n\n        // Filter the ntpArray to remove empty strings,\n        // per Redfish spec there should be no empty strings or null on the ntp array.\n        const ntpArrayFiltered = ntpArray.filter(x => x);\n        dateTimeForm.ntpServersArray = [...ntpArrayFiltered];\n        [this.ntpServers[0], this.ntpServers[1], this.ntpServers[2]] = [...dateTimeForm.ntpServersArray];\n        this.setNtpValues();\n      }\n      this.$store.dispatch('dateTime/updateDateTime', dateTimeForm).then(success => {\n        this.successToast(success);\n        if (!isNTPEnabled) return;\n        // Shift address up if second address is empty\n        // to avoid refreshing after delay when updating NTP\n        if (!this.form.ntp.secondAddress && this.form.ntp.thirdAddres) {\n          this.form.ntp.secondAddress = this.form.ntp.thirdAddres;\n          this.form.ntp.thirdAddress = '';\n        }\n      }).then(() => {\n        this.$store.dispatch('global/getBmcTime');\n      }).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => {\n        this.v$.form.$reset();\n        this.endLoader();\n      });\n    },\n    getUtcDate(date, time) {\n      // Split user input string values to create\n      // a UTC Date object\n      const datesArray = date.split('-');\n      const timeArray = time.split(':');\n      let utcDate = Date.UTC(datesArray[0],\n      // User input year\n      //UTC expects zero-index month value 0-11 (January-December)\n      //for reference https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC#Parameters\n      parseInt(datesArray[1]) - 1,\n      // User input month\n      datesArray[2],\n      // User input day\n      timeArray[0],\n      // User input hour\n      timeArray[1] // User input minute\n      );\n      return new Date(utcDate);\n    }\n  }\n};","map":{"version":3,"names":["Alert","IconCalendar","PageTitle","PageSection","BVToastMixin","LoadingBarMixin","loading","LocalTimezoneLabelMixin","VuelidateMixin","useVuelidate","mapState","requiredIf","helpers","useI18n","isoDateRegex","isoTimeRegex","name","components","mixins","beforeRouteLeave","to","from","next","hideLoader","setup","v$","data","$t","t","locale","$store","getters","form","configurationSelected","manual","date","time","ntp","firstAddress","secondAddress","thirdAddress","validations","required","pattern","regex","computed","bmcTime","ntpOptionSelected","manualOptionSelected","isUtcDisplay","timezone","localOffset","watch","ntpServers","setNtpValues","manualDate","emitChange","$filters","formatDate","formatTime","slice","created","startLoader","Promise","all","dispatch","finally","endLoader","methods","$invalid","$reset","$emit","Date","isNtpProtocolEnabled","submitForm","$touch","dateTimeForm","isNTPEnabled","ntpProtocolEnabled","getUtcDate","updatedDateTime","toISOString","ntpArray","ntpArrayFiltered","filter","x","ntpServersArray","then","success","successToast","thirdAddres","catch","message","errorToast","datesArray","split","timeArray","utcDate","UTC","parseInt"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Settings/DateTime/DateTime.vue"],"sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title />\n    <b-row>\n      <b-col md=\"8\" xl=\"6\">\n        <alert variant=\"info\" class=\"mb-4\">\n          <span>\n            {{ $t('pageDateTime.alert.message') }}\n            <b-link to=\"/profile-settings\">\n              {{ $t('pageDateTime.alert.link') }}</b-link\n            >\n          </span>\n        </alert>\n      </b-col>\n    </b-row>\n    <page-section>\n      <b-row>\n        <b-col lg=\"3\">\n          <dl>\n            <dt>{{ $t('pageDateTime.form.date') }}</dt>\n            <dd v-if=\"bmcTime\">{{ $filters.formatDate(bmcTime) }}</dd>\n            <dd v-else>--</dd>\n          </dl>\n        </b-col>\n        <b-col lg=\"3\">\n          <dl>\n            <dt>{{ $t('pageDateTime.form.time.label') }}</dt>\n            <dd v-if=\"bmcTime\">{{ $filters.formatTime(bmcTime) }}</dd>\n            <dd v-else>--</dd>\n          </dl>\n        </b-col>\n      </b-row>\n    </page-section>\n    <page-section :section-title=\"$t('pageDateTime.configureSettings')\">\n      <b-form novalidate @submit.prevent=\"submitForm\">\n        <b-form-group\n          label=\"Configure date and time\"\n          :disabled=\"loading\"\n          label-sr-only\n        >\n          <b-form-radio\n            v-model=\"form.configurationSelected\"\n            value=\"manual\"\n            data-test-id=\"dateTime-radio-configureManual\"\n          >\n            {{ $t('pageDateTime.form.manual') }}\n          </b-form-radio>\n          <b-row class=\"mt-3 ml-3\">\n            <b-col sm=\"6\" lg=\"4\" xl=\"3\">\n              <b-form-group\n                :label=\"$t('pageDateTime.form.date')\"\n                label-for=\"input-manual-date\"\n              >\n                <b-form-text id=\"date-format-help\">YYYY-MM-DD</b-form-text>\n                <b-input-group>\n                  <b-form-input\n                    id=\"input-manual-date\"\n                    v-model=\"form.manual.date\"\n                    :state=\"getValidationState(v$.form.manual.date)\"\n                    :disabled=\"ntpOptionSelected\"\n                    data-test-id=\"dateTime-input-manualDate\"\n                    class=\"form-control-with-button\"\n                    @blur=\"v$.form.manual.date.$touch()\"\n                  />\n                  <b-form-invalid-feedback role=\"alert\">\n                    <div v-if=\"v$.form.manual.date.pattern.$invalid\">\n                      {{ $t('global.form.invalidFormat') }}\n                    </div>\n                    <div v-if=\"v$.form.manual.date.required.$invalid\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </div>\n                  </b-form-invalid-feedback>\n                  <b-form-datepicker\n                    v-model=\"form.manual.date\"\n                    class=\"btn-datepicker btn-icon-only\"\n                    button-only\n                    right\n                    :hide-header=\"true\"\n                    :locale=\"locale\"\n                    :label-help=\"\n                      $t('global.calendar.useCursorKeysToNavigateCalendarDates')\n                    \"\n                    :title=\"$t('global.calendar.selectDate')\"\n                    :disabled=\"ntpOptionSelected\"\n                    button-variant=\"link\"\n                    aria-controls=\"input-manual-date\"\n                  >\n                    <template #button-content>\n                      <icon-calendar />\n                      <span class=\"sr-only\">\n                        {{ $t('global.calendar.selectDate') }}\n                      </span>\n                    </template>\n                  </b-form-datepicker>\n                </b-input-group>\n              </b-form-group>\n            </b-col>\n            <b-col sm=\"6\" lg=\"4\" xl=\"3\">\n              <b-form-group\n                :label=\"$t('pageDateTime.form.time.timezone', { timezone })\"\n                label-for=\"input-manual-time\"\n              >\n                <b-form-text id=\"time-format-help\">HH:MM</b-form-text>\n                <b-input-group>\n                  <b-form-input\n                    id=\"input-manual-time\"\n                    v-model=\"form.manual.time\"\n                    :state=\"getValidationState(v$.form.manual.time)\"\n                    :disabled=\"ntpOptionSelected\"\n                    data-test-id=\"dateTime-input-manualTime\"\n                    @blur=\"v$.form.manual.time.$touch()\"\n                  />\n                  <b-form-invalid-feedback role=\"alert\">\n                    <div v-if=\"v$.form.manual.time.pattern.$invalid\">\n                      {{ $t('global.form.invalidFormat') }}\n                    </div>\n                    <div v-if=\"v$.form.manual.time.required.$invalid\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </div>\n                  </b-form-invalid-feedback>\n                </b-input-group>\n              </b-form-group>\n            </b-col>\n          </b-row>\n          <b-form-radio\n            v-model=\"form.configurationSelected\"\n            value=\"ntp\"\n            data-test-id=\"dateTime-radio-configureNTP\"\n          >\n            NTP\n          </b-form-radio>\n          <b-row class=\"mt-3 ml-3\">\n            <b-col sm=\"6\" lg=\"4\" xl=\"3\">\n              <b-form-group\n                :label=\"$t('pageDateTime.form.ntpServers.server1')\"\n                label-for=\"input-ntp-1\"\n              >\n                <b-input-group>\n                  <b-form-input\n                    id=\"input-ntp-1\"\n                    v-model=\"form.ntp.firstAddress\"\n                    :state=\"getValidationState(v$.form.ntp.firstAddress)\"\n                    :disabled=\"manualOptionSelected\"\n                    data-test-id=\"dateTime-input-ntpServer1\"\n                    @blur=\"v$.form.ntp.firstAddress.$touch()\"\n                  />\n                  <b-form-invalid-feedback role=\"alert\">\n                    <div v-if=\"v$.form.ntp.firstAddress.required.$invalid\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </div>\n                  </b-form-invalid-feedback>\n                </b-input-group>\n              </b-form-group>\n            </b-col>\n            <b-col sm=\"6\" lg=\"4\" xl=\"3\">\n              <b-form-group\n                :label=\"$t('pageDateTime.form.ntpServers.server2')\"\n                label-for=\"input-ntp-2\"\n              >\n                <b-input-group>\n                  <b-form-input\n                    id=\"input-ntp-2\"\n                    v-model=\"form.ntp.secondAddress\"\n                    :disabled=\"manualOptionSelected\"\n                    data-test-id=\"dateTime-input-ntpServer2\"\n                  />\n                </b-input-group>\n              </b-form-group>\n            </b-col>\n            <b-col sm=\"6\" lg=\"4\" xl=\"3\">\n              <b-form-group\n                :label=\"$t('pageDateTime.form.ntpServers.server3')\"\n                label-for=\"input-ntp-3\"\n              >\n                <b-input-group>\n                  <b-form-input\n                    id=\"input-ntp-3\"\n                    v-model=\"form.ntp.thirdAddress\"\n                    :disabled=\"manualOptionSelected\"\n                    data-test-id=\"dateTime-input-ntpServer3\"\n                  />\n                </b-input-group>\n              </b-form-group>\n            </b-col>\n          </b-row>\n          <b-button\n            variant=\"primary\"\n            type=\"submit\"\n            data-test-id=\"dateTime-button-saveSettings\"\n          >\n            {{ $t('global.action.saveSettings') }}\n          </b-button>\n        </b-form-group>\n      </b-form>\n    </page-section>\n  </b-container>\n</template>\n\n<script>\nimport Alert from '@/components/Global/Alert';\nimport IconCalendar from '@carbon/icons-vue/es/calendar/20';\nimport PageTitle from '@/components/Global/PageTitle';\nimport PageSection from '@/components/Global/PageSection';\n\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport LoadingBarMixin, { loading } from '@/components/Mixins/LoadingBarMixin';\nimport LocalTimezoneLabelMixin from '@/components/Mixins/LocalTimezoneLabelMixin';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\n\nimport { mapState } from 'vuex';\nimport { requiredIf } from '@vuelidate/validators';\nimport { helpers } from 'vuelidate/lib/validators';\nimport { useI18n } from 'vue-i18n';\n\nconst isoDateRegex = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$)/;\nconst isoTimeRegex = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;\n\nexport default {\n  name: 'DateTime',\n  components: { Alert, IconCalendar, PageTitle, PageSection },\n  mixins: [\n    BVToastMixin,\n    LoadingBarMixin,\n    LocalTimezoneLabelMixin,\n    VuelidateMixin,\n  ],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      locale: this.$store.getters['global/languagePreference'],\n      form: {\n        configurationSelected: 'manual',\n        manual: {\n          date: '',\n          time: '',\n        },\n        ntp: { firstAddress: '', secondAddress: '', thirdAddress: '' },\n      },\n      loading,\n    };\n  },\n  validations() {\n    return {\n      form: {\n        manual: {\n          date: {\n            required: requiredIf(function () {\n              return this.form.configurationSelected === 'manual';\n            }),\n            pattern: helpers.regex('pattern', isoDateRegex),\n          },\n          time: {\n            required: requiredIf(function () {\n              return this.form.configurationSelected === 'manual';\n            }),\n            pattern: helpers.regex('pattern', isoTimeRegex),\n          },\n        },\n        ntp: {\n          firstAddress: {\n            required: requiredIf(function () {\n              return this.form.configurationSelected === 'ntp';\n            }),\n          },\n        },\n      },\n    };\n  },\n  computed: {\n    ...mapState('dateTime', ['ntpServers', 'isNtpProtocolEnabled']),\n    bmcTime() {\n      return this.$store.getters['global/bmcTime'];\n    },\n    ntpOptionSelected() {\n      return this.form.configurationSelected === 'ntp';\n    },\n    manualOptionSelected() {\n      return this.form.configurationSelected === 'manual';\n    },\n    isUtcDisplay() {\n      return this.$store.getters['global/isUtcDisplay'];\n    },\n    timezone() {\n      if (this.isUtcDisplay) {\n        return 'UTC';\n      }\n      return this.localOffset();\n    },\n  },\n  watch: {\n    ntpServers() {\n      this.setNtpValues();\n    },\n    manualDate() {\n      this.emitChange();\n    },\n    bmcTime() {\n      this.form.manual.date = this.$filters.formatDate(\n        this.$store.getters['global/bmcTime'],\n      );\n      this.form.manual.time = this.$filters\n        .formatTime(this.$store.getters['global/bmcTime'])\n        .slice(0, 5);\n    },\n  },\n  created() {\n    this.startLoader();\n    this.setNtpValues();\n    Promise.all([\n      this.$store.dispatch('global/getBmcTime'),\n      this.$store.dispatch('dateTime/getNtpData'),\n    ]).finally(() => this.endLoader());\n  },\n  methods: {\n    emitChange() {\n      if (this.v$.$invalid) return;\n      this.v$.$reset(); //reset to re-validate on blur\n      this.$emit('change', {\n        manualDate: this.manualDate ? new Date(this.manualDate) : null,\n      });\n    },\n    setNtpValues() {\n      this.form.configurationSelected = this.isNtpProtocolEnabled\n        ? 'ntp'\n        : 'manual';\n      [\n        this.form.ntp.firstAddress = '',\n        this.form.ntp.secondAddress = '',\n        this.form.ntp.thirdAddress = '',\n      ] = [this.ntpServers[0], this.ntpServers[1], this.ntpServers[2]];\n    },\n    submitForm() {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n      this.startLoader();\n\n      let dateTimeForm = {};\n      let isNTPEnabled = this.form.configurationSelected === 'ntp';\n\n      if (!isNTPEnabled) {\n        const isUtcDisplay = this.$store.getters['global/isUtcDisplay'];\n        let date;\n\n        dateTimeForm.ntpProtocolEnabled = false;\n\n        if (isUtcDisplay) {\n          // Create UTC Date\n          date = this.getUtcDate(this.form.manual.date, this.form.manual.time);\n        } else {\n          // Create local Date\n          date = new Date(`${this.form.manual.date} ${this.form.manual.time}`);\n        }\n\n        dateTimeForm.updatedDateTime = date.toISOString();\n      } else {\n        dateTimeForm.ntpProtocolEnabled = true;\n\n        const ntpArray = [\n          this.form.ntp.firstAddress,\n          this.form.ntp.secondAddress,\n          this.form.ntp.thirdAddress,\n        ];\n\n        // Filter the ntpArray to remove empty strings,\n        // per Redfish spec there should be no empty strings or null on the ntp array.\n        const ntpArrayFiltered = ntpArray.filter((x) => x);\n\n        dateTimeForm.ntpServersArray = [...ntpArrayFiltered];\n\n        [this.ntpServers[0], this.ntpServers[1], this.ntpServers[2]] = [\n          ...dateTimeForm.ntpServersArray,\n        ];\n\n        this.setNtpValues();\n      }\n\n      this.$store\n        .dispatch('dateTime/updateDateTime', dateTimeForm)\n        .then((success) => {\n          this.successToast(success);\n          if (!isNTPEnabled) return;\n          // Shift address up if second address is empty\n          // to avoid refreshing after delay when updating NTP\n          if (!this.form.ntp.secondAddress && this.form.ntp.thirdAddres) {\n            this.form.ntp.secondAddress = this.form.ntp.thirdAddres;\n            this.form.ntp.thirdAddress = '';\n          }\n        })\n        .then(() => {\n          this.$store.dispatch('global/getBmcTime');\n        })\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => {\n          this.v$.form.$reset();\n          this.endLoader();\n        });\n    },\n    getUtcDate(date, time) {\n      // Split user input string values to create\n      // a UTC Date object\n      const datesArray = date.split('-');\n      const timeArray = time.split(':');\n      let utcDate = Date.UTC(\n        datesArray[0], // User input year\n        //UTC expects zero-index month value 0-11 (January-December)\n        //for reference https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC#Parameters\n        parseInt(datesArray[1]) - 1, // User input month\n        datesArray[2], // User input day\n        timeArray[0], // User input hour\n        timeArray[1], // User input minute\n      );\n      return new Date(utcDate);\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}