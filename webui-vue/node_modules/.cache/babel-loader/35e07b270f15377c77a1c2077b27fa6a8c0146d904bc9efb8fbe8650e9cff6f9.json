{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\n\n/**\n * Watch for serverStatus changes in GlobalStore module\n * to set isOperationInProgress state\n * Stop watching status changes and resolve Promise when\n * serverStatus value matches passed argument or after 5 minutes\n * @param {string} serverStatus\n * @returns {Promise}\n */\nconst checkForServerStatus = function (serverStatus) {\n  return new Promise(resolve => {\n    const timer = setTimeout(() => {\n      resolve();\n      unwatch();\n    }, 300000 /*5mins*/);\n    const unwatch = this.watch(state => state.global.serverStatus, value => {\n      if (value === serverStatus) {\n        resolve();\n        unwatch();\n        clearTimeout(timer);\n      }\n    });\n  });\n};\nconst ControlStore = {\n  namespaced: true,\n  state: {\n    isOperationInProgress: false,\n    lastPowerOperationTime: null,\n    lastBmcRebootTime: null\n  },\n  getters: {\n    isOperationInProgress: state => state.isOperationInProgress,\n    lastPowerOperationTime: state => state.lastPowerOperationTime,\n    lastBmcRebootTime: state => state.lastBmcRebootTime\n  },\n  mutations: {\n    setOperationInProgress: (state, inProgress) => state.isOperationInProgress = inProgress,\n    setLastPowerOperationTime: (state, lastPowerOperationTime) => state.lastPowerOperationTime = lastPowerOperationTime,\n    setLastBmcRebootTime: (state, lastBmcRebootTime) => state.lastBmcRebootTime = lastBmcRebootTime\n  },\n  actions: {\n    async getLastPowerOperationTime({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getSystemPath')}`).then(response => {\n        const lastReset = response.data.LastResetTime;\n        if (lastReset) {\n          const lastPowerOperationTime = new Date(lastReset);\n          commit('setLastPowerOperationTime', lastPowerOperationTime);\n        }\n      }).catch(error => console.log(error));\n    },\n    async getLastBmcRebootTime({\n      commit\n    }) {\n      return api.get(`${await this.dispatch('global/getBmcPath')}`).then(response => {\n        const lastBmcReset = response.data.LastResetTime;\n        const lastBmcRebootTime = new Date(lastBmcReset);\n        commit('setLastBmcRebootTime', lastBmcRebootTime);\n      }).catch(error => console.log(error));\n    },\n    async rebootBmc() {\n      const data = {\n        ResetType: 'GracefulRestart'\n      };\n      return await api.post(`${await this.dispatch('global/getBmcPath')}/Actions/Manager.Reset`, data).then(() => i18n.global.t('pageRebootBmc.toast.successRebootStart')).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageRebootBmc.toast.errorRebootStart'));\n      });\n    },\n    async serverPowerOn({\n      dispatch,\n      commit\n    }) {\n      const data = {\n        ResetType: 'On'\n      };\n      dispatch('serverPowerChange', data);\n      await checkForServerStatus.bind(this, 'on')();\n      commit('setOperationInProgress', false);\n      dispatch('getLastPowerOperationTime');\n    },\n    async serverSoftReboot({\n      dispatch,\n      commit\n    }) {\n      const data = {\n        ResetType: 'GracefulRestart'\n      };\n      dispatch('serverPowerChange', data);\n      await checkForServerStatus.bind(this, 'on')();\n      commit('setOperationInProgress', false);\n      dispatch('getLastPowerOperationTime');\n    },\n    async serverHardReboot({\n      dispatch,\n      commit\n    }) {\n      const data = {\n        ResetType: 'ForceRestart'\n      };\n      dispatch('serverPowerChange', data);\n      await checkForServerStatus.bind(this, 'on')();\n      commit('setOperationInProgress', false);\n      dispatch('getLastPowerOperationTime');\n    },\n    async serverSoftPowerOff({\n      dispatch,\n      commit\n    }) {\n      const data = {\n        ResetType: 'GracefulShutdown'\n      };\n      dispatch('serverPowerChange', data);\n      await checkForServerStatus.bind(this, 'off')();\n      commit('setOperationInProgress', false);\n      dispatch('getLastPowerOperationTime');\n    },\n    async serverHardPowerOff({\n      dispatch,\n      commit\n    }) {\n      const data = {\n        ResetType: 'ForceOff'\n      };\n      dispatch('serverPowerChange', data);\n      await checkForServerStatus.bind(this, 'off')();\n      commit('setOperationInProgress', false);\n      dispatch('getLastPowerOperationTime');\n    },\n    async serverPowerChange({\n      commit\n    }, data) {\n      commit('setOperationInProgress', true);\n      api.post(`${await this.dispatch('global/getSystemPath')}/Actions/ComputerSystem.Reset`, data).catch(error => {\n        console.log(error);\n        commit('setOperationInProgress', false);\n      });\n    }\n  }\n};\nexport default ControlStore;","map":{"version":3,"names":["api","i18n","checkForServerStatus","serverStatus","Promise","resolve","timer","setTimeout","unwatch","watch","state","global","value","clearTimeout","ControlStore","namespaced","isOperationInProgress","lastPowerOperationTime","lastBmcRebootTime","getters","mutations","setOperationInProgress","inProgress","setLastPowerOperationTime","setLastBmcRebootTime","actions","getLastPowerOperationTime","commit","get","dispatch","then","response","lastReset","data","LastResetTime","Date","catch","error","console","log","getLastBmcRebootTime","lastBmcReset","rebootBmc","ResetType","post","t","Error","serverPowerOn","bind","serverSoftReboot","serverHardReboot","serverSoftPowerOff","serverHardPowerOff","serverPowerChange"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/Operations/ControlStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\n/**\n * Watch for serverStatus changes in GlobalStore module\n * to set isOperationInProgress state\n * Stop watching status changes and resolve Promise when\n * serverStatus value matches passed argument or after 5 minutes\n * @param {string} serverStatus\n * @returns {Promise}\n */\nconst checkForServerStatus = function (serverStatus) {\n  return new Promise((resolve) => {\n    const timer = setTimeout(() => {\n      resolve();\n      unwatch();\n    }, 300000 /*5mins*/);\n    const unwatch = this.watch(\n      (state) => state.global.serverStatus,\n      (value) => {\n        if (value === serverStatus) {\n          resolve();\n          unwatch();\n          clearTimeout(timer);\n        }\n      },\n    );\n  });\n};\n\nconst ControlStore = {\n  namespaced: true,\n  state: {\n    isOperationInProgress: false,\n    lastPowerOperationTime: null,\n    lastBmcRebootTime: null,\n  },\n  getters: {\n    isOperationInProgress: (state) => state.isOperationInProgress,\n    lastPowerOperationTime: (state) => state.lastPowerOperationTime,\n    lastBmcRebootTime: (state) => state.lastBmcRebootTime,\n  },\n  mutations: {\n    setOperationInProgress: (state, inProgress) =>\n      (state.isOperationInProgress = inProgress),\n    setLastPowerOperationTime: (state, lastPowerOperationTime) =>\n      (state.lastPowerOperationTime = lastPowerOperationTime),\n    setLastBmcRebootTime: (state, lastBmcRebootTime) =>\n      (state.lastBmcRebootTime = lastBmcRebootTime),\n  },\n  actions: {\n    async getLastPowerOperationTime({ commit }) {\n      return await api\n        .get(`${await this.dispatch('global/getSystemPath')}`)\n        .then((response) => {\n          const lastReset = response.data.LastResetTime;\n          if (lastReset) {\n            const lastPowerOperationTime = new Date(lastReset);\n            commit('setLastPowerOperationTime', lastPowerOperationTime);\n          }\n        })\n        .catch((error) => console.log(error));\n    },\n    async getLastBmcRebootTime({ commit }) {\n      return api\n        .get(`${await this.dispatch('global/getBmcPath')}`)\n        .then((response) => {\n          const lastBmcReset = response.data.LastResetTime;\n          const lastBmcRebootTime = new Date(lastBmcReset);\n          commit('setLastBmcRebootTime', lastBmcRebootTime);\n        })\n        .catch((error) => console.log(error));\n    },\n    async rebootBmc() {\n      const data = { ResetType: 'GracefulRestart' };\n      return await api\n        .post(\n          `${await this.dispatch('global/getBmcPath')}/Actions/Manager.Reset`,\n          data,\n        )\n        .then(() => i18n.global.t('pageRebootBmc.toast.successRebootStart'))\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageRebootBmc.toast.errorRebootStart'),\n          );\n        });\n    },\n    async serverPowerOn({ dispatch, commit }) {\n      const data = { ResetType: 'On' };\n      dispatch('serverPowerChange', data);\n      await checkForServerStatus.bind(this, 'on')();\n      commit('setOperationInProgress', false);\n      dispatch('getLastPowerOperationTime');\n    },\n    async serverSoftReboot({ dispatch, commit }) {\n      const data = { ResetType: 'GracefulRestart' };\n      dispatch('serverPowerChange', data);\n      await checkForServerStatus.bind(this, 'on')();\n      commit('setOperationInProgress', false);\n      dispatch('getLastPowerOperationTime');\n    },\n    async serverHardReboot({ dispatch, commit }) {\n      const data = { ResetType: 'ForceRestart' };\n      dispatch('serverPowerChange', data);\n      await checkForServerStatus.bind(this, 'on')();\n      commit('setOperationInProgress', false);\n      dispatch('getLastPowerOperationTime');\n    },\n    async serverSoftPowerOff({ dispatch, commit }) {\n      const data = { ResetType: 'GracefulShutdown' };\n      dispatch('serverPowerChange', data);\n      await checkForServerStatus.bind(this, 'off')();\n      commit('setOperationInProgress', false);\n      dispatch('getLastPowerOperationTime');\n    },\n    async serverHardPowerOff({ dispatch, commit }) {\n      const data = { ResetType: 'ForceOff' };\n      dispatch('serverPowerChange', data);\n      await checkForServerStatus.bind(this, 'off')();\n      commit('setOperationInProgress', false);\n      dispatch('getLastPowerOperationTime');\n    },\n    async serverPowerChange({ commit }, data) {\n      commit('setOperationInProgress', true);\n      api\n        .post(\n          `${await this.dispatch('global/getSystemPath')}/Actions/ComputerSystem.Reset`,\n          data,\n        )\n        .catch((error) => {\n          console.log(error);\n          commit('setOperationInProgress', false);\n        });\n    },\n  },\n};\n\nexport default ControlStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}