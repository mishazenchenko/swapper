{"ast":null,"code":"import { mapState } from 'vuex';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport { useI18n } from 'vue-i18n';\nimport { useVuelidate } from '@vuelidate/core';\nexport default {\n  name: 'BootSettings',\n  mixins: [BVToastMixin, LoadingBarMixin],\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        bootOption: this.$store.getters['serverBootSettings/bootSource'],\n        oneTimeBoot: this.$store.getters['serverBootSettings/overrideEnabled'],\n        tpmPolicyOn: this.$store.getters['serverBootSettings/tpmEnabled']\n      }\n    };\n  },\n  computed: {\n    ...mapState('serverBootSettings', ['bootSourceOptions', 'bootSource', 'overrideEnabled', 'tpmEnabled'])\n  },\n  watch: {\n    bootSource: function (value) {\n      this.form.bootOption = value;\n    },\n    overrideEnabled: function (value) {\n      this.form.oneTimeBoot = value;\n    },\n    tpmEnabled: function (value) {\n      this.form.tpmPolicyOn = value;\n    }\n  },\n  validations: {\n    // Empty validations to leverage vuelidate form states\n    // to check for changed values\n    form: {\n      bootOption: {},\n      oneTimeBoot: {},\n      tpmPolicyOn: {}\n    }\n  },\n  created() {\n    this.$store.dispatch('serverBootSettings/getTpmPolicy').finally(() => this.$root.$emit('server-power-operations-boot-settings-complete'));\n  },\n  methods: {\n    handleSubmit() {\n      this.startLoader();\n      const tpmPolicyChanged = this.v$.form.tpmPolicyOn.$dirty;\n      let settings;\n      let bootSource = this.form.bootOption;\n      let overrideEnabled = this.form.oneTimeBoot;\n      let tpmEnabled = null;\n      if (tpmPolicyChanged) tpmEnabled = this.form.tpmPolicyOn;\n      settings = {\n        bootSource,\n        overrideEnabled,\n        tpmEnabled\n      };\n      this.$store.dispatch('serverBootSettings/saveSettings', settings).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => {\n        this.v$.form.$reset();\n        this.endLoader();\n      });\n    },\n    onChangeSelect(selectedOption) {\n      this.v$.form.bootOption.$touch();\n      // Disable one time boot if selected boot option is 'None'\n      if (selectedOption === 'None') this.form.oneTimeBoot = false;\n    }\n  }\n};","map":{"version":3,"names":["mapState","BVToastMixin","LoadingBarMixin","useI18n","useVuelidate","name","mixins","setup","v$","data","$t","t","form","bootOption","$store","getters","oneTimeBoot","tpmPolicyOn","computed","watch","bootSource","value","overrideEnabled","tpmEnabled","validations","created","dispatch","finally","$root","$emit","methods","handleSubmit","startLoader","tpmPolicyChanged","$dirty","settings","then","message","successToast","catch","errorToast","$reset","endLoader","onChangeSelect","selectedOption","$touch"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Operations/ServerPowerOperations/BootSettings.vue"],"sourcesContent":["<template>\n  <div class=\"form-background p-3\">\n    <b-form novalidate @submit.prevent=\"handleSubmit\">\n      <b-form-group\n        :label=\"\n          $t('pageServerPowerOperations.bootSettings.bootSettingsOverride')\n        \"\n        label-for=\"boot-option\"\n        class=\"mb-3\"\n      >\n        <b-form-select\n          id=\"boot-option\"\n          v-model=\"form.bootOption\"\n          :disabled=\"bootSourceOptions.length === 0\"\n          :options=\"bootSourceOptions\"\n          @change=\"onChangeSelect\"\n        >\n        </b-form-select>\n      </b-form-group>\n      <b-form-checkbox\n        v-model=\"form.oneTimeBoot\"\n        class=\"mb-4\"\n        :disabled=\"form.bootOption === 'None'\"\n        @change=\"v$.form.oneTimeBoot.$touch()\"\n      >\n        {{ $t('pageServerPowerOperations.bootSettings.enableOneTimeBoot') }}\n      </b-form-checkbox>\n      <b-form-group\n        :label=\"$t('pageServerPowerOperations.bootSettings.tpmRequiredPolicy')\"\n      >\n        <b-form-text id=\"tpm-required-policy-help-block\">\n          {{\n            $t('pageServerPowerOperations.bootSettings.tpmRequiredPolicyHelper')\n          }}\n        </b-form-text>\n        <b-form-checkbox\n          id=\"tpm-required-policy\"\n          v-model=\"form.tpmPolicyOn\"\n          aria-describedby=\"tpm-required-policy-help-block\"\n          @change=\"v$.form.tpmPolicyOn.$touch()\"\n        >\n          {{ $t('global.status.enabled') }}\n        </b-form-checkbox>\n      </b-form-group>\n      <b-button variant=\"primary\" type=\"submit\" class=\"mb-3\">\n        {{ $t('global.action.save') }}\n      </b-button>\n    </b-form>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport { useI18n } from 'vue-i18n';\nimport { useVuelidate } from '@vuelidate/core';\n\nexport default {\n  name: 'BootSettings',\n  mixins: [BVToastMixin, LoadingBarMixin],\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        bootOption: this.$store.getters['serverBootSettings/bootSource'],\n        oneTimeBoot: this.$store.getters['serverBootSettings/overrideEnabled'],\n        tpmPolicyOn: this.$store.getters['serverBootSettings/tpmEnabled'],\n      },\n    };\n  },\n  computed: {\n    ...mapState('serverBootSettings', [\n      'bootSourceOptions',\n      'bootSource',\n      'overrideEnabled',\n      'tpmEnabled',\n    ]),\n  },\n  watch: {\n    bootSource: function (value) {\n      this.form.bootOption = value;\n    },\n    overrideEnabled: function (value) {\n      this.form.oneTimeBoot = value;\n    },\n    tpmEnabled: function (value) {\n      this.form.tpmPolicyOn = value;\n    },\n  },\n  validations: {\n    // Empty validations to leverage vuelidate form states\n    // to check for changed values\n    form: {\n      bootOption: {},\n      oneTimeBoot: {},\n      tpmPolicyOn: {},\n    },\n  },\n  created() {\n    this.$store\n      .dispatch('serverBootSettings/getTpmPolicy')\n      .finally(() =>\n        this.$root.$emit('server-power-operations-boot-settings-complete'),\n      );\n  },\n  methods: {\n    handleSubmit() {\n      this.startLoader();\n      const tpmPolicyChanged = this.v$.form.tpmPolicyOn.$dirty;\n      let settings;\n      let bootSource = this.form.bootOption;\n      let overrideEnabled = this.form.oneTimeBoot;\n      let tpmEnabled = null;\n\n      if (tpmPolicyChanged) tpmEnabled = this.form.tpmPolicyOn;\n      settings = { bootSource, overrideEnabled, tpmEnabled };\n\n      this.$store\n        .dispatch('serverBootSettings/saveSettings', settings)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => {\n          this.v$.form.$reset();\n          this.endLoader();\n        });\n    },\n    onChangeSelect(selectedOption) {\n      this.v$.form.bootOption.$touch();\n      // Disable one time boot if selected boot option is 'None'\n      if (selectedOption === 'None') this.form.oneTimeBoot = false;\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}