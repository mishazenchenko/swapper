{"ast":null,"code":"import IconCalendar from '@carbon/icons-vue/es/calendar/20';\nimport { helpers } from 'vuelidate/lib/validators';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { useI18n } from 'vue-i18n';\nconst isoDateRegex = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\nexport default {\n  components: {\n    IconCalendar\n  },\n  mixins: [VuelidateMixin],\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      fromDate: '',\n      toDate: '',\n      offsetToDate: '',\n      locale: this.$store.getters['global/languagePreference']\n    };\n  },\n  validations() {\n    return {\n      fromDate: {\n        pattern: helpers.regex('pattern', isoDateRegex),\n        maxDate: value => {\n          if (!this.toDate) return true;\n          const date = new Date(value);\n          const maxDate = new Date(this.toDate);\n          if (date.getTime() > maxDate.getTime()) return false;\n          return true;\n        }\n      },\n      toDate: {\n        pattern: helpers.regex('pattern', isoDateRegex),\n        minDate: value => {\n          if (!this.fromDate) return true;\n          const date = new Date(value);\n          const minDate = new Date(this.fromDate);\n          if (date.getTime() < minDate.getTime()) return false;\n          return true;\n        }\n      }\n    };\n  },\n  watch: {\n    fromDate() {\n      this.emitChange();\n    },\n    toDate(newVal) {\n      // Offset the end date to end of day to make sure all\n      // entries from selected end date are included in filter\n      this.offsetToDate = new Date(newVal).setUTCHours(23, 59, 59, 999);\n      this.emitChange();\n    }\n  },\n  methods: {\n    emitChange() {\n      if (this.v$.$invalid) return;\n      this.v$.$reset(); //reset to re-validate on blur\n      this.$emit('change', {\n        fromDate: this.fromDate ? new Date(this.fromDate) : null,\n        toDate: this.toDate ? new Date(this.offsetToDate) : null\n      });\n    }\n  }\n};","map":{"version":3,"names":["IconCalendar","helpers","VuelidateMixin","useVuelidate","useI18n","isoDateRegex","components","mixins","setup","v$","data","$t","t","fromDate","toDate","offsetToDate","locale","$store","getters","validations","pattern","regex","maxDate","value","date","Date","getTime","minDate","watch","emitChange","newVal","setUTCHours","methods","$invalid","$reset","$emit"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/components/Global/TableDateFilter.vue"],"sourcesContent":["<template>\n  <b-row class=\"mb-2\">\n    <b-col class=\"d-sm-flex\">\n      <b-form-group\n        :label=\"$t('global.table.fromDate')\"\n        label-for=\"input-from-date\"\n        class=\"mr-3 my-0 w-100\"\n      >\n        <b-input-group>\n          <b-form-input\n            id=\"input-from-date\"\n            v-model=\"fromDate\"\n            placeholder=\"YYYY-MM-DD\"\n            :state=\"getValidationState(v$.fromDate)\"\n            class=\"form-control-with-button mb-3 mb-md-0\"\n            @blur=\"v$.fromDate.$touch()\"\n          />\n          <b-form-invalid-feedback role=\"alert\">\n            <template v-if=\"v$.fromDate.pattern.$invalid\">\n              {{ $t('global.form.invalidFormat') }}\n            </template>\n            <template v-if=\"v$.fromDate.maxDate.$invalid\">\n              {{ $t('global.form.dateMustBeBefore', { date: toDate }) }}\n            </template>\n          </b-form-invalid-feedback>\n          <b-form-datepicker\n            v-model=\"fromDate\"\n            class=\"btn-datepicker btn-icon-only\"\n            button-only\n            right\n            :max=\"toDate\"\n            :hide-header=\"true\"\n            :locale=\"locale\"\n            :label-help=\"\n              $t('global.calendar.useCursorKeysToNavigateCalendarDates')\n            \"\n            :title=\"$t('global.calendar.selectDate')\"\n            button-variant=\"link\"\n            aria-controls=\"input-from-date\"\n          >\n            <template #button-content>\n              <icon-calendar />\n              <span class=\"sr-only\">\n                {{ $t('global.calendar.selectDate') }}\n              </span>\n            </template>\n          </b-form-datepicker>\n        </b-input-group>\n      </b-form-group>\n      <b-form-group\n        :label=\"$t('global.table.toDate')\"\n        label-for=\"input-to-date\"\n        class=\"my-0 w-100\"\n      >\n        <b-input-group>\n          <b-form-input\n            id=\"input-to-date\"\n            v-model=\"toDate\"\n            placeholder=\"YYYY-MM-DD\"\n            :state=\"getValidationState(v$.toDate)\"\n            class=\"form-control-with-button\"\n            @blur=\"v$.toDate.$touch()\"\n          />\n          <b-form-invalid-feedback role=\"alert\">\n            <template v-if=\"v$.toDate.pattern.$invalid\">\n              {{ $t('global.form.invalidFormat') }}\n            </template>\n            <template v-if=\"v$.toDate.minDate.$invalid\">\n              {{ $t('global.form.dateMustBeAfter', { date: fromDate }) }}\n            </template>\n          </b-form-invalid-feedback>\n          <b-form-datepicker\n            v-model=\"toDate\"\n            class=\"btn-datepicker btn-icon-only\"\n            button-only\n            right\n            :min=\"fromDate\"\n            :hide-header=\"true\"\n            :locale=\"locale\"\n            :label-help=\"\n              $t('global.calendar.useCursorKeysToNavigateCalendarDates')\n            \"\n            :title=\"$t('global.calendar.selectDate')\"\n            button-variant=\"link\"\n            aria-controls=\"input-to-date\"\n          >\n            <template #button-content>\n              <icon-calendar />\n              <span class=\"sr-only\">\n                {{ $t('global.calendar.selectDate') }}\n              </span>\n            </template>\n          </b-form-datepicker>\n        </b-input-group>\n      </b-form-group>\n    </b-col>\n  </b-row>\n</template>\n\n<script>\nimport IconCalendar from '@carbon/icons-vue/es/calendar/20';\nimport { helpers } from 'vuelidate/lib/validators';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { useI18n } from 'vue-i18n';\n\nconst isoDateRegex = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\n\nexport default {\n  components: { IconCalendar },\n  mixins: [VuelidateMixin],\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      fromDate: '',\n      toDate: '',\n      offsetToDate: '',\n      locale: this.$store.getters['global/languagePreference'],\n    };\n  },\n  validations() {\n    return {\n      fromDate: {\n        pattern: helpers.regex('pattern', isoDateRegex),\n        maxDate: (value) => {\n          if (!this.toDate) return true;\n          const date = new Date(value);\n          const maxDate = new Date(this.toDate);\n          if (date.getTime() > maxDate.getTime()) return false;\n          return true;\n        },\n      },\n      toDate: {\n        pattern: helpers.regex('pattern', isoDateRegex),\n        minDate: (value) => {\n          if (!this.fromDate) return true;\n          const date = new Date(value);\n          const minDate = new Date(this.fromDate);\n          if (date.getTime() < minDate.getTime()) return false;\n          return true;\n        },\n      },\n    };\n  },\n  watch: {\n    fromDate() {\n      this.emitChange();\n    },\n    toDate(newVal) {\n      // Offset the end date to end of day to make sure all\n      // entries from selected end date are included in filter\n      this.offsetToDate = new Date(newVal).setUTCHours(23, 59, 59, 999);\n      this.emitChange();\n    },\n  },\n  methods: {\n    emitChange() {\n      if (this.v$.$invalid) return;\n      this.v$.$reset(); //reset to re-validate on blur\n      this.$emit('change', {\n        fromDate: this.fromDate ? new Date(this.fromDate) : null,\n        toDate: this.toDate ? new Date(this.offsetToDate) : null,\n      });\n    },\n  },\n};\n</script>\n"],"mappings":"AAoGA,OAAOA,YAAW,MAAO,kCAAkC;AAC3D,SAASC,OAAM,QAAS,0BAA0B;AAClD,OAAOC,cAAa,MAAO,uCAAuC;AAClE,SAASC,YAAW,QAAS,iBAAiB;AAC9C,SAASC,OAAM,QAAS,UAAU;AAElC,MAAMC,YAAW,GAAI,mDAAmD;AAExE,eAAe;EACbC,UAAU,EAAE;IAAEN;EAAa,CAAC;EAC5BO,MAAM,EAAE,CAACL,cAAc,CAAC;EACxBM,KAAKA,CAAA,EAAG;IACN,OAAO;MACLC,EAAE,EAAEN,YAAY,CAAC;IACnB,CAAC;EACH,CAAC;EACDO,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,EAAE,EAAEP,OAAO,CAAC,CAAC,CAACQ,CAAC;MACfC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,EAAE;MACVC,YAAY,EAAE,EAAE;MAChBC,MAAM,EAAE,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,2BAA2B;IACzD,CAAC;EACH,CAAC;EACDC,WAAWA,CAAA,EAAG;IACZ,OAAO;MACLN,QAAQ,EAAE;QACRO,OAAO,EAAEnB,OAAO,CAACoB,KAAK,CAAC,SAAS,EAAEhB,YAAY,CAAC;QAC/CiB,OAAO,EAAGC,KAAK,IAAK;UAClB,IAAI,CAAC,IAAI,CAACT,MAAM,EAAE,OAAO,IAAI;UAC7B,MAAMU,IAAG,GAAI,IAAIC,IAAI,CAACF,KAAK,CAAC;UAC5B,MAAMD,OAAM,GAAI,IAAIG,IAAI,CAAC,IAAI,CAACX,MAAM,CAAC;UACrC,IAAIU,IAAI,CAACE,OAAO,CAAC,IAAIJ,OAAO,CAACI,OAAO,CAAC,CAAC,EAAE,OAAO,KAAK;UACpD,OAAO,IAAI;QACb;MACF,CAAC;MACDZ,MAAM,EAAE;QACNM,OAAO,EAAEnB,OAAO,CAACoB,KAAK,CAAC,SAAS,EAAEhB,YAAY,CAAC;QAC/CsB,OAAO,EAAGJ,KAAK,IAAK;UAClB,IAAI,CAAC,IAAI,CAACV,QAAQ,EAAE,OAAO,IAAI;UAC/B,MAAMW,IAAG,GAAI,IAAIC,IAAI,CAACF,KAAK,CAAC;UAC5B,MAAMI,OAAM,GAAI,IAAIF,IAAI,CAAC,IAAI,CAACZ,QAAQ,CAAC;UACvC,IAAIW,IAAI,CAACE,OAAO,CAAC,IAAIC,OAAO,CAACD,OAAO,CAAC,CAAC,EAAE,OAAO,KAAK;UACpD,OAAO,IAAI;QACb;MACF;IACF,CAAC;EACH,CAAC;EACDE,KAAK,EAAE;IACLf,QAAQA,CAAA,EAAG;MACT,IAAI,CAACgB,UAAU,CAAC,CAAC;IACnB,CAAC;IACDf,MAAMA,CAACgB,MAAM,EAAE;MACb;MACA;MACA,IAAI,CAACf,YAAW,GAAI,IAAIU,IAAI,CAACK,MAAM,CAAC,CAACC,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;MACjE,IAAI,CAACF,UAAU,CAAC,CAAC;IACnB;EACF,CAAC;EACDG,OAAO,EAAE;IACPH,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACpB,EAAE,CAACwB,QAAQ,EAAE;MACtB,IAAI,CAACxB,EAAE,CAACyB,MAAM,CAAC,CAAC,EAAE;MAClB,IAAI,CAACC,KAAK,CAAC,QAAQ,EAAE;QACnBtB,QAAQ,EAAE,IAAI,CAACA,QAAO,GAAI,IAAIY,IAAI,CAAC,IAAI,CAACZ,QAAQ,IAAI,IAAI;QACxDC,MAAM,EAAE,IAAI,CAACA,MAAK,GAAI,IAAIW,IAAI,CAAC,IAAI,CAACV,YAAY,IAAI;MACtD,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}