{"ast":null,"code":"import api from '@/store/api';\nconst FanStore = {\n  namespaced: true,\n  state: {\n    fans: []\n  },\n  getters: {\n    fans: state => state.fans\n  },\n  mutations: {\n    setFanInfo: (state, data) => {\n      state.fans = data.map(fan => {\n        const {\n          Id,\n          Name,\n          PartNumber,\n          SerialNumber,\n          SpeedPercent = {},\n          Status = {}\n        } = fan;\n        return {\n          id: Id,\n          health: Status.Health,\n          name: Name,\n          speed: SpeedPercent.Reading,\n          statusState: Status.State,\n          healthRollup: Status.HealthRollup,\n          partNumber: PartNumber,\n          serialNumber: SerialNumber\n        };\n      });\n    }\n  },\n  actions: {\n    async getChassisCollection() {\n      return await api.get('/redfish/v1/Chassis').then(({\n        data: {\n          Members\n        }\n      }) => api.all(Members.map(member => api.get(member['@odata.id']).then(response => response.data)))).catch(error => console.log(error));\n    },\n    async getFanInfo({\n      dispatch,\n      commit\n    }) {\n      const collection = await dispatch('getChassisCollection');\n      if (!collection || collection.length === 0) return;\n      return await api.all(collection.map(chassis => dispatch('getChassisFans', chassis))).then(fansFromChassis => commit('setFanInfo', fansFromChassis.flat())).catch(error => console.log(error));\n    },\n    async getChassisFans(_, chassis) {\n      return await api.get(chassis.ThermalSubsystem['@odata.id']).then(response => {\n        return api.get(`${response.data.Fans['@odata.id']}`);\n      }).then(({\n        data: {\n          Members\n        }\n      }) => {\n        const promises = Members.map(member => api.get(member['@odata.id']));\n        return api.all(promises);\n      }).then(response => {\n        const data = response.map(({\n          data\n        }) => data);\n        return data;\n      }).catch(error => console.log(error));\n    }\n  }\n};\nexport default FanStore;","map":{"version":3,"names":["api","FanStore","namespaced","state","fans","getters","mutations","setFanInfo","data","map","fan","Id","Name","PartNumber","SerialNumber","SpeedPercent","Status","id","health","Health","name","speed","Reading","statusState","State","healthRollup","HealthRollup","partNumber","serialNumber","actions","getChassisCollection","get","then","Members","all","member","response","catch","error","console","log","getFanInfo","dispatch","commit","collection","length","chassis","fansFromChassis","flat","getChassisFans","_","ThermalSubsystem","Fans","promises"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/HardwareStatus/FanStore.js"],"sourcesContent":["import api from '@/store/api';\n\nconst FanStore = {\n  namespaced: true,\n  state: {\n    fans: [],\n  },\n  getters: {\n    fans: (state) => state.fans,\n  },\n  mutations: {\n    setFanInfo: (state, data) => {\n      state.fans = data.map((fan) => {\n        const {\n          Id,\n          Name,\n          PartNumber,\n          SerialNumber,\n          SpeedPercent = {},\n          Status = {},\n        } = fan;\n        return {\n          id: Id,\n          health: Status.Health,\n          name: Name,\n          speed: SpeedPercent.Reading,\n          statusState: Status.State,\n          healthRollup: Status.HealthRollup,\n          partNumber: PartNumber,\n          serialNumber: SerialNumber,\n        };\n      });\n    },\n  },\n  actions: {\n    async getChassisCollection() {\n      return await api\n        .get('/redfish/v1/Chassis')\n        .then(({ data: { Members } }) =>\n          api.all(\n            Members.map((member) =>\n              api.get(member['@odata.id']).then((response) => response.data),\n            ),\n          ),\n        )\n        .catch((error) => console.log(error));\n    },\n    async getFanInfo({ dispatch, commit }) {\n      const collection = await dispatch('getChassisCollection');\n      if (!collection || collection.length === 0) return;\n      return await api\n        .all(collection.map((chassis) => dispatch('getChassisFans', chassis)))\n        .then((fansFromChassis) => commit('setFanInfo', fansFromChassis.flat()))\n        .catch((error) => console.log(error));\n    },\n    async getChassisFans(_, chassis) {\n      return await api\n        .get(chassis.ThermalSubsystem['@odata.id'])\n        .then((response) => {\n          return api.get(`${response.data.Fans['@odata.id']}`);\n        })\n        .then(({ data: { Members } }) => {\n          const promises = Members.map((member) =>\n            api.get(member['@odata.id']),\n          );\n          return api.all(promises);\n        })\n        .then((response) => {\n          const data = response.map(({ data }) => data);\n          return data;\n        })\n        .catch((error) => console.log(error));\n    },\n  },\n};\n\nexport default FanStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}