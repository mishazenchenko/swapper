{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api, { getResponseCount } from '@/store/api';\nimport i18n from '@/i18n';\nconst SnmpAlertsStore = {\n  namespaced: true,\n  state: {\n    allSnmpDetails: []\n  },\n  getters: {\n    allSnmpDetails(state) {\n      return state.allSnmpDetails;\n    }\n  },\n  mutations: {\n    setSnmpDetails(state, allSnmpDetails) {\n      state.allSnmpDetails = allSnmpDetails;\n    }\n  },\n  actions: {\n    async getSnmpAlertUrl() {\n      return await api.get('/redfish/v1/').then(response => api.get(response.data.EventService['@odata.id'])).then(response => api.get(response.data.Subscriptions['@odata.id'])).then(response => response.data['@odata.id']).catch(error => console.log('Error', error));\n    },\n    async getSnmpDetails({\n      commit,\n      dispatch\n    }) {\n      const snmpAlertUrl = await dispatch('getSnmpAlertUrl');\n      return await api.get(snmpAlertUrl).then(response => response.data.Members.map(user => user['@odata.id'])).then(userIds => api.all(userIds.map(user => api.get(user)))).then(users => {\n        const snmpDetailsData = users.map(user => user.data);\n        commit('setSnmpDetails', snmpDetailsData);\n      }).catch(error => {\n        console.log(error);\n        const message = i18n.global.t('pageSnmpAlerts.toast.errorLoadSnmpDetails');\n        throw new Error(message);\n      });\n    },\n    async deleteDestination({\n      dispatch\n    }, id) {\n      const snmpAlertUrl = await dispatch('getSnmpAlertUrl');\n      return await api.delete(`${snmpAlertUrl}/${id}`).then(() => dispatch('getSnmpDetails')).then(() => i18n.global.t('pageSnmpAlerts.toast.successDeleteDestination', {\n        id\n      })).catch(error => {\n        console.log(error);\n        const message = i18n.global.t('pageSnmpAlerts.toast.errorDeleteDestination', {\n          id\n        });\n        throw new Error(message);\n      });\n    },\n    async deleteMultipleDestinations({\n      dispatch\n    }, destination) {\n      const snmpAlertUrl = await dispatch('getSnmpAlertUrl');\n      const promises = destination.map(({\n        id\n      }) => {\n        return api.delete(`${snmpAlertUrl}/${id}`).catch(error => {\n          console.log(error);\n          return error;\n        });\n      });\n      return await api.all(promises).then(response => {\n        dispatch('getSnmpDetails');\n        return response;\n      }).then(api.spread((...responses) => {\n        const {\n          successCount,\n          errorCount\n        } = getResponseCount(responses);\n        let toastMessages = [];\n        if (successCount) {\n          const message = i18n.global.t('pageSnmpAlerts.toast.successBatchDelete', successCount);\n          toastMessages.push({\n            type: 'success',\n            message\n          });\n        }\n        if (errorCount) {\n          const message = i18n.global.t('pageSnmpAlerts.toast.errorBatchDelete', errorCount);\n          toastMessages.push({\n            type: 'error',\n            message\n          });\n        }\n        return toastMessages;\n      }));\n    },\n    async addDestination({\n      dispatch\n    }, {\n      data\n    }) {\n      const snmpAlertUrl = await dispatch('getSnmpAlertUrl');\n      return await api.post(snmpAlertUrl, data).then(() => dispatch('getSnmpDetails')).then(() => i18n.global.t('pageSnmpAlerts.toast.successAddDestination')).catch(error => {\n        console.log(error);\n        const message = i18n.global.t('pageSnmpAlerts.toast.errorAddDestination');\n        throw new Error(message);\n      });\n    }\n  }\n};\nexport default SnmpAlertsStore;","map":{"version":3,"names":["api","getResponseCount","i18n","SnmpAlertsStore","namespaced","state","allSnmpDetails","getters","mutations","setSnmpDetails","actions","getSnmpAlertUrl","get","then","response","data","EventService","Subscriptions","catch","error","console","log","getSnmpDetails","commit","dispatch","snmpAlertUrl","Members","map","user","userIds","all","users","snmpDetailsData","message","global","t","Error","deleteDestination","id","delete","deleteMultipleDestinations","destination","promises","spread","responses","successCount","errorCount","toastMessages","push","type","addDestination","post"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/Settings/SnmpAlertsStore.js"],"sourcesContent":["import api, { getResponseCount } from '@/store/api';\nimport i18n from '@/i18n';\n\nconst SnmpAlertsStore = {\n  namespaced: true,\n  state: {\n    allSnmpDetails: [],\n  },\n  getters: {\n    allSnmpDetails(state) {\n      return state.allSnmpDetails;\n    },\n  },\n  mutations: {\n    setSnmpDetails(state, allSnmpDetails) {\n      state.allSnmpDetails = allSnmpDetails;\n    },\n  },\n  actions: {\n    async getSnmpAlertUrl() {\n      return await api\n        .get('/redfish/v1/')\n        .then((response) => api.get(response.data.EventService['@odata.id']))\n        .then((response) => api.get(response.data.Subscriptions['@odata.id']))\n        .then((response) => response.data['@odata.id'])\n        .catch((error) => console.log('Error', error));\n    },\n    async getSnmpDetails({ commit, dispatch }) {\n      const snmpAlertUrl = await dispatch('getSnmpAlertUrl');\n      return await api\n        .get(snmpAlertUrl)\n        .then((response) =>\n          response.data.Members.map((user) => user['@odata.id']),\n        )\n        .then((userIds) => api.all(userIds.map((user) => api.get(user))))\n        .then((users) => {\n          const snmpDetailsData = users.map((user) => user.data);\n          commit('setSnmpDetails', snmpDetailsData);\n        })\n        .catch((error) => {\n          console.log(error);\n          const message = i18n.global.t(\n            'pageSnmpAlerts.toast.errorLoadSnmpDetails',\n          );\n          throw new Error(message);\n        });\n    },\n    async deleteDestination({ dispatch }, id) {\n      const snmpAlertUrl = await dispatch('getSnmpAlertUrl');\n      return await api\n        .delete(`${snmpAlertUrl}/${id}`)\n        .then(() => dispatch('getSnmpDetails'))\n        .then(() =>\n          i18n.global.t('pageSnmpAlerts.toast.successDeleteDestination', {\n            id,\n          }),\n        )\n        .catch((error) => {\n          console.log(error);\n          const message = i18n.global.t(\n            'pageSnmpAlerts.toast.errorDeleteDestination',\n            {\n              id,\n            },\n          );\n          throw new Error(message);\n        });\n    },\n    async deleteMultipleDestinations({ dispatch }, destination) {\n      const snmpAlertUrl = await dispatch('getSnmpAlertUrl');\n      const promises = destination.map(({ id }) => {\n        return api.delete(`${snmpAlertUrl}/${id}`).catch((error) => {\n          console.log(error);\n          return error;\n        });\n      });\n      return await api\n        .all(promises)\n        .then((response) => {\n          dispatch('getSnmpDetails');\n          return response;\n        })\n        .then(\n          api.spread((...responses) => {\n            const { successCount, errorCount } = getResponseCount(responses);\n            let toastMessages = [];\n\n            if (successCount) {\n              const message = i18n.global.t(\n                'pageSnmpAlerts.toast.successBatchDelete',\n                successCount,\n              );\n              toastMessages.push({ type: 'success', message });\n            }\n\n            if (errorCount) {\n              const message = i18n.global.t(\n                'pageSnmpAlerts.toast.errorBatchDelete',\n                errorCount,\n              );\n              toastMessages.push({ type: 'error', message });\n            }\n\n            return toastMessages;\n          }),\n        );\n    },\n    async addDestination({ dispatch }, { data }) {\n      const snmpAlertUrl = await dispatch('getSnmpAlertUrl');\n      return await api\n        .post(snmpAlertUrl, data)\n        .then(() => dispatch('getSnmpDetails'))\n        .then(() => i18n.global.t('pageSnmpAlerts.toast.successAddDestination'))\n        .catch((error) => {\n          console.log(error);\n          const message = i18n.global.t(\n            'pageSnmpAlerts.toast.errorAddDestination',\n          );\n          throw new Error(message);\n        });\n    },\n  },\n};\n\nexport default SnmpAlertsStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}