{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst BmcStore = {\n  namespaced: true,\n  state: {\n    bmc: null\n  },\n  getters: {\n    bmc: state => state.bmc\n  },\n  mutations: {\n    setBmcInfo: (state, data) => {\n      const bmc = {};\n      bmc.dateTime = new Date(data.DateTime);\n      bmc.description = data.Description;\n      bmc.firmwareVersion = data.FirmwareVersion;\n      bmc.graphicalConsoleConnectTypes = data.GraphicalConsole.ConnectTypesSupported;\n      bmc.graphicalConsoleEnabled = data.GraphicalConsole.ServiceEnabled;\n      bmc.graphicalConsoleMaxSessions = data.GraphicalConsole.MaxConcurrentSessions;\n      bmc.health = data.Status.Health;\n      bmc.healthRollup = data.Status.HealthRollup;\n      bmc.id = data.Id;\n      bmc.lastResetTime = new Date(data.LastResetTime);\n      bmc.identifyLed = data.LocationIndicatorActive;\n      bmc.locationNumber = data.Location?.PartLocation?.ServiceLabel;\n      bmc.manufacturer = data.manufacturer;\n      bmc.managerType = data.ManagerType;\n      bmc.model = data.Model;\n      bmc.name = data.Name;\n      bmc.partNumber = data.PartNumber;\n      bmc.powerState = data.PowerState;\n      bmc.serialNumber = data.SerialNumber;\n      bmc.serviceEntryPointUuid = data.ServiceEntryPointUUID;\n      bmc.sparePartNumber = data.SparePartNumber;\n      bmc.statusState = data.Status.State;\n      bmc.uuid = data.UUID;\n      bmc.uri = data['@odata.id'];\n      state.bmc = bmc;\n    }\n  },\n  actions: {\n    async getBmcInfo({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getBmcPath')}`).then(({\n        data\n      }) => commit('setBmcInfo', data)).catch(error => console.log(error));\n    },\n    async updateIdentifyLedValue({\n      dispatch\n    }, led) {\n      const uri = led.uri;\n      const updatedIdentifyLedValue = {\n        LocationIndicatorActive: led.identifyLed\n      };\n      return await api.patch(uri, updatedIdentifyLedValue).then(() => {\n        dispatch('getBmcInfo');\n        if (led.identifyLed) {\n          return i18n.global.t('pageInventory.toast.successEnableIdentifyLed');\n        } else {\n          return i18n.global.t('pageInventory.toast.successDisableIdentifyLed');\n        }\n      }).catch(error => {\n        dispatch('getBmcInfo');\n        console.log('error', error);\n        if (led.identifyLed) {\n          throw new Error(i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'));\n        } else {\n          throw new Error(i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'));\n        }\n      });\n    }\n  }\n};\nexport default BmcStore;","map":{"version":3,"names":["api","i18n","BmcStore","namespaced","state","bmc","getters","mutations","setBmcInfo","data","dateTime","Date","DateTime","description","Description","firmwareVersion","FirmwareVersion","graphicalConsoleConnectTypes","GraphicalConsole","ConnectTypesSupported","graphicalConsoleEnabled","ServiceEnabled","graphicalConsoleMaxSessions","MaxConcurrentSessions","health","Status","Health","healthRollup","HealthRollup","id","Id","lastResetTime","LastResetTime","identifyLed","LocationIndicatorActive","locationNumber","Location","PartLocation","ServiceLabel","manufacturer","managerType","ManagerType","model","Model","name","Name","partNumber","PartNumber","powerState","PowerState","serialNumber","SerialNumber","serviceEntryPointUuid","ServiceEntryPointUUID","sparePartNumber","SparePartNumber","statusState","State","uuid","UUID","uri","actions","getBmcInfo","commit","get","dispatch","then","catch","error","console","log","updateIdentifyLedValue","led","updatedIdentifyLedValue","patch","global","t","Error"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/HardwareStatus/BmcStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst BmcStore = {\n  namespaced: true,\n  state: {\n    bmc: null,\n  },\n  getters: {\n    bmc: (state) => state.bmc,\n  },\n  mutations: {\n    setBmcInfo: (state, data) => {\n      const bmc = {};\n      bmc.dateTime = new Date(data.DateTime);\n      bmc.description = data.Description;\n      bmc.firmwareVersion = data.FirmwareVersion;\n      bmc.graphicalConsoleConnectTypes =\n        data.GraphicalConsole.ConnectTypesSupported;\n      bmc.graphicalConsoleEnabled = data.GraphicalConsole.ServiceEnabled;\n      bmc.graphicalConsoleMaxSessions =\n        data.GraphicalConsole.MaxConcurrentSessions;\n      bmc.health = data.Status.Health;\n      bmc.healthRollup = data.Status.HealthRollup;\n      bmc.id = data.Id;\n      bmc.lastResetTime = new Date(data.LastResetTime);\n      bmc.identifyLed = data.LocationIndicatorActive;\n      bmc.locationNumber = data.Location?.PartLocation?.ServiceLabel;\n      bmc.manufacturer = data.manufacturer;\n      bmc.managerType = data.ManagerType;\n      bmc.model = data.Model;\n      bmc.name = data.Name;\n      bmc.partNumber = data.PartNumber;\n      bmc.powerState = data.PowerState;\n      bmc.serialNumber = data.SerialNumber;\n      bmc.serviceEntryPointUuid = data.ServiceEntryPointUUID;\n      bmc.sparePartNumber = data.SparePartNumber;\n      bmc.statusState = data.Status.State;\n      bmc.uuid = data.UUID;\n      bmc.uri = data['@odata.id'];\n      state.bmc = bmc;\n    },\n  },\n  actions: {\n    async getBmcInfo({ commit }) {\n      return await api\n        .get(`${await this.dispatch('global/getBmcPath')}`)\n        .then(({ data }) => commit('setBmcInfo', data))\n        .catch((error) => console.log(error));\n    },\n    async updateIdentifyLedValue({ dispatch }, led) {\n      const uri = led.uri;\n      const updatedIdentifyLedValue = {\n        LocationIndicatorActive: led.identifyLed,\n      };\n      return await api\n        .patch(uri, updatedIdentifyLedValue)\n        .then(() => {\n          dispatch('getBmcInfo');\n          if (led.identifyLed) {\n            return i18n.global.t(\n              'pageInventory.toast.successEnableIdentifyLed',\n            );\n          } else {\n            return i18n.global.t(\n              'pageInventory.toast.successDisableIdentifyLed',\n            );\n          }\n        })\n        .catch((error) => {\n          dispatch('getBmcInfo');\n          console.log('error', error);\n          if (led.identifyLed) {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'),\n            );\n          } else {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'),\n            );\n          }\n        });\n    },\n  },\n};\n\nexport default BmcStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}