{"ast":null,"code":"import IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport IconEdit from '@carbon/icons-vue/es/edit/20';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconSettings from '@carbon/icons-vue/es/settings/20';\nimport IconChevron from '@carbon/icons-vue/es/chevron--up/20';\nimport ModalUser from './ModalUser';\nimport ModalSettings from './ModalSettings';\nimport PageTitle from '@/components/Global/PageTitle';\nimport TableRoles from './TableRoles';\nimport TableToolbar from '@/components/Global/TableToolbar';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport BVTableSelectableMixin, { selectedRows, tableHeaderCheckboxModel, tableHeaderCheckboxIndeterminate } from '@/components/Mixins/BVTableSelectableMixin';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  name: 'UserManagement',\n  components: {\n    IconAdd,\n    IconChevron,\n    IconEdit,\n    IconSettings,\n    IconTrashcan,\n    ModalSettings,\n    ModalUser,\n    PageTitle,\n    TableRoles,\n    TableRowAction,\n    TableToolbar\n  },\n  mixins: [BVTableSelectableMixin, BVToastMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      activeUser: null,\n      setting: {},\n      fields: [{\n        key: 'checkbox'\n      }, {\n        key: 'username',\n        label: i18n.global.t('pageUserManagement.table.username')\n      }, {\n        key: 'privilege',\n        label: i18n.global.t('pageUserManagement.table.privilege')\n      }, {\n        key: 'status',\n        label: i18n.global.t('pageUserManagement.table.status')\n      }, {\n        key: 'actions',\n        label: '',\n        tdClass: 'text-right text-nowrap'\n      }],\n      tableToolbarActions: [{\n        value: 'delete',\n        label: i18n.global.t('global.action.delete')\n      }, {\n        value: 'enable',\n        label: i18n.global.t('global.action.enable')\n      }, {\n        value: 'disable',\n        label: i18n.global.t('global.action.disable')\n      }],\n      selectedRows: selectedRows,\n      tableHeaderCheckboxModel: tableHeaderCheckboxModel,\n      tableHeaderCheckboxIndeterminate: tableHeaderCheckboxIndeterminate\n    };\n  },\n  computed: {\n    allUsers() {\n      return this.$store.getters['userManagement/allUsers'];\n    },\n    tableItems() {\n      // transform user data to table data\n      return this.allUsers.map(user => {\n        return {\n          username: user.UserName,\n          privilege: user.RoleId,\n          status: user.Locked ? 'Locked' : user.Enabled ? 'Enabled' : 'Disabled',\n          actions: [{\n            value: 'edit',\n            enabled: this.editEnable(user),\n            title: i18n.global.t('pageUserManagement.editUser')\n          }, {\n            value: 'delete',\n            enabled: user.UserName === this.$store.getters['global/username'] ? false : true && user.UserName === 'root' ? false : true,\n            title: i18n.global.t('pageUserManagement.deleteUser')\n          }],\n          ...user\n        };\n      });\n    },\n    settings() {\n      return this.$store.getters['userManagement/accountSettings'];\n    },\n    passwordRequirements() {\n      return this.$store.getters['userManagement/accountPasswordRequirements'];\n    }\n  },\n  created() {\n    this.startLoader();\n    this.$store.dispatch('userManagement/getUsers').finally(() => {\n      this.endLoader();\n      this.isBusy = false;\n    });\n    this.$store.dispatch('userManagement/getAccountSettings');\n    this.$store.dispatch('userManagement/getAccountRoles');\n  },\n  methods: {\n    editEnable(user) {\n      if ('root' === this.$store.getters['global/username']) {\n        return true;\n      } else {\n        return user.UserName === 'root' ? false : true;\n      }\n    },\n    initModalUser(user) {\n      this.activeUser = user;\n      this.$bvModal.show('modal-user');\n    },\n    initModalDelete(user) {\n      this.$bvModal.msgBoxConfirm(i18n.global.t('pageUserManagement.modal.deleteConfirmMessage', {\n        user: user.username\n      }), {\n        title: i18n.global.t('pageUserManagement.deleteUser'),\n        okTitle: i18n.global.t('pageUserManagement.deleteUser'),\n        cancelTitle: i18n.global.t('global.action.cancel'),\n        autoFocusButton: 'ok'\n      }).then(deleteConfirmed => {\n        if (deleteConfirmed) {\n          this.deleteUser(user);\n        }\n      });\n    },\n    initModalSettings() {\n      this.setting = this.settings;\n      this.$bvModal.show('modal-settings');\n    },\n    saveUser({\n      isNewUser,\n      userData\n    }) {\n      this.startLoader();\n      if (isNewUser) {\n        this.$store.dispatch('userManagement/createUser', userData).then(success => this.successToast(success)).catch(({\n          message\n        }) => this.errorToast(message)).finally(() => this.endLoader());\n      } else {\n        this.$store.dispatch('userManagement/updateUser', userData).then(success => this.successToast(success)).catch(({\n          message\n        }) => this.errorToast(message)).finally(() => this.endLoader());\n      }\n    },\n    deleteUser({\n      username\n    }) {\n      this.startLoader();\n      this.$store.dispatch('userManagement/deleteUser', username).then(success => this.successToast(success)).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => this.endLoader());\n    },\n    onBatchAction(action) {\n      switch (action) {\n        case 'delete':\n          this.$bvModal.msgBoxConfirm(i18n.global.t('pageUserManagement.modal.batchDeleteConfirmMessage', this.selectedRows.length), {\n            title: i18n.global.t('pageUserManagement.deleteUser', this.selectedRows.length),\n            okTitle: i18n.global.t('pageUserManagement.deleteUser', this.selectedRows.length),\n            cancelTitle: i18n.global.t('global.action.cancel'),\n            autoFocusButton: 'ok'\n          }).then(deleteConfirmed => {\n            if (deleteConfirmed) {\n              this.startLoader();\n              this.$store.dispatch('userManagement/deleteUsers', this.selectedRows).then(messages => {\n                messages.forEach(({\n                  type,\n                  message\n                }) => {\n                  if (type === 'success') this.successToast(message);\n                  if (type === 'error') this.errorToast(message);\n                });\n              }).finally(() => this.endLoader());\n            }\n          });\n          break;\n        case 'enable':\n          this.startLoader();\n          this.$store.dispatch('userManagement/enableUsers', this.selectedRows).then(messages => {\n            messages.forEach(({\n              type,\n              message\n            }) => {\n              if (type === 'success') this.successToast(message);\n              if (type === 'error') this.errorToast(message);\n            });\n          }).finally(() => this.endLoader());\n          break;\n        case 'disable':\n          this.$bvModal.msgBoxConfirm(i18n.global.t('pageUserManagement.modal.batchDisableConfirmMessage', this.selectedRows.length), {\n            title: i18n.global.t('pageUserManagement.disableUser', this.selectedRows.length),\n            okTitle: i18n.global.t('pageUserManagement.disableUser', this.selectedRows.length),\n            cancelTitle: i18n.global.t('global.action.cancel'),\n            autoFocusButton: 'ok'\n          }).then(disableConfirmed => {\n            if (disableConfirmed) {\n              this.startLoader();\n              this.$store.dispatch('userManagement/disableUsers', this.selectedRows).then(messages => {\n                messages.forEach(({\n                  type,\n                  message\n                }) => {\n                  if (type === 'success') this.successToast(message);\n                  if (type === 'error') this.errorToast(message);\n                });\n              }).finally(() => this.endLoader());\n            }\n          });\n          break;\n      }\n    },\n    onTableRowAction(action, row) {\n      switch (action) {\n        case 'edit':\n          this.initModalUser(row);\n          break;\n        case 'delete':\n          this.initModalDelete(row);\n          break;\n        default:\n          break;\n      }\n    },\n    saveAccountSettings(settings) {\n      this.startLoader();\n      this.$store.dispatch('userManagement/saveAccountSettings', settings).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => this.endLoader());\n    }\n  }\n};","map":{"version":3,"names":["IconTrashcan","IconEdit","IconAdd","IconSettings","IconChevron","ModalUser","ModalSettings","PageTitle","TableRoles","TableToolbar","TableRowAction","BVTableSelectableMixin","selectedRows","tableHeaderCheckboxModel","tableHeaderCheckboxIndeterminate","BVToastMixin","LoadingBarMixin","useI18n","i18n","name","components","mixins","beforeRouteLeave","to","from","next","hideLoader","data","$t","t","isBusy","activeUser","setting","fields","key","label","global","tdClass","tableToolbarActions","value","computed","allUsers","$store","getters","tableItems","map","user","username","UserName","privilege","RoleId","status","Locked","Enabled","actions","enabled","editEnable","title","settings","passwordRequirements","created","startLoader","dispatch","finally","endLoader","methods","initModalUser","$bvModal","show","initModalDelete","msgBoxConfirm","okTitle","cancelTitle","autoFocusButton","then","deleteConfirmed","deleteUser","initModalSettings","saveUser","isNewUser","userData","success","successToast","catch","message","errorToast","onBatchAction","action","length","messages","forEach","type","disableConfirmed","onTableRowAction","row","saveAccountSettings"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/SecurityAndAccess/UserManagement/UserManagement.vue"],"sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title />\n    <b-row>\n      <b-col xl=\"9\" class=\"text-right\">\n        <b-button variant=\"link\" @click=\"initModalSettings\">\n          <icon-settings />\n          {{ $t('pageUserManagement.accountPolicySettings') }}\n        </b-button>\n        <b-button\n          variant=\"primary\"\n          data-test-id=\"userManagement-button-addUser\"\n          @click=\"initModalUser(null)\"\n        >\n          <icon-add />\n          {{ $t('pageUserManagement.addUser') }}\n        </b-button>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col xl=\"9\">\n        <table-toolbar\n          ref=\"toolbar\"\n          :selected-items-count=\"selectedRows.length\"\n          :actions=\"tableToolbarActions\"\n          @clear-selected=\"clearSelectedRows($refs.table)\"\n          @batch-action=\"onBatchAction\"\n        />\n        <b-table\n          ref=\"table\"\n          responsive=\"md\"\n          selectable\n          show-empty\n          no-select-on-click\n          hover\n          :busy=\"isBusy\"\n          :fields=\"fields\"\n          :items=\"tableItems\"\n          :empty-text=\"$t('global.table.emptyMessage')\"\n          @row-selected=\"onRowSelected($event, tableItems.length)\"\n        >\n          <!-- Checkbox column -->\n          <template #head(checkbox)>\n            <b-form-checkbox\n              v-model=\"tableHeaderCheckboxModel\"\n              data-test-id=\"userManagement-checkbox-tableHeaderCheckbox\"\n              :indeterminate=\"tableHeaderCheckboxIndeterminate\"\n              @change=\"onChangeHeaderCheckbox($refs.table)\"\n            >\n              <span class=\"sr-only\">{{ $t('global.table.selectAll') }}</span>\n            </b-form-checkbox>\n          </template>\n          <template #cell(checkbox)=\"row\">\n            <b-form-checkbox\n              v-model=\"row.rowSelected\"\n              data-test-id=\"userManagement-checkbox-toggleSelectRow\"\n              @change=\"toggleSelectRow($refs.table, row.index)\"\n            >\n              <span class=\"sr-only\">{{ $t('global.table.selectItem') }}</span>\n            </b-form-checkbox>\n          </template>\n\n          <!-- table actions column -->\n          <template #cell(actions)=\"{ item }\">\n            <table-row-action\n              v-for=\"(action, index) in item.actions\"\n              :key=\"index\"\n              :value=\"action.value\"\n              :enabled=\"action.enabled\"\n              :title=\"action.title\"\n              @click-table-action=\"onTableRowAction($event, item)\"\n            >\n              <template #icon>\n                <icon-edit\n                  v-if=\"action.value === 'edit'\"\n                  :data-test-id=\"`userManagement-tableRowAction-edit-${index}`\"\n                />\n                <icon-trashcan\n                  v-if=\"action.value === 'delete'\"\n                  :data-test-id=\"`userManagement-tableRowAction-delete-${index}`\"\n                />\n              </template>\n            </table-row-action>\n          </template>\n        </b-table>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col xl=\"8\">\n        <b-button\n          v-b-toggle.collapse-role-table\n          data-test-id=\"userManagement-button-viewPrivilegeRoleDescriptions\"\n          variant=\"link\"\n          class=\"mt-3\"\n        >\n          <icon-chevron />\n          {{ $t('pageUserManagement.viewPrivilegeRoleDescriptions') }}\n        </b-button>\n        <b-collapse id=\"collapse-role-table\" class=\"mt-3\">\n          <table-roles />\n        </b-collapse>\n      </b-col>\n    </b-row>\n    <!-- Modals -->\n    <modal-settings :settings=\"setting\" @ok=\"saveAccountSettings\" />\n    <modal-user\n      :user=\"activeUser\"\n      :password-requirements=\"passwordRequirements\"\n      @ok=\"saveUser\"\n      @hidden=\"activeUser = null\"\n    />\n  </b-container>\n</template>\n\n<script>\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport IconEdit from '@carbon/icons-vue/es/edit/20';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconSettings from '@carbon/icons-vue/es/settings/20';\nimport IconChevron from '@carbon/icons-vue/es/chevron--up/20';\n\nimport ModalUser from './ModalUser';\nimport ModalSettings from './ModalSettings';\nimport PageTitle from '@/components/Global/PageTitle';\nimport TableRoles from './TableRoles';\nimport TableToolbar from '@/components/Global/TableToolbar';\nimport TableRowAction from '@/components/Global/TableRowAction';\n\nimport BVTableSelectableMixin, {\n  selectedRows,\n  tableHeaderCheckboxModel,\n  tableHeaderCheckboxIndeterminate,\n} from '@/components/Mixins/BVTableSelectableMixin';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  name: 'UserManagement',\n  components: {\n    IconAdd,\n    IconChevron,\n    IconEdit,\n    IconSettings,\n    IconTrashcan,\n    ModalSettings,\n    ModalUser,\n    PageTitle,\n    TableRoles,\n    TableRowAction,\n    TableToolbar,\n  },\n  mixins: [BVTableSelectableMixin, BVToastMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      activeUser: null,\n      setting: {},\n      fields: [\n        {\n          key: 'checkbox',\n        },\n        {\n          key: 'username',\n          label: i18n.global.t('pageUserManagement.table.username'),\n        },\n        {\n          key: 'privilege',\n          label: i18n.global.t('pageUserManagement.table.privilege'),\n        },\n        {\n          key: 'status',\n          label: i18n.global.t('pageUserManagement.table.status'),\n        },\n        {\n          key: 'actions',\n          label: '',\n          tdClass: 'text-right text-nowrap',\n        },\n      ],\n      tableToolbarActions: [\n        {\n          value: 'delete',\n          label: i18n.global.t('global.action.delete'),\n        },\n        {\n          value: 'enable',\n          label: i18n.global.t('global.action.enable'),\n        },\n        {\n          value: 'disable',\n          label: i18n.global.t('global.action.disable'),\n        },\n      ],\n      selectedRows: selectedRows,\n      tableHeaderCheckboxModel: tableHeaderCheckboxModel,\n      tableHeaderCheckboxIndeterminate: tableHeaderCheckboxIndeterminate,\n    };\n  },\n  computed: {\n    allUsers() {\n      return this.$store.getters['userManagement/allUsers'];\n    },\n    tableItems() {\n      // transform user data to table data\n      return this.allUsers.map((user) => {\n        return {\n          username: user.UserName,\n          privilege: user.RoleId,\n          status: user.Locked\n            ? 'Locked'\n            : user.Enabled\n              ? 'Enabled'\n              : 'Disabled',\n          actions: [\n            {\n              value: 'edit',\n              enabled: this.editEnable(user),\n              title: i18n.global.t('pageUserManagement.editUser'),\n            },\n            {\n              value: 'delete',\n              enabled:\n                user.UserName === this.$store.getters['global/username']\n                  ? false\n                  : true && user.UserName === 'root'\n                    ? false\n                    : true,\n              title: i18n.global.t('pageUserManagement.deleteUser'),\n            },\n          ],\n          ...user,\n        };\n      });\n    },\n    settings() {\n      return this.$store.getters['userManagement/accountSettings'];\n    },\n    passwordRequirements() {\n      return this.$store.getters['userManagement/accountPasswordRequirements'];\n    },\n  },\n  created() {\n    this.startLoader();\n    this.$store.dispatch('userManagement/getUsers').finally(() => {\n      this.endLoader();\n      this.isBusy = false;\n    });\n    this.$store.dispatch('userManagement/getAccountSettings');\n    this.$store.dispatch('userManagement/getAccountRoles');\n  },\n  methods: {\n    editEnable(user) {\n      if ('root' === this.$store.getters['global/username']) {\n        return true;\n      } else {\n        return user.UserName === 'root' ? false : true;\n      }\n    },\n    initModalUser(user) {\n      this.activeUser = user;\n      this.$bvModal.show('modal-user');\n    },\n    initModalDelete(user) {\n      this.$bvModal\n        .msgBoxConfirm(\n          i18n.global.t('pageUserManagement.modal.deleteConfirmMessage', {\n            user: user.username,\n          }),\n          {\n            title: i18n.global.t('pageUserManagement.deleteUser'),\n            okTitle: i18n.global.t('pageUserManagement.deleteUser'),\n            cancelTitle: i18n.global.t('global.action.cancel'),\n            autoFocusButton: 'ok',\n          },\n        )\n        .then((deleteConfirmed) => {\n          if (deleteConfirmed) {\n            this.deleteUser(user);\n          }\n        });\n    },\n    initModalSettings() {\n      this.setting = this.settings;\n      this.$bvModal.show('modal-settings');\n    },\n    saveUser({ isNewUser, userData }) {\n      this.startLoader();\n      if (isNewUser) {\n        this.$store\n          .dispatch('userManagement/createUser', userData)\n          .then((success) => this.successToast(success))\n          .catch(({ message }) => this.errorToast(message))\n          .finally(() => this.endLoader());\n      } else {\n        this.$store\n          .dispatch('userManagement/updateUser', userData)\n          .then((success) => this.successToast(success))\n          .catch(({ message }) => this.errorToast(message))\n          .finally(() => this.endLoader());\n      }\n    },\n    deleteUser({ username }) {\n      this.startLoader();\n      this.$store\n        .dispatch('userManagement/deleteUser', username)\n        .then((success) => this.successToast(success))\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => this.endLoader());\n    },\n    onBatchAction(action) {\n      switch (action) {\n        case 'delete':\n          this.$bvModal\n            .msgBoxConfirm(\n              i18n.global.t(\n                'pageUserManagement.modal.batchDeleteConfirmMessage',\n                this.selectedRows.length,\n              ),\n              {\n                title: i18n.global.t(\n                  'pageUserManagement.deleteUser',\n                  this.selectedRows.length,\n                ),\n                okTitle: i18n.global.t(\n                  'pageUserManagement.deleteUser',\n                  this.selectedRows.length,\n                ),\n                cancelTitle: i18n.global.t('global.action.cancel'),\n                autoFocusButton: 'ok',\n              },\n            )\n            .then((deleteConfirmed) => {\n              if (deleteConfirmed) {\n                this.startLoader();\n                this.$store\n                  .dispatch('userManagement/deleteUsers', this.selectedRows)\n                  .then((messages) => {\n                    messages.forEach(({ type, message }) => {\n                      if (type === 'success') this.successToast(message);\n                      if (type === 'error') this.errorToast(message);\n                    });\n                  })\n                  .finally(() => this.endLoader());\n              }\n            });\n          break;\n        case 'enable':\n          this.startLoader();\n          this.$store\n            .dispatch('userManagement/enableUsers', this.selectedRows)\n            .then((messages) => {\n              messages.forEach(({ type, message }) => {\n                if (type === 'success') this.successToast(message);\n                if (type === 'error') this.errorToast(message);\n              });\n            })\n            .finally(() => this.endLoader());\n          break;\n        case 'disable':\n          this.$bvModal\n            .msgBoxConfirm(\n              i18n.global.t(\n                'pageUserManagement.modal.batchDisableConfirmMessage',\n                this.selectedRows.length,\n              ),\n              {\n                title: i18n.global.t(\n                  'pageUserManagement.disableUser',\n                  this.selectedRows.length,\n                ),\n                okTitle: i18n.global.t(\n                  'pageUserManagement.disableUser',\n                  this.selectedRows.length,\n                ),\n                cancelTitle: i18n.global.t('global.action.cancel'),\n                autoFocusButton: 'ok',\n              },\n            )\n            .then((disableConfirmed) => {\n              if (disableConfirmed) {\n                this.startLoader();\n                this.$store\n                  .dispatch('userManagement/disableUsers', this.selectedRows)\n                  .then((messages) => {\n                    messages.forEach(({ type, message }) => {\n                      if (type === 'success') this.successToast(message);\n                      if (type === 'error') this.errorToast(message);\n                    });\n                  })\n                  .finally(() => this.endLoader());\n              }\n            });\n          break;\n      }\n    },\n    onTableRowAction(action, row) {\n      switch (action) {\n        case 'edit':\n          this.initModalUser(row);\n          break;\n        case 'delete':\n          this.initModalDelete(row);\n          break;\n        default:\n          break;\n      }\n    },\n    saveAccountSettings(settings) {\n      this.startLoader();\n      this.$store\n        .dispatch('userManagement/saveAccountSettings', settings)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => this.endLoader());\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import '@/assets/styles/bmc/helpers/_index.scss';\n@import '@/assets/styles/bootstrap/_helpers.scss';\n\n.btn.collapsed {\n  svg {\n    transform: rotate(180deg);\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}