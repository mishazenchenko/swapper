{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst AssemblyStore = {\n  namespaced: true,\n  state: {\n    assemblies: null\n  },\n  getters: {\n    assemblies: state => state.assemblies\n  },\n  mutations: {\n    setAssemblyInfo: (state, data) => {\n      state.assemblies = data.map(assembly => {\n        const {\n          MemberId,\n          PartNumber,\n          SerialNumber,\n          SparePartNumber,\n          Model,\n          Name,\n          Location,\n          LocationIndicatorActive\n        } = assembly;\n        return {\n          id: MemberId,\n          partNumber: PartNumber,\n          serialNumber: SerialNumber,\n          sparePartNumber: SparePartNumber,\n          model: Model,\n          name: Name,\n          locationNumber: Location?.PartLocation?.ServiceLabel,\n          identifyLed: LocationIndicatorActive,\n          uri: assembly['@odata.id']\n        };\n      });\n    }\n  },\n  actions: {\n    async getAssemblyInfo({\n      commit\n    }) {\n      return await api.get('/redfish/v1/Chassis/chassis/Assembly').then(({\n        data\n      }) => commit('setAssemblyInfo', data?.Assemblies)).catch(error => console.log(error));\n    },\n    async updateIdentifyLedValue({\n      dispatch\n    }, led) {\n      const uri = led.uri;\n      const updatedIdentifyLedValue = {\n        Assemblies: [{\n          MemberId: led.memberId,\n          LocationIndicatorActive: led.identifyLed\n        }]\n      };\n      return await api.patch(uri, updatedIdentifyLedValue).then(() => {\n        if (led.identifyLed) {\n          return i18n.global.t('pageInventory.toast.successEnableIdentifyLed');\n        } else {\n          return i18n.global.t('pageInventory.toast.successDisableIdentifyLed');\n        }\n      }).catch(error => {\n        dispatch('getAssemblyInfo');\n        console.log('error', error);\n        if (led.identifyLed) {\n          throw new Error(i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'));\n        } else {\n          throw new Error(i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'));\n        }\n      });\n    }\n  }\n};\nexport default AssemblyStore;","map":{"version":3,"names":["api","i18n","AssemblyStore","namespaced","state","assemblies","getters","mutations","setAssemblyInfo","data","map","assembly","MemberId","PartNumber","SerialNumber","SparePartNumber","Model","Name","Location","LocationIndicatorActive","id","partNumber","serialNumber","sparePartNumber","model","name","locationNumber","PartLocation","ServiceLabel","identifyLed","uri","actions","getAssemblyInfo","commit","get","then","Assemblies","catch","error","console","log","updateIdentifyLedValue","dispatch","led","updatedIdentifyLedValue","memberId","patch","global","t","Error"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/HardwareStatus/AssemblyStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst AssemblyStore = {\n  namespaced: true,\n  state: {\n    assemblies: null,\n  },\n  getters: {\n    assemblies: (state) => state.assemblies,\n  },\n  mutations: {\n    setAssemblyInfo: (state, data) => {\n      state.assemblies = data.map((assembly) => {\n        const {\n          MemberId,\n          PartNumber,\n          SerialNumber,\n          SparePartNumber,\n          Model,\n          Name,\n          Location,\n          LocationIndicatorActive,\n        } = assembly;\n        return {\n          id: MemberId,\n          partNumber: PartNumber,\n          serialNumber: SerialNumber,\n          sparePartNumber: SparePartNumber,\n          model: Model,\n          name: Name,\n          locationNumber: Location?.PartLocation?.ServiceLabel,\n          identifyLed: LocationIndicatorActive,\n          uri: assembly['@odata.id'],\n        };\n      });\n    },\n  },\n  actions: {\n    async getAssemblyInfo({ commit }) {\n      return await api\n        .get('/redfish/v1/Chassis/chassis/Assembly')\n        .then(({ data }) => commit('setAssemblyInfo', data?.Assemblies))\n        .catch((error) => console.log(error));\n    },\n    async updateIdentifyLedValue({ dispatch }, led) {\n      const uri = led.uri;\n      const updatedIdentifyLedValue = {\n        Assemblies: [\n          {\n            MemberId: led.memberId,\n            LocationIndicatorActive: led.identifyLed,\n          },\n        ],\n      };\n\n      return await api\n        .patch(uri, updatedIdentifyLedValue)\n        .then(() => {\n          if (led.identifyLed) {\n            return i18n.global.t(\n              'pageInventory.toast.successEnableIdentifyLed',\n            );\n          } else {\n            return i18n.global.t(\n              'pageInventory.toast.successDisableIdentifyLed',\n            );\n          }\n        })\n        .catch((error) => {\n          dispatch('getAssemblyInfo');\n          console.log('error', error);\n          if (led.identifyLed) {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'),\n            );\n          } else {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'),\n            );\n          }\n        });\n    },\n  },\n};\n\nexport default AssemblyStore;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,OAAOC,IAAI,MAAM,QAAQ;AAEzB,MAAMC,aAAa,GAAG;EACpBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACLC,UAAU,EAAE;EACd,CAAC;EACDC,OAAO,EAAE;IACPD,UAAU,EAAGD,KAAK,IAAKA,KAAK,CAACC;EAC/B,CAAC;EACDE,SAAS,EAAE;IACTC,eAAe,EAAEA,CAACJ,KAAK,EAAEK,IAAI,KAAK;MAChCL,KAAK,CAACC,UAAU,GAAGI,IAAI,CAACC,GAAG,CAAEC,QAAQ,IAAK;QACxC,MAAM;UACJC,QAAQ;UACRC,UAAU;UACVC,YAAY;UACZC,eAAe;UACfC,KAAK;UACLC,IAAI;UACJC,QAAQ;UACRC;QACF,CAAC,GAAGR,QAAQ;QACZ,OAAO;UACLS,EAAE,EAAER,QAAQ;UACZS,UAAU,EAAER,UAAU;UACtBS,YAAY,EAAER,YAAY;UAC1BS,eAAe,EAAER,eAAe;UAChCS,KAAK,EAAER,KAAK;UACZS,IAAI,EAAER,IAAI;UACVS,cAAc,EAAER,QAAQ,EAAES,YAAY,EAAEC,YAAY;UACpDC,WAAW,EAAEV,uBAAuB;UACpCW,GAAG,EAAEnB,QAAQ,CAAC,WAAW;QAC3B,CAAC;MACH,CAAC,CAAC;IACJ;EACF,CAAC;EACDoB,OAAO,EAAE;IACP,MAAMC,eAAeA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAChC,OAAO,MAAMjC,GAAG,CACbkC,GAAG,CAAC,sCAAsC,CAAC,CAC3CC,IAAI,CAAC,CAAC;QAAE1B;MAAK,CAAC,KAAKwB,MAAM,CAAC,iBAAiB,EAAExB,IAAI,EAAE2B,UAAU,CAAC,CAAC,CAC/DC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,MAAMG,sBAAsBA,CAAC;MAAEC;IAAS,CAAC,EAAEC,GAAG,EAAE;MAC9C,MAAMb,GAAG,GAAGa,GAAG,CAACb,GAAG;MACnB,MAAMc,uBAAuB,GAAG;QAC9BR,UAAU,EAAE,CACV;UACExB,QAAQ,EAAE+B,GAAG,CAACE,QAAQ;UACtB1B,uBAAuB,EAAEwB,GAAG,CAACd;QAC/B,CAAC;MAEL,CAAC;MAED,OAAO,MAAM7B,GAAG,CACb8C,KAAK,CAAChB,GAAG,EAAEc,uBAAuB,CAAC,CACnCT,IAAI,CAAC,MAAM;QACV,IAAIQ,GAAG,CAACd,WAAW,EAAE;UACnB,OAAO5B,IAAI,CAAC8C,MAAM,CAACC,CAAC,CAClB,8CACF,CAAC;QACH,CAAC,MAAM;UACL,OAAO/C,IAAI,CAAC8C,MAAM,CAACC,CAAC,CAClB,+CACF,CAAC;QACH;MACF,CAAC,CAAC,CACDX,KAAK,CAAEC,KAAK,IAAK;QAChBI,QAAQ,CAAC,iBAAiB,CAAC;QAC3BH,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC;QAC3B,IAAIK,GAAG,CAACd,WAAW,EAAE;UACnB,MAAM,IAAIoB,KAAK,CACbhD,IAAI,CAAC8C,MAAM,CAACC,CAAC,CAAC,4CAA4C,CAC5D,CAAC;QACH,CAAC,MAAM;UACL,MAAM,IAAIC,KAAK,CACbhD,IAAI,CAAC8C,MAAM,CAACC,CAAC,CAAC,6CAA6C,CAC7D,CAAC;QACH;MACF,CAAC,CAAC;IACN;EACF;AACF,CAAC;AAED,eAAe9C,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}