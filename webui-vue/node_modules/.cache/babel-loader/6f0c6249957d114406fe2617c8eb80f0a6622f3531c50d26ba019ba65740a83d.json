{"ast":null,"code":"import BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconEdit from '@carbon/icons-vue/es/edit/20';\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport PageSection from '@/components/Global/PageSection';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  name: 'Ipv4Table',\n  components: {\n    IconAdd,\n    IconEdit,\n    IconTrashcan,\n    PageSection,\n    TableRowAction\n  },\n  mixins: [BVToastMixin, LoadingBarMixin],\n  props: {\n    tabIndex: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        ipv4TableItems: []\n      },\n      actions: [{\n        value: 'edit',\n        title: i18n.global.t('global.action.edit')\n      }, {\n        value: 'delete',\n        title: i18n.global.t('global.action.delete')\n      }],\n      ipv4TableFields: [{\n        key: 'Address',\n        label: i18n.global.t('pageNetwork.table.ipAddress')\n      }, {\n        key: 'Gateway',\n        label: i18n.global.t('pageNetwork.table.gateway')\n      }, {\n        key: 'SubnetMask',\n        label: i18n.global.t('pageNetwork.table.subnet')\n      }, {\n        key: 'AddressOrigin',\n        label: i18n.global.t('pageNetwork.table.addressOrigin')\n      }, {\n        key: 'actions',\n        label: '',\n        tdClass: 'text-right'\n      }]\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData']),\n    selectedInterface() {\n      return this.$store.getters['network/selectedInterfaceIndex'];\n    },\n    dhcpEnabledState: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][this.selectedInterface].dhcpEnabled;\n      },\n      set(newValue) {\n        return newValue;\n      }\n    },\n    filteredActions() {\n      return item => {\n        if (item.AddressOrigin === 'DHCP') {\n          return item.actions.filter(action => action.value !== 'delete');\n        } else {\n          return item.actions;\n        }\n      };\n    }\n  },\n  watch: {\n    // Watch for change in tab index\n    tabIndex() {\n      this.getIpv4TableItems();\n    },\n    ethernetData() {\n      this.getIpv4TableItems();\n    }\n  },\n  created() {\n    this.getIpv4TableItems();\n    this.$store.dispatch('network/getEthernetData').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('network-table-ipv4-complete');\n    });\n  },\n  methods: {\n    getIpv4TableItems() {\n      const index = this.tabIndex;\n      const addresses = this.ethernetData[index].IPv4Addresses || [];\n      this.form.ipv4TableItems = addresses.map(ipv4 => {\n        return {\n          Address: ipv4.Address,\n          SubnetMask: ipv4.SubnetMask,\n          Gateway: ipv4.Gateway,\n          AddressOrigin: ipv4.AddressOrigin,\n          actions: [{\n            value: 'delete',\n            title: i18n.global.t('pageNetwork.table.deleteIpv4')\n          }]\n        };\n      });\n    },\n    onIpv4TableAction(action, $event, index) {\n      if ($event === 'delete') {\n        this.deleteIpv4TableRow(index);\n      }\n    },\n    deleteIpv4TableRow(index) {\n      this.form.ipv4TableItems.splice(index, 1);\n      const newIpv4Array = this.form.ipv4TableItems.map(ipv4 => {\n        const {\n          Address,\n          SubnetMask,\n          Gateway\n        } = ipv4;\n        return {\n          Address,\n          SubnetMask,\n          Gateway\n        };\n      });\n      this.$store.dispatch('network/editIpv4Address', newIpv4Array).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    initAddIpv4Address() {\n      this.$bvModal.show('modal-add-ipv4');\n    },\n    changeDhcpEnabledState(state) {\n      this.$bvModal.msgBoxConfirm(state ? i18n.global.t('pageNetwork.modal.confirmEnableDhcp') : i18n.global.t('pageNetwork.modal.confirmDisableDhcp'), {\n        title: i18n.global.t('pageNetwork.modal.dhcpConfirmTitle', {\n          dhcpState: state ? i18n.global.t('global.action.enable') : i18n.global.t('global.action.disable')\n        }),\n        okTitle: state ? i18n.global.t('global.action.enable') : i18n.global.t('global.action.disable'),\n        okVariant: 'danger',\n        cancelTitle: i18n.global.t('global.action.cancel'),\n        autoFocusButton: 'cancel'\n      }).then(dhcpEnableConfirmed => {\n        if (dhcpEnableConfirmed) {\n          this.$store.dispatch('network/saveDhcpEnabledState', state).then(message => this.successToast(message)).catch(({\n            message\n          }) => this.errorToast(message));\n        } else {\n          let onDhcpCancel = document.getElementById('dhcpSwitch');\n          onDhcpCancel.checked = !state;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["BVToastMixin","IconAdd","IconEdit","IconTrashcan","LoadingBarMixin","PageSection","TableRowAction","mapState","useI18n","i18n","name","components","mixins","props","tabIndex","type","Number","default","data","$t","t","form","ipv4TableItems","actions","value","title","global","ipv4TableFields","key","label","tdClass","computed","selectedInterface","$store","getters","dhcpEnabledState","get","dhcpEnabled","set","newValue","filteredActions","item","AddressOrigin","filter","action","watch","getIpv4TableItems","ethernetData","created","dispatch","finally","$root","$emit","methods","index","addresses","IPv4Addresses","map","ipv4","Address","SubnetMask","Gateway","onIpv4TableAction","$event","deleteIpv4TableRow","splice","newIpv4Array","then","message","successToast","catch","errorToast","initAddIpv4Address","$bvModal","show","changeDhcpEnabledState","state","msgBoxConfirm","dhcpState","okTitle","okVariant","cancelTitle","autoFocusButton","dhcpEnableConfirmed","onDhcpCancel","document","getElementById","checked"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Settings/Network/TableIpv4.vue"],"sourcesContent":["<template>\n  <page-section :section-title=\"$t('pageNetwork.ipv4')\">\n    <b-row class=\"mb-4\">\n      <b-col lg=\"2\" md=\"6\">\n        <dl>\n          <dt>{{ $t('pageNetwork.dhcp') }}</dt>\n          <dd>\n            <b-form-checkbox\n              id=\"dhcpSwitch\"\n              v-model=\"dhcpEnabledState\"\n              data-test-id=\"networkSettings-switch-dhcpEnabled\"\n              switch\n              @change=\"changeDhcpEnabledState\"\n            >\n              <span v-if=\"dhcpEnabledState\">\n                {{ $t('global.status.enabled') }}\n              </span>\n              <span v-else>{{ $t('global.status.disabled') }}</span>\n            </b-form-checkbox>\n          </dd>\n        </dl>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <h3 class=\"h5\">\n          {{ $t('pageNetwork.ipv4Addresses') }}\n        </h3>\n      </b-col>\n      <b-col class=\"text-right\">\n        <b-button variant=\"primary\" @click=\"initAddIpv4Address()\">\n          <icon-add />\n          {{ $t('pageNetwork.table.addIpv4Address') }}\n        </b-button>\n      </b-col>\n    </b-row>\n    <b-table\n      responsive=\"md\"\n      hover\n      :fields=\"ipv4TableFields\"\n      :items=\"form.ipv4TableItems\"\n      :empty-text=\"$t('global.table.emptyMessage')\"\n      class=\"mb-0\"\n      show-empty\n    >\n      <template #cell(actions)=\"{ item, index }\">\n        <table-row-action\n          v-for=\"(action, actionIndex) in filteredActions(item)\"\n          :key=\"actionIndex\"\n          :value=\"action.value\"\n          :title=\"action.title\"\n          :enabled=\"action.enabled\"\n          @click-table-action=\"onIpv4TableAction(action, $event, index)\"\n        >\n          <template #icon>\n            <icon-edit v-if=\"action.value === 'edit'\" />\n            <icon-trashcan v-if=\"action.value === 'delete'\" />\n          </template>\n        </table-row-action>\n      </template>\n    </b-table>\n  </page-section>\n</template>\n\n<script>\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconEdit from '@carbon/icons-vue/es/edit/20';\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport PageSection from '@/components/Global/PageSection';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  name: 'Ipv4Table',\n  components: {\n    IconAdd,\n    IconEdit,\n    IconTrashcan,\n    PageSection,\n    TableRowAction,\n  },\n  mixins: [BVToastMixin, LoadingBarMixin],\n  props: {\n    tabIndex: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        ipv4TableItems: [],\n      },\n      actions: [\n        {\n          value: 'edit',\n          title: i18n.global.t('global.action.edit'),\n        },\n        {\n          value: 'delete',\n          title: i18n.global.t('global.action.delete'),\n        },\n      ],\n      ipv4TableFields: [\n        {\n          key: 'Address',\n          label: i18n.global.t('pageNetwork.table.ipAddress'),\n        },\n        {\n          key: 'Gateway',\n          label: i18n.global.t('pageNetwork.table.gateway'),\n        },\n        {\n          key: 'SubnetMask',\n          label: i18n.global.t('pageNetwork.table.subnet'),\n        },\n        {\n          key: 'AddressOrigin',\n          label: i18n.global.t('pageNetwork.table.addressOrigin'),\n        },\n        { key: 'actions', label: '', tdClass: 'text-right' },\n      ],\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData']),\n    selectedInterface() {\n      return this.$store.getters['network/selectedInterfaceIndex'];\n    },\n    dhcpEnabledState: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][\n          this.selectedInterface\n        ].dhcpEnabled;\n      },\n      set(newValue) {\n        return newValue;\n      },\n    },\n    filteredActions() {\n      return (item) => {\n        if (item.AddressOrigin === 'DHCP') {\n          return item.actions.filter((action) => action.value !== 'delete');\n        } else {\n          return item.actions;\n        }\n      };\n    },\n  },\n  watch: {\n    // Watch for change in tab index\n    tabIndex() {\n      this.getIpv4TableItems();\n    },\n    ethernetData() {\n      this.getIpv4TableItems();\n    },\n  },\n  created() {\n    this.getIpv4TableItems();\n    this.$store.dispatch('network/getEthernetData').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('network-table-ipv4-complete');\n    });\n  },\n  methods: {\n    getIpv4TableItems() {\n      const index = this.tabIndex;\n      const addresses = this.ethernetData[index].IPv4Addresses || [];\n      this.form.ipv4TableItems = addresses.map((ipv4) => {\n        return {\n          Address: ipv4.Address,\n          SubnetMask: ipv4.SubnetMask,\n          Gateway: ipv4.Gateway,\n          AddressOrigin: ipv4.AddressOrigin,\n          actions: [\n            {\n              value: 'delete',\n              title: i18n.global.t('pageNetwork.table.deleteIpv4'),\n            },\n          ],\n        };\n      });\n    },\n    onIpv4TableAction(action, $event, index) {\n      if ($event === 'delete') {\n        this.deleteIpv4TableRow(index);\n      }\n    },\n    deleteIpv4TableRow(index) {\n      this.form.ipv4TableItems.splice(index, 1);\n      const newIpv4Array = this.form.ipv4TableItems.map((ipv4) => {\n        const { Address, SubnetMask, Gateway } = ipv4;\n        return {\n          Address,\n          SubnetMask,\n          Gateway,\n        };\n      });\n      this.$store\n        .dispatch('network/editIpv4Address', newIpv4Array)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message));\n    },\n    initAddIpv4Address() {\n      this.$bvModal.show('modal-add-ipv4');\n    },\n    changeDhcpEnabledState(state) {\n      this.$bvModal\n        .msgBoxConfirm(\n          state\n            ? i18n.global.t('pageNetwork.modal.confirmEnableDhcp')\n            : i18n.global.t('pageNetwork.modal.confirmDisableDhcp'),\n          {\n            title: i18n.global.t('pageNetwork.modal.dhcpConfirmTitle', {\n              dhcpState: state\n                ? i18n.global.t('global.action.enable')\n                : i18n.global.t('global.action.disable'),\n            }),\n            okTitle: state\n              ? i18n.global.t('global.action.enable')\n              : i18n.global.t('global.action.disable'),\n            okVariant: 'danger',\n            cancelTitle: i18n.global.t('global.action.cancel'),\n            autoFocusButton: 'cancel',\n          },\n        )\n        .then((dhcpEnableConfirmed) => {\n          if (dhcpEnableConfirmed) {\n            this.$store\n              .dispatch('network/saveDhcpEnabledState', state)\n              .then((message) => this.successToast(message))\n              .catch(({ message }) => this.errorToast(message));\n          } else {\n            let onDhcpCancel = document.getElementById('dhcpSwitch');\n            onDhcpCancel.checked = !state;\n          }\n        });\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}