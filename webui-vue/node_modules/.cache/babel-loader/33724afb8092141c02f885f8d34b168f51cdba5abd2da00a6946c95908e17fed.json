{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst ProcessorStore = {\n  namespaced: true,\n  state: {\n    processors: []\n  },\n  getters: {\n    processors: state => state.processors\n  },\n  mutations: {\n    setProcessorsInfo: (state, data) => {\n      state.processors = data.map(processor => {\n        const {\n          Id,\n          Status = {},\n          PartNumber,\n          SerialNumber,\n          SparePartNumber,\n          InstructionSet,\n          Manufacturer,\n          Model,\n          Name,\n          ProcessorArchitecture,\n          ProcessorType,\n          Version,\n          AssetTag,\n          MinSpeedMHz,\n          MaxSpeedMHz,\n          TotalCores,\n          TotalThreads,\n          Location,\n          LocationIndicatorActive\n        } = processor;\n        return {\n          id: Id,\n          health: Status.Health,\n          healthRollup: Status.HealthRollup,\n          partNumber: PartNumber,\n          sparePartNumber: SparePartNumber,\n          serialNumber: SerialNumber,\n          statusState: Status.State,\n          instructionSet: InstructionSet,\n          manufacturer: Manufacturer,\n          model: Model,\n          name: Name,\n          processorArchitecture: ProcessorArchitecture,\n          processorType: ProcessorType,\n          version: Version,\n          assetTag: AssetTag,\n          minSpeedMHz: MinSpeedMHz,\n          maxSpeedMHz: MaxSpeedMHz,\n          totalCores: TotalCores,\n          totalThreads: TotalThreads,\n          locationNumber: Location?.PartLocation?.ServiceLabel,\n          identifyLed: LocationIndicatorActive,\n          uri: processor['@odata.id']\n        };\n      });\n    }\n  },\n  actions: {\n    async getProcessorsInfo({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getSystemPath')}/Processors`).then(({\n        data: {\n          Members = []\n        }\n      }) => Members.map(member => api.get(member['@odata.id']))).then(promises => api.all(promises)).then(response => {\n        const data = response.map(({\n          data\n        }) => data);\n        commit('setProcessorsInfo', data);\n      }).catch(error => console.log(error));\n    },\n    // Waiting for the following to be merged to test the Identify Led:\n    // https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/37045\n    async updateIdentifyLedValue({\n      dispatch\n    }, led) {\n      const uri = led.uri;\n      const updatedIdentifyLedValue = {\n        LocationIndicatorActive: led.identifyLed\n      };\n      return await api.patch(uri, updatedIdentifyLedValue).then(() => {\n        if (led.identifyLed) {\n          return i18n.global.t('pageInventory.toast.successEnableIdentifyLed');\n        } else {\n          return i18n.global.t('pageInventory.toast.successDisableIdentifyLed');\n        }\n      }).catch(error => {\n        dispatch('getProcessorsInfo');\n        console.log('error', error);\n        if (led.identifyLed) {\n          throw new Error(i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'));\n        } else {\n          throw new Error(i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'));\n        }\n      });\n    }\n  }\n};\nexport default ProcessorStore;","map":{"version":3,"names":["api","i18n","ProcessorStore","namespaced","state","processors","getters","mutations","setProcessorsInfo","data","map","processor","Id","Status","PartNumber","SerialNumber","SparePartNumber","InstructionSet","Manufacturer","Model","Name","ProcessorArchitecture","ProcessorType","Version","AssetTag","MinSpeedMHz","MaxSpeedMHz","TotalCores","TotalThreads","Location","LocationIndicatorActive","id","health","Health","healthRollup","HealthRollup","partNumber","sparePartNumber","serialNumber","statusState","State","instructionSet","manufacturer","model","name","processorArchitecture","processorType","version","assetTag","minSpeedMHz","maxSpeedMHz","totalCores","totalThreads","locationNumber","PartLocation","ServiceLabel","identifyLed","uri","actions","getProcessorsInfo","commit","get","dispatch","then","Members","member","promises","all","response","catch","error","console","log","updateIdentifyLedValue","led","updatedIdentifyLedValue","patch","global","t","Error"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/HardwareStatus/ProcessorStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst ProcessorStore = {\n  namespaced: true,\n  state: {\n    processors: [],\n  },\n  getters: {\n    processors: (state) => state.processors,\n  },\n  mutations: {\n    setProcessorsInfo: (state, data) => {\n      state.processors = data.map((processor) => {\n        const {\n          Id,\n          Status = {},\n          PartNumber,\n          SerialNumber,\n          SparePartNumber,\n          InstructionSet,\n          Manufacturer,\n          Model,\n          Name,\n          ProcessorArchitecture,\n          ProcessorType,\n          Version,\n          AssetTag,\n          MinSpeedMHz,\n          MaxSpeedMHz,\n          TotalCores,\n          TotalThreads,\n          Location,\n          LocationIndicatorActive,\n        } = processor;\n        return {\n          id: Id,\n          health: Status.Health,\n          healthRollup: Status.HealthRollup,\n          partNumber: PartNumber,\n          sparePartNumber: SparePartNumber,\n          serialNumber: SerialNumber,\n          statusState: Status.State,\n          instructionSet: InstructionSet,\n          manufacturer: Manufacturer,\n          model: Model,\n          name: Name,\n          processorArchitecture: ProcessorArchitecture,\n          processorType: ProcessorType,\n          version: Version,\n          assetTag: AssetTag,\n          minSpeedMHz: MinSpeedMHz,\n          maxSpeedMHz: MaxSpeedMHz,\n          totalCores: TotalCores,\n          totalThreads: TotalThreads,\n          locationNumber: Location?.PartLocation?.ServiceLabel,\n          identifyLed: LocationIndicatorActive,\n          uri: processor['@odata.id'],\n        };\n      });\n    },\n  },\n  actions: {\n    async getProcessorsInfo({ commit }) {\n      return await api\n        .get(`${await this.dispatch('global/getSystemPath')}/Processors`)\n        .then(({ data: { Members = [] } }) =>\n          Members.map((member) => api.get(member['@odata.id'])),\n        )\n        .then((promises) => api.all(promises))\n        .then((response) => {\n          const data = response.map(({ data }) => data);\n          commit('setProcessorsInfo', data);\n        })\n        .catch((error) => console.log(error));\n    },\n    // Waiting for the following to be merged to test the Identify Led:\n    // https://gerrit.openbmc-project.xyz/c/openbmc/bmcweb/+/37045\n    async updateIdentifyLedValue({ dispatch }, led) {\n      const uri = led.uri;\n      const updatedIdentifyLedValue = {\n        LocationIndicatorActive: led.identifyLed,\n      };\n      return await api\n        .patch(uri, updatedIdentifyLedValue)\n        .then(() => {\n          if (led.identifyLed) {\n            return i18n.global.t(\n              'pageInventory.toast.successEnableIdentifyLed',\n            );\n          } else {\n            return i18n.global.t(\n              'pageInventory.toast.successDisableIdentifyLed',\n            );\n          }\n        })\n        .catch((error) => {\n          dispatch('getProcessorsInfo');\n          console.log('error', error);\n          if (led.identifyLed) {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'),\n            );\n          } else {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'),\n            );\n          }\n        });\n    },\n  },\n};\n\nexport default ProcessorStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}