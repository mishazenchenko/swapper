{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  class: \"h5\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_b_form_checkbox = _resolveComponent(\"b-form-checkbox\");\n  const _component_b_col = _resolveComponent(\"b-col\");\n  const _component_b_row = _resolveComponent(\"b-row\");\n  const _component_icon_add = _resolveComponent(\"icon-add\");\n  const _component_b_button = _resolveComponent(\"b-button\");\n  const _component_icon_edit = _resolveComponent(\"icon-edit\");\n  const _component_icon_trashcan = _resolveComponent(\"icon-trashcan\");\n  const _component_table_row_action = _resolveComponent(\"table-row-action\");\n  const _component_b_table = _resolveComponent(\"b-table\");\n  const _component_page_section = _resolveComponent(\"page-section\");\n  return _openBlock(), _createBlock(_component_page_section, {\n    \"section-title\": $data.$t('pageNetwork.ipv4')\n  }, {\n    default: _withCtx(() => [_createVNode(_component_b_row, {\n      class: \"mb-4\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_b_col, {\n        lg: \"2\",\n        md: \"6\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"dl\", null, [_createElementVNode(\"dt\", null, _toDisplayString($data.$t('pageNetwork.dhcp')), 1 /* TEXT */), _createElementVNode(\"dd\", null, [_createVNode(_component_b_form_checkbox, {\n          id: \"dhcpSwitch\",\n          modelValue: $options.dhcpEnabledState,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $options.dhcpEnabledState = $event),\n          \"data-test-id\": \"networkSettings-switch-dhcpEnabled\",\n          switch: \"\",\n          onChange: $options.changeDhcpEnabledState\n        }, {\n          default: _withCtx(() => [$options.dhcpEnabledState ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, _toDisplayString($data.$t('global.status.enabled')), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString($data.$t('global.status.disabled')), 1 /* TEXT */))], undefined, true),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])])])], undefined, true),\n        _: 1 /* STABLE */\n      })], undefined, true),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_b_row, null, {\n      default: _withCtx(() => [_createVNode(_component_b_col, null, {\n        default: _withCtx(() => [_createElementVNode(\"h3\", _hoisted_3, _toDisplayString($data.$t('pageNetwork.ipv4Addresses')), 1 /* TEXT */)], undefined, true),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_b_col, {\n        class: \"text-right\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_b_button, {\n          variant: \"primary\",\n          onClick: _cache[1] || (_cache[1] = $event => $options.initAddIpv4Address())\n        }, {\n          default: _withCtx(() => [_createVNode(_component_icon_add), _createTextVNode(\" \" + _toDisplayString($data.$t('pageNetwork.table.addIpv4Address')), 1 /* TEXT */)], undefined, true),\n          _: 1 /* STABLE */\n        })], undefined, true),\n        _: 1 /* STABLE */\n      })], undefined, true),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_b_table, {\n      responsive: \"md\",\n      hover: \"\",\n      fields: $data.ipv4TableFields,\n      items: $data.form.ipv4TableItems,\n      \"empty-text\": $data.$t('global.table.emptyMessage'),\n      class: \"mb-0\",\n      \"show-empty\": \"\"\n    }, {\n      \"cell(actions)\": _withCtx(({\n        item,\n        index\n      }) => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredActions(item), (action, actionIndex) => {\n        return _openBlock(), _createBlock(_component_table_row_action, {\n          key: actionIndex,\n          value: action.value,\n          title: action.title,\n          enabled: action.enabled,\n          onClickTableAction: $event => $options.onIpv4TableAction(action, $event, index)\n        }, {\n          icon: _withCtx(() => [action.value === 'edit' ? (_openBlock(), _createBlock(_component_icon_edit, {\n            key: 0\n          })) : _createCommentVNode(\"v-if\", true), action.value === 'delete' ? (_openBlock(), _createBlock(_component_icon_trashcan, {\n            key: 1\n          })) : _createCommentVNode(\"v-if\", true)]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"value\", \"title\", \"enabled\", \"onClickTableAction\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"fields\", \"items\", \"empty-text\"])], undefined, true),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"section-title\"]);\n}","map":{"version":3,"names":["key","class","_createBlock","_component_page_section","$data","$t","default","_withCtx","_createVNode","_component_b_row","_component_b_col","lg","md","_createElementVNode","_toDisplayString","_component_b_form_checkbox","id","modelValue","$options","dhcpEnabledState","_cache","$event","switch","onChange","changeDhcpEnabledState","_createElementBlock","_hoisted_1","_hoisted_2","_","_hoisted_3","_component_b_button","variant","onClick","initAddIpv4Address","_component_icon_add","_createTextVNode","_component_b_table","responsive","hover","fields","ipv4TableFields","items","form","ipv4TableItems","item","index","_Fragment","_renderList","filteredActions","action","actionIndex","_component_table_row_action","value","title","enabled","onClickTableAction","onIpv4TableAction","icon","_component_icon_edit","_createCommentVNode","_component_icon_trashcan"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Settings/Network/TableIpv4.vue"],"sourcesContent":["<template>\n  <page-section :section-title=\"$t('pageNetwork.ipv4')\">\n    <b-row class=\"mb-4\">\n      <b-col lg=\"2\" md=\"6\">\n        <dl>\n          <dt>{{ $t('pageNetwork.dhcp') }}</dt>\n          <dd>\n            <b-form-checkbox\n              id=\"dhcpSwitch\"\n              v-model=\"dhcpEnabledState\"\n              data-test-id=\"networkSettings-switch-dhcpEnabled\"\n              switch\n              @change=\"changeDhcpEnabledState\"\n            >\n              <span v-if=\"dhcpEnabledState\">\n                {{ $t('global.status.enabled') }}\n              </span>\n              <span v-else>{{ $t('global.status.disabled') }}</span>\n            </b-form-checkbox>\n          </dd>\n        </dl>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <h3 class=\"h5\">\n          {{ $t('pageNetwork.ipv4Addresses') }}\n        </h3>\n      </b-col>\n      <b-col class=\"text-right\">\n        <b-button variant=\"primary\" @click=\"initAddIpv4Address()\">\n          <icon-add />\n          {{ $t('pageNetwork.table.addIpv4Address') }}\n        </b-button>\n      </b-col>\n    </b-row>\n    <b-table\n      responsive=\"md\"\n      hover\n      :fields=\"ipv4TableFields\"\n      :items=\"form.ipv4TableItems\"\n      :empty-text=\"$t('global.table.emptyMessage')\"\n      class=\"mb-0\"\n      show-empty\n    >\n      <template #cell(actions)=\"{ item, index }\">\n        <table-row-action\n          v-for=\"(action, actionIndex) in filteredActions(item)\"\n          :key=\"actionIndex\"\n          :value=\"action.value\"\n          :title=\"action.title\"\n          :enabled=\"action.enabled\"\n          @click-table-action=\"onIpv4TableAction(action, $event, index)\"\n        >\n          <template #icon>\n            <icon-edit v-if=\"action.value === 'edit'\" />\n            <icon-trashcan v-if=\"action.value === 'delete'\" />\n          </template>\n        </table-row-action>\n      </template>\n    </b-table>\n  </page-section>\n</template>\n\n<script>\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconEdit from '@carbon/icons-vue/es/edit/20';\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport PageSection from '@/components/Global/PageSection';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  name: 'Ipv4Table',\n  components: {\n    IconAdd,\n    IconEdit,\n    IconTrashcan,\n    PageSection,\n    TableRowAction,\n  },\n  mixins: [BVToastMixin, LoadingBarMixin],\n  props: {\n    tabIndex: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        ipv4TableItems: [],\n      },\n      actions: [\n        {\n          value: 'edit',\n          title: i18n.global.t('global.action.edit'),\n        },\n        {\n          value: 'delete',\n          title: i18n.global.t('global.action.delete'),\n        },\n      ],\n      ipv4TableFields: [\n        {\n          key: 'Address',\n          label: i18n.global.t('pageNetwork.table.ipAddress'),\n        },\n        {\n          key: 'Gateway',\n          label: i18n.global.t('pageNetwork.table.gateway'),\n        },\n        {\n          key: 'SubnetMask',\n          label: i18n.global.t('pageNetwork.table.subnet'),\n        },\n        {\n          key: 'AddressOrigin',\n          label: i18n.global.t('pageNetwork.table.addressOrigin'),\n        },\n        { key: 'actions', label: '', tdClass: 'text-right' },\n      ],\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData']),\n    selectedInterface() {\n      return this.$store.getters['network/selectedInterfaceIndex'];\n    },\n    dhcpEnabledState: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][\n          this.selectedInterface\n        ].dhcpEnabled;\n      },\n      set(newValue) {\n        return newValue;\n      },\n    },\n    filteredActions() {\n      return (item) => {\n        if (item.AddressOrigin === 'DHCP') {\n          return item.actions.filter((action) => action.value !== 'delete');\n        } else {\n          return item.actions;\n        }\n      };\n    },\n  },\n  watch: {\n    // Watch for change in tab index\n    tabIndex() {\n      this.getIpv4TableItems();\n    },\n    ethernetData() {\n      this.getIpv4TableItems();\n    },\n  },\n  created() {\n    this.getIpv4TableItems();\n    this.$store.dispatch('network/getEthernetData').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('network-table-ipv4-complete');\n    });\n  },\n  methods: {\n    getIpv4TableItems() {\n      const index = this.tabIndex;\n      const addresses = this.ethernetData[index].IPv4Addresses || [];\n      this.form.ipv4TableItems = addresses.map((ipv4) => {\n        return {\n          Address: ipv4.Address,\n          SubnetMask: ipv4.SubnetMask,\n          Gateway: ipv4.Gateway,\n          AddressOrigin: ipv4.AddressOrigin,\n          actions: [\n            {\n              value: 'delete',\n              title: i18n.global.t('pageNetwork.table.deleteIpv4'),\n            },\n          ],\n        };\n      });\n    },\n    onIpv4TableAction(action, $event, index) {\n      if ($event === 'delete') {\n        this.deleteIpv4TableRow(index);\n      }\n    },\n    deleteIpv4TableRow(index) {\n      this.form.ipv4TableItems.splice(index, 1);\n      const newIpv4Array = this.form.ipv4TableItems.map((ipv4) => {\n        const { Address, SubnetMask, Gateway } = ipv4;\n        return {\n          Address,\n          SubnetMask,\n          Gateway,\n        };\n      });\n      this.$store\n        .dispatch('network/editIpv4Address', newIpv4Array)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message));\n    },\n    initAddIpv4Address() {\n      this.$bvModal.show('modal-add-ipv4');\n    },\n    changeDhcpEnabledState(state) {\n      this.$bvModal\n        .msgBoxConfirm(\n          state\n            ? i18n.global.t('pageNetwork.modal.confirmEnableDhcp')\n            : i18n.global.t('pageNetwork.modal.confirmDisableDhcp'),\n          {\n            title: i18n.global.t('pageNetwork.modal.dhcpConfirmTitle', {\n              dhcpState: state\n                ? i18n.global.t('global.action.enable')\n                : i18n.global.t('global.action.disable'),\n            }),\n            okTitle: state\n              ? i18n.global.t('global.action.enable')\n              : i18n.global.t('global.action.disable'),\n            okVariant: 'danger',\n            cancelTitle: i18n.global.t('global.action.cancel'),\n            autoFocusButton: 'cancel',\n          },\n        )\n        .then((dhcpEnableConfirmed) => {\n          if (dhcpEnableConfirmed) {\n            this.$store\n              .dispatch('network/saveDhcpEnabledState', state)\n              .then((message) => this.successToast(message))\n              .catch(({ message }) => this.errorToast(message));\n          } else {\n            let onDhcpCancel = document.getElementById('dhcpSwitch');\n            onDhcpCancel.checked = !state;\n          }\n        });\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}