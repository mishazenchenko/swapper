{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst transferProtocolType = {\n  CIFS: 'CIFS',\n  FTP: 'FTP',\n  SFTP: 'SFTP',\n  HTTP: 'HTTP',\n  HTTPS: 'HTTPS',\n  NFS: 'NFS',\n  SCP: 'SCP',\n  TFTP: 'TFTP',\n  OEM: 'OEM'\n};\nconst VirtualMediaStore = {\n  namespaced: true,\n  state: {\n    proxyDevices: [],\n    legacyDevices: [],\n    connections: []\n  },\n  getters: {\n    proxyDevices: state => state.proxyDevices,\n    legacyDevices: state => state.legacyDevices\n  },\n  mutations: {\n    setProxyDevicesData: (state, deviceData) => state.proxyDevices = deviceData,\n    setLegacyDevicesData: (state, deviceData) => state.legacyDevices = deviceData\n  },\n  actions: {\n    async getData({\n      commit\n    }) {\n      const virtualMediaListEnabled = process.env.VUE_APP_VIRTUAL_MEDIA_LIST_ENABLED === 'true' ? true : false;\n      if (!virtualMediaListEnabled) {\n        const device = {\n          id: i18n.global.t('pageVirtualMedia.defaultDeviceName'),\n          websocket: '/vm/0/0',\n          file: null,\n          transferProtocolType: transferProtocolType.OEM,\n          isActive: false\n        };\n        commit('setProxyDevicesData', [device]);\n        return;\n      }\n      return await api.get(`${await this.dispatch('global/getBmcPath')}/VirtualMedia`).then(response => response.data.Members.map(virtualMedia => virtualMedia['@odata.id'])).then(devices => api.all(devices.map(device => api.get(device)))).then(devices => {\n        const deviceData = devices.map(device => {\n          const isActive = device.data?.Inserted === true ? true : false;\n          return {\n            id: device.data?.Id,\n            transferProtocolType: device.data?.TransferProtocolType,\n            websocket: device.data?.Oem?.OpenBMC?.WebSocketEndpoint,\n            isActive: isActive\n          };\n        });\n        const proxyDevices = deviceData.filter(d => d.transferProtocolType === transferProtocolType.OEM).map(device => {\n          return {\n            ...device,\n            file: null\n          };\n        });\n        const legacyDevices = deviceData.filter(d => d.transferProtocolType !== transferProtocolType.OEM).map(device => {\n          return {\n            ...device,\n            serverUri: '',\n            username: '',\n            password: '',\n            isRW: false\n          };\n        });\n        commit('setProxyDevicesData', proxyDevices);\n        commit('setLegacyDevicesData', legacyDevices);\n      }).catch(error => {\n        console.log('Virtual Media:', error);\n      });\n    },\n    async mountImage(_, {\n      id,\n      data\n    }) {\n      return await api.post(`${await this.dispatch('global/getBmcPath')}/VirtualMedia/${id}/Actions/VirtualMedia.InsertMedia`, data).catch(error => {\n        console.log('Mount image:', error);\n        throw new Error();\n      });\n    },\n    async unmountImage(_, id) {\n      return await api.post(`${await this.dispatch('global/getBmcPath')}/VirtualMedia/${id}/Actions/VirtualMedia.EjectMedia`).catch(error => {\n        console.log('Unmount image:', error);\n        throw new Error();\n      });\n    }\n  }\n};\nexport default VirtualMediaStore;","map":{"version":3,"names":["api","i18n","transferProtocolType","CIFS","FTP","SFTP","HTTP","HTTPS","NFS","SCP","TFTP","OEM","VirtualMediaStore","namespaced","state","proxyDevices","legacyDevices","connections","getters","mutations","setProxyDevicesData","deviceData","setLegacyDevicesData","actions","getData","commit","virtualMediaListEnabled","process","env","VUE_APP_VIRTUAL_MEDIA_LIST_ENABLED","device","id","global","t","websocket","file","isActive","get","dispatch","then","response","data","Members","map","virtualMedia","devices","all","Inserted","Id","TransferProtocolType","Oem","OpenBMC","WebSocketEndpoint","filter","d","serverUri","username","password","isRW","catch","error","console","log","mountImage","_","post","Error","unmountImage"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/Operations/VirtualMediaStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst transferProtocolType = {\n  CIFS: 'CIFS',\n  FTP: 'FTP',\n  SFTP: 'SFTP',\n  HTTP: 'HTTP',\n  HTTPS: 'HTTPS',\n  NFS: 'NFS',\n  SCP: 'SCP',\n  TFTP: 'TFTP',\n  OEM: 'OEM',\n};\n\nconst VirtualMediaStore = {\n  namespaced: true,\n  state: {\n    proxyDevices: [],\n    legacyDevices: [],\n    connections: [],\n  },\n  getters: {\n    proxyDevices: (state) => state.proxyDevices,\n    legacyDevices: (state) => state.legacyDevices,\n  },\n  mutations: {\n    setProxyDevicesData: (state, deviceData) =>\n      (state.proxyDevices = deviceData),\n    setLegacyDevicesData: (state, deviceData) =>\n      (state.legacyDevices = deviceData),\n  },\n  actions: {\n    async getData({ commit }) {\n      const virtualMediaListEnabled =\n        process.env.VUE_APP_VIRTUAL_MEDIA_LIST_ENABLED === 'true'\n          ? true\n          : false;\n      if (!virtualMediaListEnabled) {\n        const device = {\n          id: i18n.global.t('pageVirtualMedia.defaultDeviceName'),\n          websocket: '/vm/0/0',\n          file: null,\n          transferProtocolType: transferProtocolType.OEM,\n          isActive: false,\n        };\n        commit('setProxyDevicesData', [device]);\n        return;\n      }\n\n      return await api\n        .get(`${await this.dispatch('global/getBmcPath')}/VirtualMedia`)\n        .then((response) =>\n          response.data.Members.map(\n            (virtualMedia) => virtualMedia['@odata.id'],\n          ),\n        )\n        .then((devices) => api.all(devices.map((device) => api.get(device))))\n        .then((devices) => {\n          const deviceData = devices.map((device) => {\n            const isActive = device.data?.Inserted === true ? true : false;\n            return {\n              id: device.data?.Id,\n              transferProtocolType: device.data?.TransferProtocolType,\n              websocket: device.data?.Oem?.OpenBMC?.WebSocketEndpoint,\n              isActive: isActive,\n            };\n          });\n          const proxyDevices = deviceData\n            .filter((d) => d.transferProtocolType === transferProtocolType.OEM)\n            .map((device) => {\n              return {\n                ...device,\n                file: null,\n              };\n            });\n          const legacyDevices = deviceData\n            .filter((d) => d.transferProtocolType !== transferProtocolType.OEM)\n            .map((device) => {\n              return {\n                ...device,\n                serverUri: '',\n                username: '',\n                password: '',\n                isRW: false,\n              };\n            });\n          commit('setProxyDevicesData', proxyDevices);\n          commit('setLegacyDevicesData', legacyDevices);\n        })\n        .catch((error) => {\n          console.log('Virtual Media:', error);\n        });\n    },\n    async mountImage(_, { id, data }) {\n      return await api\n        .post(\n          `${await this.dispatch('global/getBmcPath')}/VirtualMedia/${id}/Actions/VirtualMedia.InsertMedia`,\n          data,\n        )\n        .catch((error) => {\n          console.log('Mount image:', error);\n          throw new Error();\n        });\n    },\n    async unmountImage(_, id) {\n      return await api\n        .post(\n          `${await this.dispatch('global/getBmcPath')}/VirtualMedia/${id}/Actions/VirtualMedia.EjectMedia`,\n        )\n        .catch((error) => {\n          console.log('Unmount image:', error);\n          throw new Error();\n        });\n    },\n  },\n};\n\nexport default VirtualMediaStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}