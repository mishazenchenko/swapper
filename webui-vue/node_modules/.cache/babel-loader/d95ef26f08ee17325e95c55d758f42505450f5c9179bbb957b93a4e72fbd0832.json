{"ast":null,"code":"import BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport InputPasswordToggle from '@/components/Global/InputPasswordToggle';\nimport { maxLength, minLength, sameAs } from '@vuelidate/validators';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport LocalTimezoneLabelMixin from '@/components/Mixins/LocalTimezoneLabelMixin';\nimport PageTitle from '@/components/Global/PageTitle';\nimport PageSection from '@/components/Global/PageSection';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  name: 'ProfileSettings',\n  components: {\n    InputPasswordToggle,\n    PageSection,\n    PageTitle\n  },\n  mixins: [BVToastMixin, LocalTimezoneLabelMixin, LoadingBarMixin, VuelidateMixin],\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        newPassword: '',\n        confirmPassword: '',\n        currentPassword: '',\n        isUtcDisplay: this.$store.getters['global/isUtcDisplay']\n      }\n    };\n  },\n  computed: {\n    username() {\n      return this.$store.getters['global/username'];\n    },\n    passwordRequirements() {\n      return this.$store.getters['userManagement/accountPasswordRequirements'];\n    },\n    timezone() {\n      return this.localOffset();\n    }\n  },\n  created() {\n    this.startLoader();\n    this.$store.dispatch('userManagement/getAccountSettings').finally(() => this.endLoader());\n  },\n  validations() {\n    return {\n      form: {\n        newPassword: {\n          minLength: minLength(this.passwordRequirements.minLength),\n          maxLength: maxLength(this.passwordRequirements.maxLength)\n        },\n        confirmPassword: {\n          sameAsPassword: sameAs('newPassword')\n        }\n      }\n    };\n  },\n  methods: {\n    saveNewPasswordInputData() {\n      this.v$.form.confirmPassword.$touch();\n      this.v$.form.newPassword.$touch();\n      if (this.v$.$invalid) return;\n      let userData = {\n        originalUsername: this.username,\n        password: this.form.newPassword\n      };\n      this.$store.dispatch('userManagement/updateUser', userData).then(message => {\n        this.form.newPassword = '', this.form.confirmPassword = '', this.form.currentPassword = '';\n        this.v$.$reset();\n        this.successToast(message);\n        this.$store.dispatch('authentication/logout');\n      }).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    saveTimeZonePrefrenceData() {\n      localStorage.setItem('storedUtcDisplay', this.form.isUtcDisplay);\n      this.$store.commit('global/setUtcTime', this.form.isUtcDisplay);\n      this.successToast(i18n.global.t('pageProfileSettings.toast.successUpdatingTimeZone'));\n    },\n    submitForm() {\n      if (this.form.confirmPassword && this.form.newPassword && this.form.currentPassword) {\n        this.confirmAuthenticate();\n      }\n      if (this.$store.getters['global/isUtcDisplay'] != this.form.isUtcDisplay) {\n        this.saveTimeZonePrefrenceData();\n      }\n    },\n    confirmAuthenticate() {\n      this.v$.form.newPassword.$touch();\n      if (this.v$.$invalid) return;\n      const username = this.username;\n      const password = this.form.currentPassword;\n      this.$store.dispatch('authentication/login', {\n        username,\n        password\n      }).then(() => {\n        this.saveNewPasswordInputData();\n      }).catch(() => {\n        this.v$.$reset();\n        this.errorToast(i18n.global.t('pageProfileSettings.toast.wrongCredentials'));\n      });\n    }\n  }\n};","map":{"version":3,"names":["BVToastMixin","InputPasswordToggle","maxLength","minLength","sameAs","LoadingBarMixin","LocalTimezoneLabelMixin","PageTitle","PageSection","VuelidateMixin","useVuelidate","useI18n","i18n","name","components","mixins","setup","v$","data","$t","t","form","newPassword","confirmPassword","currentPassword","isUtcDisplay","$store","getters","computed","username","passwordRequirements","timezone","localOffset","created","startLoader","dispatch","finally","endLoader","validations","sameAsPassword","methods","saveNewPasswordInputData","$touch","$invalid","userData","originalUsername","password","then","message","$reset","successToast","catch","errorToast","saveTimeZonePrefrenceData","localStorage","setItem","commit","global","submitForm","confirmAuthenticate"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/ProfileSettings/ProfileSettings.vue"],"sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title />\n\n    <b-row>\n      <b-col md=\"8\" lg=\"8\" xl=\"6\">\n        <page-section\n          :section-title=\"$t('pageProfileSettings.profileInfoTitle')\"\n        >\n          <dl>\n            <dt>{{ $t('pageProfileSettings.username') }}</dt>\n            <dd>\n              {{ username }}\n            </dd>\n          </dl>\n        </page-section>\n      </b-col>\n    </b-row>\n\n    <b-form @submit.prevent=\"submitForm\">\n      <b-row>\n        <b-col sm=\"8\" md=\"6\" xl=\"3\">\n          <page-section\n            :section-title=\"$t('pageProfileSettings.changePassword')\"\n          >\n            <b-form-group\n              id=\"input-group-0\"\n              :label=\"$t('pageProfileSettings.currentPassword')\"\n              label-for=\"input-0\"\n            >\n              <input-password-toggle>\n                <b-form-input\n                  id=\"old-password\"\n                  v-model=\"form.currentPassword\"\n                  type=\"password\"\n                  data-test-id=\"profileSettings-input-ocurrentPassword\"\n                  class=\"form-control-with-button\"\n                />\n              </input-password-toggle>\n            </b-form-group>\n            <b-form-group\n              id=\"input-group-1\"\n              :label=\"$t('pageProfileSettings.newPassword')\"\n              label-for=\"input-1\"\n            >\n              <b-form-text id=\"password-help-block\">\n                {{\n                  $t('pageUserManagement.modal.passwordMustBeBetween', {\n                    min: passwordRequirements.minLength,\n                    max: passwordRequirements.maxLength,\n                  })\n                }}\n              </b-form-text>\n              <input-password-toggle>\n                <b-form-input\n                  id=\"password\"\n                  v-model=\"form.newPassword\"\n                  type=\"password\"\n                  aria-describedby=\"password-help-block\"\n                  :state=\"getValidationState(v$.form.newPassword)\"\n                  data-test-id=\"profileSettings-input-newPassword\"\n                  class=\"form-control-with-button\"\n                  @input=\"v$.form.newPassword.$touch()\"\n                />\n                <b-form-invalid-feedback role=\"alert\">\n                  <template\n                    v-if=\"\n                      v$.form.newPassword.minLength.$invalid ||\n                      v$.form.newPassword.maxLength.$invalid\n                    \"\n                  >\n                    {{\n                      $t('pageProfileSettings.newPassLabelTextInfo', {\n                        min: passwordRequirements.minLength,\n                        max: passwordRequirements.maxLength,\n                      })\n                    }}\n                  </template>\n                </b-form-invalid-feedback>\n              </input-password-toggle>\n            </b-form-group>\n            <b-form-group\n              id=\"input-group-2\"\n              :label=\"$t('pageProfileSettings.confirmPassword')\"\n              label-for=\"input-2\"\n            >\n              <input-password-toggle>\n                <b-form-input\n                  id=\"password-confirmation\"\n                  v-model=\"form.confirmPassword\"\n                  type=\"password\"\n                  :state=\"getValidationState(v$.form.confirmPassword)\"\n                  data-test-id=\"profileSettings-input-confirmPassword\"\n                  class=\"form-control-with-button\"\n                  @input=\"v$.form.confirmPassword.$touch()\"\n                />\n                <b-form-invalid-feedback role=\"alert\">\n                  <template\n                    v-if=\"v$.form.confirmPassword.sameAsPassword.$invalid\"\n                  >\n                    {{ $t('pageProfileSettings.passwordsDoNotMatch') }}\n                  </template>\n                </b-form-invalid-feedback>\n              </input-password-toggle>\n            </b-form-group>\n          </page-section>\n        </b-col>\n      </b-row>\n      <page-section :section-title=\"$t('pageProfileSettings.timezoneDisplay')\">\n        <p>{{ $t('pageProfileSettings.timezoneDisplayDesc') }}</p>\n        <b-row>\n          <b-col md=\"9\" lg=\"8\" xl=\"9\">\n            <b-form-group :label=\"$t('pageProfileSettings.timezone')\">\n              <b-form-radio\n                v-model=\"form.isUtcDisplay\"\n                :value=\"true\"\n                data-test-id=\"profileSettings-radio-defaultUTC\"\n              >\n                {{ $t('pageProfileSettings.defaultUTC') }}\n              </b-form-radio>\n              <b-form-radio\n                v-model=\"form.isUtcDisplay\"\n                :value=\"false\"\n                data-test-id=\"profileSettings-radio-browserOffset\"\n              >\n                {{\n                  $t('pageProfileSettings.browserOffset', {\n                    timezone,\n                  })\n                }}\n              </b-form-radio>\n            </b-form-group>\n          </b-col>\n        </b-row>\n      </page-section>\n      <b-button\n        variant=\"primary\"\n        type=\"submit\"\n        data-test-id=\"profileSettings-button-saveSettings\"\n      >\n        {{ $t('global.action.saveSettings') }}\n      </b-button>\n    </b-form>\n  </b-container>\n</template>\n\n<script>\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport InputPasswordToggle from '@/components/Global/InputPasswordToggle';\nimport { maxLength, minLength, sameAs } from '@vuelidate/validators';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport LocalTimezoneLabelMixin from '@/components/Mixins/LocalTimezoneLabelMixin';\nimport PageTitle from '@/components/Global/PageTitle';\nimport PageSection from '@/components/Global/PageSection';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  name: 'ProfileSettings',\n  components: { InputPasswordToggle, PageSection, PageTitle },\n  mixins: [\n    BVToastMixin,\n    LocalTimezoneLabelMixin,\n    LoadingBarMixin,\n    VuelidateMixin,\n  ],\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        newPassword: '',\n        confirmPassword: '',\n        currentPassword: '',\n        isUtcDisplay: this.$store.getters['global/isUtcDisplay'],\n      },\n    };\n  },\n  computed: {\n    username() {\n      return this.$store.getters['global/username'];\n    },\n    passwordRequirements() {\n      return this.$store.getters['userManagement/accountPasswordRequirements'];\n    },\n    timezone() {\n      return this.localOffset();\n    },\n  },\n  created() {\n    this.startLoader();\n    this.$store\n      .dispatch('userManagement/getAccountSettings')\n      .finally(() => this.endLoader());\n  },\n  validations() {\n    return {\n      form: {\n        newPassword: {\n          minLength: minLength(this.passwordRequirements.minLength),\n          maxLength: maxLength(this.passwordRequirements.maxLength),\n        },\n        confirmPassword: {\n          sameAsPassword: sameAs('newPassword'),\n        },\n      },\n    };\n  },\n  methods: {\n    saveNewPasswordInputData() {\n      this.v$.form.confirmPassword.$touch();\n      this.v$.form.newPassword.$touch();\n      if (this.v$.$invalid) return;\n      let userData = {\n        originalUsername: this.username,\n        password: this.form.newPassword,\n      };\n\n      this.$store\n        .dispatch('userManagement/updateUser', userData)\n        .then((message) => {\n          (this.form.newPassword = ''),\n            (this.form.confirmPassword = ''),\n            (this.form.currentPassword = '');\n          this.v$.$reset();\n          this.successToast(message);\n          this.$store.dispatch('authentication/logout');\n        })\n        .catch(({ message }) => this.errorToast(message));\n    },\n    saveTimeZonePrefrenceData() {\n      localStorage.setItem('storedUtcDisplay', this.form.isUtcDisplay);\n      this.$store.commit('global/setUtcTime', this.form.isUtcDisplay);\n      this.successToast(\n        i18n.global.t('pageProfileSettings.toast.successUpdatingTimeZone'),\n      );\n    },\n    submitForm() {\n      if (\n        this.form.confirmPassword &&\n        this.form.newPassword &&\n        this.form.currentPassword\n      ) {\n        this.confirmAuthenticate();\n      }\n      if (\n        this.$store.getters['global/isUtcDisplay'] != this.form.isUtcDisplay\n      ) {\n        this.saveTimeZonePrefrenceData();\n      }\n    },\n    confirmAuthenticate() {\n      this.v$.form.newPassword.$touch();\n      if (this.v$.$invalid) return;\n\n      const username = this.username;\n      const password = this.form.currentPassword;\n\n      this.$store\n        .dispatch('authentication/login', { username, password })\n        .then(() => {\n          this.saveNewPasswordInputData();\n        })\n        .catch(() => {\n          this.v$.$reset();\n          this.errorToast(\n            i18n.global.t('pageProfileSettings.toast.wrongCredentials'),\n          );\n        });\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}