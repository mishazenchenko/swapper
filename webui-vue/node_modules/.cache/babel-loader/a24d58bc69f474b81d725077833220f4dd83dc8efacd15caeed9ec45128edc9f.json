{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '@/store/api';\nimport { uniqBy } from 'lodash';\nconst SensorsStore = {\n  namespaced: true,\n  state: {\n    sensors: []\n  },\n  getters: {\n    sensors: state => state.sensors\n  },\n  mutations: {\n    setSensors: (state, sensors) => {\n      state.sensors = uniqBy([...sensors, ...state.sensors], 'name');\n    },\n    setSensorsDefault: state => {\n      state.sensors = [];\n    }\n  },\n  actions: {\n    async getAllSensors({\n      dispatch\n    }) {\n      const collection = await dispatch('getChassisCollection');\n      if (!collection) return;\n      dispatch('resetSensors');\n      const promises = collection.reduce((acc, id) => {\n        acc.push(dispatch('getSensors', id));\n        acc.push(dispatch('getThermalSensors', id));\n        acc.push(dispatch('getPowerSensors', id));\n        return acc;\n      }, []);\n      return await api.all(promises);\n    },\n    async getChassisCollection() {\n      return await api.get('/redfish/v1/Chassis').then(({\n        data: {\n          Members\n        }\n      }) => Members.map(member => member['@odata.id'])).catch(error => console.log(error));\n    },\n    async resetSensors({\n      commit\n    }) {\n      commit('setSensorsDefault');\n    },\n    async getSensors({\n      commit\n    }, id) {\n      const sensors = await api.get(`${id}/Sensors`).then(response => response.data.Members).catch(error => console.log(error));\n      if (!sensors) return;\n      const promises = sensors.map(sensor => {\n        return api.get(sensor['@odata.id']).catch(error => {\n          console.log(error);\n          return error;\n        });\n      });\n      return await api.all(promises).then(responses => {\n        const sensorData = [];\n        responses.forEach(response => {\n          if (response.data) {\n            sensorData.push({\n              name: response.data.Name,\n              status: response.data.Status?.Health,\n              currentValue: response.data.Reading,\n              lowerCaution: response.data.Thresholds?.LowerCaution?.Reading,\n              upperCaution: response.data.Thresholds?.UpperCaution?.Reading,\n              lowerCritical: response.data.Thresholds?.LowerCritical?.Reading,\n              upperCritical: response.data.Thresholds?.UpperCritical?.Reading,\n              units: response.data.ReadingUnits\n            });\n          }\n        });\n        commit('setSensors', sensorData);\n      });\n    },\n    async getThermalSensors({\n      commit\n    }, id) {\n      return await api.get(`${id}/Thermal`).then(({\n        data: {\n          Fans = [],\n          Temperatures = []\n        }\n      }) => {\n        const sensorData = [];\n        Fans.forEach(sensor => {\n          sensorData.push({\n            name: sensor.Name,\n            status: sensor.Status.Health,\n            currentValue: sensor.Reading,\n            lowerCaution: sensor.LowerThresholdNonCritical,\n            upperCaution: sensor.UpperThresholdNonCritical,\n            lowerCritical: sensor.LowerThresholdCritical,\n            upperCritical: sensor.UpperThresholdCritical,\n            units: sensor.ReadingUnits\n          });\n        });\n        Temperatures.forEach(sensor => {\n          sensorData.push({\n            name: sensor.Name,\n            status: sensor.Status.Health,\n            currentValue: sensor.ReadingCelsius,\n            lowerCaution: sensor.LowerThresholdNonCritical,\n            upperCaution: sensor.UpperThresholdNonCritical,\n            lowerCritical: sensor.LowerThresholdCritical,\n            upperCritical: sensor.UpperThresholdCritical,\n            units: '℃'\n          });\n        });\n        commit('setSensors', sensorData);\n      }).catch(error => console.log(error));\n    },\n    async getPowerSensors({\n      commit\n    }, id) {\n      return await api.get(`${id}/Power`).then(({\n        data: {\n          Voltages = []\n        }\n      }) => {\n        const sensorData = Voltages.map(sensor => {\n          return {\n            name: sensor.Name,\n            status: sensor.Status.Health,\n            currentValue: sensor.ReadingVolts,\n            lowerCaution: sensor.LowerThresholdNonCritical,\n            upperCaution: sensor.UpperThresholdNonCritical,\n            lowerCritical: sensor.LowerThresholdCritical,\n            upperCritical: sensor.UpperThresholdCritical,\n            units: 'V'\n          };\n        });\n        commit('setSensors', sensorData);\n      }).catch(error => console.log(error));\n    }\n  }\n};\nexport default SensorsStore;","map":{"version":3,"names":["api","uniqBy","SensorsStore","namespaced","state","sensors","getters","mutations","setSensors","setSensorsDefault","actions","getAllSensors","dispatch","collection","promises","reduce","acc","id","push","all","getChassisCollection","get","then","data","Members","map","member","catch","error","console","log","resetSensors","commit","getSensors","response","sensor","responses","sensorData","forEach","name","Name","status","Status","Health","currentValue","Reading","lowerCaution","Thresholds","LowerCaution","upperCaution","UpperCaution","lowerCritical","LowerCritical","upperCritical","UpperCritical","units","ReadingUnits","getThermalSensors","Fans","Temperatures","LowerThresholdNonCritical","UpperThresholdNonCritical","LowerThresholdCritical","UpperThresholdCritical","ReadingCelsius","getPowerSensors","Voltages","ReadingVolts"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/HardwareStatus/SensorsStore.js"],"sourcesContent":["import api from '@/store/api';\nimport { uniqBy } from 'lodash';\n\nconst SensorsStore = {\n  namespaced: true,\n  state: {\n    sensors: [],\n  },\n  getters: {\n    sensors: (state) => state.sensors,\n  },\n  mutations: {\n    setSensors: (state, sensors) => {\n      state.sensors = uniqBy([...sensors, ...state.sensors], 'name');\n    },\n    setSensorsDefault: (state) => {\n      state.sensors = [];\n    },\n  },\n  actions: {\n    async getAllSensors({ dispatch }) {\n      const collection = await dispatch('getChassisCollection');\n      if (!collection) return;\n      dispatch('resetSensors');\n      const promises = collection.reduce((acc, id) => {\n        acc.push(dispatch('getSensors', id));\n        acc.push(dispatch('getThermalSensors', id));\n        acc.push(dispatch('getPowerSensors', id));\n        return acc;\n      }, []);\n      return await api.all(promises);\n    },\n    async getChassisCollection() {\n      return await api\n        .get('/redfish/v1/Chassis')\n        .then(({ data: { Members } }) =>\n          Members.map((member) => member['@odata.id']),\n        )\n        .catch((error) => console.log(error));\n    },\n    async resetSensors({ commit }) {\n      commit('setSensorsDefault');\n    },\n    async getSensors({ commit }, id) {\n      const sensors = await api\n        .get(`${id}/Sensors`)\n        .then((response) => response.data.Members)\n        .catch((error) => console.log(error));\n      if (!sensors) return;\n      const promises = sensors.map((sensor) => {\n        return api.get(sensor['@odata.id']).catch((error) => {\n          console.log(error);\n          return error;\n        });\n      });\n      return await api.all(promises).then((responses) => {\n        const sensorData = [];\n        responses.forEach((response) => {\n          if (response.data) {\n            sensorData.push({\n              name: response.data.Name,\n              status: response.data.Status?.Health,\n              currentValue: response.data.Reading,\n              lowerCaution: response.data.Thresholds?.LowerCaution?.Reading,\n              upperCaution: response.data.Thresholds?.UpperCaution?.Reading,\n              lowerCritical: response.data.Thresholds?.LowerCritical?.Reading,\n              upperCritical: response.data.Thresholds?.UpperCritical?.Reading,\n              units: response.data.ReadingUnits,\n            });\n          }\n        });\n        commit('setSensors', sensorData);\n      });\n    },\n    async getThermalSensors({ commit }, id) {\n      return await api\n        .get(`${id}/Thermal`)\n        .then(({ data: { Fans = [], Temperatures = [] } }) => {\n          const sensorData = [];\n          Fans.forEach((sensor) => {\n            sensorData.push({\n              name: sensor.Name,\n              status: sensor.Status.Health,\n              currentValue: sensor.Reading,\n              lowerCaution: sensor.LowerThresholdNonCritical,\n              upperCaution: sensor.UpperThresholdNonCritical,\n              lowerCritical: sensor.LowerThresholdCritical,\n              upperCritical: sensor.UpperThresholdCritical,\n              units: sensor.ReadingUnits,\n            });\n          });\n          Temperatures.forEach((sensor) => {\n            sensorData.push({\n              name: sensor.Name,\n              status: sensor.Status.Health,\n              currentValue: sensor.ReadingCelsius,\n              lowerCaution: sensor.LowerThresholdNonCritical,\n              upperCaution: sensor.UpperThresholdNonCritical,\n              lowerCritical: sensor.LowerThresholdCritical,\n              upperCritical: sensor.UpperThresholdCritical,\n              units: '℃',\n            });\n          });\n          commit('setSensors', sensorData);\n        })\n        .catch((error) => console.log(error));\n    },\n    async getPowerSensors({ commit }, id) {\n      return await api\n        .get(`${id}/Power`)\n        .then(({ data: { Voltages = [] } }) => {\n          const sensorData = Voltages.map((sensor) => {\n            return {\n              name: sensor.Name,\n              status: sensor.Status.Health,\n              currentValue: sensor.ReadingVolts,\n              lowerCaution: sensor.LowerThresholdNonCritical,\n              upperCaution: sensor.UpperThresholdNonCritical,\n              lowerCritical: sensor.LowerThresholdCritical,\n              upperCritical: sensor.UpperThresholdCritical,\n              units: 'V',\n            };\n          });\n          commit('setSensors', sensorData);\n        })\n        .catch((error) => console.log(error));\n    },\n  },\n};\n\nexport default SensorsStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}