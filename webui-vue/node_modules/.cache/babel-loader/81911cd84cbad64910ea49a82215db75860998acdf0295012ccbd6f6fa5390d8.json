{"ast":null,"code":"import PageSection from '@/components/Global/PageSection';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport { useI18n } from 'vue-i18n';\nexport default {\n  components: {\n    PageSection\n  },\n  mixins: [BVToastMixin],\n  data() {\n    return {\n      $t: useI18n().t\n    };\n  },\n  computed: {\n    systems() {\n      let systemData = this.$store.getters['system/systems'][0];\n      return systemData ? systemData : {};\n    },\n    serverStatus() {\n      return this.$store.getters['global/serverStatus'];\n    },\n    powerStatus() {\n      if (this.serverStatus === 'unreachable') {\n        return `global.status.off`;\n      }\n      return `global.status.${this.serverStatus}`;\n    }\n  },\n  created() {\n    this.$store.dispatch('system/getSystem').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('hardware-status-service-complete');\n    });\n  },\n  methods: {\n    toggleIdentifyLedSwitch(state) {\n      this.$store.dispatch('system/changeIdentifyLedState', state).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message));\n    }\n  }\n};","map":{"version":3,"names":["PageSection","BVToastMixin","useI18n","components","mixins","data","$t","t","computed","systems","systemData","$store","getters","serverStatus","powerStatus","created","dispatch","finally","$root","$emit","methods","toggleIdentifyLedSwitch","state","then","message","successToast","catch","errorToast"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/HardwareStatus/Inventory/InventoryServiceIndicator.vue"],"sourcesContent":["<template>\n  <page-section\n    :section-title=\"$t('pageInventory.systemIndicator.sectionTitle')\"\n  >\n    <div class=\"form-background pl-4 pt-4 pb-1\">\n      <b-row>\n        <b-col sm=\"6\" md=\"3\">\n          <dl>\n            <dt>{{ $t('pageInventory.systemIndicator.powerStatus') }}</dt>\n            <dd>\n              {{ $t(powerStatus) }}\n            </dd>\n          </dl>\n        </b-col>\n        <b-col sm=\"6\" md=\"3\">\n          <dl>\n            <dt>\n              {{ $t('pageInventory.systemIndicator.identifyLed') }}\n            </dt>\n            <dd>\n              <b-form-checkbox\n                id=\"identifyLedSwitchService\"\n                v-model=\"systems.locationIndicatorActive\"\n                data-test-id=\"inventoryService-toggle-identifyLed\"\n                switch\n                @change=\"toggleIdentifyLedSwitch\"\n              >\n                <span v-if=\"systems.locationIndicatorActive\">\n                  {{ $t('global.status.on') }}\n                </span>\n                <span v-else>{{ $t('global.status.off') }}</span>\n              </b-form-checkbox>\n            </dd>\n          </dl>\n        </b-col>\n      </b-row>\n    </div>\n  </page-section>\n</template>\n<script>\nimport PageSection from '@/components/Global/PageSection';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  components: { PageSection },\n  mixins: [BVToastMixin],\n  data() {\n    return {\n      $t: useI18n().t,\n    };\n  },\n  computed: {\n    systems() {\n      let systemData = this.$store.getters['system/systems'][0];\n      return systemData ? systemData : {};\n    },\n    serverStatus() {\n      return this.$store.getters['global/serverStatus'];\n    },\n    powerStatus() {\n      if (this.serverStatus === 'unreachable') {\n        return `global.status.off`;\n      }\n      return `global.status.${this.serverStatus}`;\n    },\n  },\n  created() {\n    this.$store.dispatch('system/getSystem').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('hardware-status-service-complete');\n    });\n  },\n  methods: {\n    toggleIdentifyLedSwitch(state) {\n      this.$store\n        .dispatch('system/changeIdentifyLedState', state)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message));\n    },\n  },\n};\n</script>\n"],"mappings":"AAwCA,OAAOA,WAAU,MAAO,iCAAiC;AACzD,OAAOC,YAAW,MAAO,kCAAkC;AAC3D,SAASC,OAAM,QAAS,UAAU;AAElC,eAAe;EACbC,UAAU,EAAE;IAAEH;EAAY,CAAC;EAC3BI,MAAM,EAAE,CAACH,YAAY,CAAC;EACtBI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,EAAE,EAAEJ,OAAO,CAAC,CAAC,CAACK;IAChB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,OAAOA,CAAA,EAAG;MACR,IAAIC,UAAS,GAAI,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;MACzD,OAAOF,UAAS,GAAIA,UAAS,GAAI,CAAC,CAAC;IACrC,CAAC;IACDG,YAAYA,CAAA,EAAG;MACb,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,CAAC,qBAAqB,CAAC;IACnD,CAAC;IACDE,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACD,YAAW,KAAM,aAAa,EAAE;QACvC,OAAO,mBAAmB;MAC5B;MACA,OAAO,iBAAiB,IAAI,CAACA,YAAY,EAAE;IAC7C;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,kBAAkB,CAAC,CAACC,OAAO,CAAC,MAAM;MACrD;MACA,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,kCAAkC,CAAC;IACtD,CAAC,CAAC;EACJ,CAAC;EACDC,OAAO,EAAE;IACPC,uBAAuBA,CAACC,KAAK,EAAE;MAC7B,IAAI,CAACX,MAAK,CACPK,QAAQ,CAAC,+BAA+B,EAAEM,KAAK,EAC/CC,IAAI,CAAEC,OAAO,IAAK,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC,EAC5CE,KAAK,CAAC,CAAC;QAAEF;MAAQ,CAAC,KAAK,IAAI,CAACG,UAAU,CAACH,OAAO,CAAC,CAAC;IACrD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}