{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '@/store/api';\nimport i18n from '@/i18n';\nconst BootSettingsStore = {\n  namespaced: true,\n  state: {\n    bootSourceOptions: [],\n    bootSource: null,\n    overrideEnabled: null,\n    tpmEnabled: null\n  },\n  getters: {\n    bootSourceOptions: state => state.bootSourceOptions,\n    bootSource: state => state.bootSource,\n    overrideEnabled: state => state.overrideEnabled,\n    tpmEnabled: state => state.tpmEnabled\n  },\n  mutations: {\n    setBootSourceOptions: (state, bootSourceOptions) => state.bootSourceOptions = bootSourceOptions,\n    setBootSource: (state, bootSource) => state.bootSource = bootSource,\n    setOverrideEnabled: (state, overrideEnabled) => {\n      if (overrideEnabled === 'Once') {\n        state.overrideEnabled = true;\n      } else {\n        // 'Continuous' or 'Disabled'\n        state.overrideEnabled = false;\n      }\n    },\n    setTpmPolicy: (state, tpmEnabled) => state.tpmEnabled = tpmEnabled\n  },\n  actions: {\n    async getBootSettings({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getSystemPath')}`).then(({\n        data: {\n          Boot\n        }\n      }) => {\n        commit('setBootSourceOptions', Boot['BootSourceOverrideTarget@Redfish.AllowableValues']);\n        commit('setOverrideEnabled', Boot.BootSourceOverrideEnabled);\n        commit('setBootSource', Boot.BootSourceOverrideTarget);\n      }).catch(error => console.log(error));\n    },\n    async saveBootSettings({\n      commit,\n      dispatch\n    }, {\n      bootSource,\n      overrideEnabled\n    }) {\n      const data = {\n        Boot: {}\n      };\n      data.Boot.BootSourceOverrideTarget = bootSource;\n      if (overrideEnabled) {\n        data.Boot.BootSourceOverrideEnabled = 'Once';\n      } else if (bootSource === 'None') {\n        data.Boot.BootSourceOverrideEnabled = 'Disabled';\n      } else {\n        data.Boot.BootSourceOverrideEnabled = 'Continuous';\n      }\n      return api.patch(`${await this.dispatch('global/getSystemPath')}`, data).then(response => {\n        // If request success, commit the values\n        commit('setBootSource', data.Boot.BootSourceOverrideTarget);\n        commit('setOverrideEnabled', data.Boot.BootSourceOverrideEnabled);\n        return response;\n      }).catch(error => {\n        console.log(error);\n        // If request error, GET saved options\n        dispatch('getBootSettings');\n        return error;\n      });\n    },\n    async getTpmPolicy({\n      commit\n    }) {\n      // TODO: switch to Redfish when available\n      return await api.get('/xyz/openbmc_project/control/host0/TPMEnable').then(({\n        data: {\n          data: {\n            TPMEnable\n          }\n        }\n      }) => commit('setTpmPolicy', TPMEnable)).catch(error => console.log(error));\n    },\n    saveTpmPolicy({\n      commit,\n      dispatch\n    }, tpmEnabled) {\n      // TODO: switch to Redfish when available\n      const data = {\n        data: tpmEnabled\n      };\n      return api.put('/xyz/openbmc_project/control/host0/TPMEnable/attr/TPMEnable', data).then(response => {\n        // If request success, commit the values\n        commit('setTpmPolicy', tpmEnabled);\n        return response;\n      }).catch(error => {\n        console.log(error);\n        // If request error, GET saved policy\n        dispatch('getTpmPolicy');\n        return error;\n      });\n    },\n    async saveSettings({\n      dispatch\n    }, {\n      bootSource,\n      overrideEnabled,\n      tpmEnabled\n    }) {\n      const promises = [];\n      if (bootSource !== null || overrideEnabled !== null) {\n        promises.push(dispatch('saveBootSettings', {\n          bootSource,\n          overrideEnabled\n        }));\n      }\n      if (tpmEnabled !== null) {\n        promises.push(dispatch('saveTpmPolicy', tpmEnabled));\n      }\n      return await api.all(promises).then(api.spread((...responses) => {\n        let message = i18n.global.t('pageServerPowerOperations.toast.successSaveSettings');\n        responses.forEach(response => {\n          if (response instanceof Error) {\n            throw new Error(i18n.global.t('pageServerPowerOperations.toast.errorSaveSettings'));\n          }\n        });\n        return message;\n      }));\n    }\n  }\n};\nexport default BootSettingsStore;","map":{"version":3,"names":["api","i18n","BootSettingsStore","namespaced","state","bootSourceOptions","bootSource","overrideEnabled","tpmEnabled","getters","mutations","setBootSourceOptions","setBootSource","setOverrideEnabled","setTpmPolicy","actions","getBootSettings","commit","get","dispatch","then","data","Boot","BootSourceOverrideEnabled","BootSourceOverrideTarget","catch","error","console","log","saveBootSettings","patch","response","getTpmPolicy","TPMEnable","saveTpmPolicy","put","saveSettings","promises","push","all","spread","responses","message","global","t","forEach","Error"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/Operations/BootSettingsStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst BootSettingsStore = {\n  namespaced: true,\n  state: {\n    bootSourceOptions: [],\n    bootSource: null,\n    overrideEnabled: null,\n    tpmEnabled: null,\n  },\n  getters: {\n    bootSourceOptions: (state) => state.bootSourceOptions,\n    bootSource: (state) => state.bootSource,\n    overrideEnabled: (state) => state.overrideEnabled,\n    tpmEnabled: (state) => state.tpmEnabled,\n  },\n  mutations: {\n    setBootSourceOptions: (state, bootSourceOptions) =>\n      (state.bootSourceOptions = bootSourceOptions),\n    setBootSource: (state, bootSource) => (state.bootSource = bootSource),\n    setOverrideEnabled: (state, overrideEnabled) => {\n      if (overrideEnabled === 'Once') {\n        state.overrideEnabled = true;\n      } else {\n        // 'Continuous' or 'Disabled'\n        state.overrideEnabled = false;\n      }\n    },\n    setTpmPolicy: (state, tpmEnabled) => (state.tpmEnabled = tpmEnabled),\n  },\n  actions: {\n    async getBootSettings({ commit }) {\n      return await api\n        .get(`${await this.dispatch('global/getSystemPath')}`)\n        .then(({ data: { Boot } }) => {\n          commit(\n            'setBootSourceOptions',\n            Boot['BootSourceOverrideTarget@Redfish.AllowableValues'],\n          );\n          commit('setOverrideEnabled', Boot.BootSourceOverrideEnabled);\n          commit('setBootSource', Boot.BootSourceOverrideTarget);\n        })\n        .catch((error) => console.log(error));\n    },\n    async saveBootSettings(\n      { commit, dispatch },\n      { bootSource, overrideEnabled },\n    ) {\n      const data = { Boot: {} };\n      data.Boot.BootSourceOverrideTarget = bootSource;\n\n      if (overrideEnabled) {\n        data.Boot.BootSourceOverrideEnabled = 'Once';\n      } else if (bootSource === 'None') {\n        data.Boot.BootSourceOverrideEnabled = 'Disabled';\n      } else {\n        data.Boot.BootSourceOverrideEnabled = 'Continuous';\n      }\n\n      return api\n        .patch(`${await this.dispatch('global/getSystemPath')}`, data)\n        .then((response) => {\n          // If request success, commit the values\n          commit('setBootSource', data.Boot.BootSourceOverrideTarget);\n          commit('setOverrideEnabled', data.Boot.BootSourceOverrideEnabled);\n          return response;\n        })\n        .catch((error) => {\n          console.log(error);\n          // If request error, GET saved options\n          dispatch('getBootSettings');\n          return error;\n        });\n    },\n    async getTpmPolicy({ commit }) {\n      // TODO: switch to Redfish when available\n      return await api\n        .get('/xyz/openbmc_project/control/host0/TPMEnable')\n        .then(\n          ({\n            data: {\n              data: { TPMEnable },\n            },\n          }) => commit('setTpmPolicy', TPMEnable),\n        )\n        .catch((error) => console.log(error));\n    },\n    saveTpmPolicy({ commit, dispatch }, tpmEnabled) {\n      // TODO: switch to Redfish when available\n      const data = { data: tpmEnabled };\n      return api\n        .put(\n          '/xyz/openbmc_project/control/host0/TPMEnable/attr/TPMEnable',\n          data,\n        )\n        .then((response) => {\n          // If request success, commit the values\n          commit('setTpmPolicy', tpmEnabled);\n          return response;\n        })\n        .catch((error) => {\n          console.log(error);\n          // If request error, GET saved policy\n          dispatch('getTpmPolicy');\n          return error;\n        });\n    },\n    async saveSettings(\n      { dispatch },\n      { bootSource, overrideEnabled, tpmEnabled },\n    ) {\n      const promises = [];\n\n      if (bootSource !== null || overrideEnabled !== null) {\n        promises.push(\n          dispatch('saveBootSettings', { bootSource, overrideEnabled }),\n        );\n      }\n      if (tpmEnabled !== null) {\n        promises.push(dispatch('saveTpmPolicy', tpmEnabled));\n      }\n\n      return await api.all(promises).then(\n        api.spread((...responses) => {\n          let message = i18n.global.t(\n            'pageServerPowerOperations.toast.successSaveSettings',\n          );\n          responses.forEach((response) => {\n            if (response instanceof Error) {\n              throw new Error(\n                i18n.global.t(\n                  'pageServerPowerOperations.toast.errorSaveSettings',\n                ),\n              );\n            }\n          });\n          return message;\n        }),\n      );\n    },\n  },\n};\n\nexport default BootSettingsStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}