{"ast":null,"code":"import BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport IconEdit from '@carbon/icons-vue/es/edit/16';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport PageSection from '@/components/Global/PageSection';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\nexport default {\n  name: 'GlobalNetworkSettings',\n  components: {\n    IconEdit,\n    PageSection\n  },\n  mixins: [BVToastMixin, DataFormatterMixin],\n  data() {\n    return {\n      $t: useI18n().t,\n      hostname: ''\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData']),\n    firstInterface() {\n      return this.$store.getters['network/globalNetworkSettings'][0];\n    },\n    useDomainNameState: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0].useDomainNameEnabled;\n      },\n      set(newValue) {\n        return newValue;\n      }\n    },\n    useDnsState: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0].useDnsEnabled;\n      },\n      set(newValue) {\n        return newValue;\n      }\n    },\n    useNtpState: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0].useNtpEnabled;\n      },\n      set(newValue) {\n        return newValue;\n      }\n    },\n    useDomainNameStateIpv6: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0].useDomainNameEnabledIpv6;\n      },\n      set(newValue) {\n        return newValue;\n      }\n    },\n    useDnsStateIpv6: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0].useDnsEnabledIpv6v6;\n      },\n      set(newValue) {\n        return newValue;\n      }\n    },\n    useNtpStateIpv6: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0].useNtpEnabledIpv6;\n      },\n      set(newValue) {\n        return newValue;\n      }\n    }\n  },\n  created() {\n    this.$store.dispatch('network/getEthernetData').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('network-global-settings-complete');\n    });\n  },\n  methods: {\n    changeDomainNameState(state) {\n      this.$store.dispatch('network/saveDomainNameState', {\n        domainState: state,\n        ipVersion: 'IPv4'\n      }).then(success => {\n        this.successToast(success);\n      }).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    changeDnsState(state) {\n      this.$store.dispatch('network/saveDnsState', {\n        dnsState: state,\n        ipVersion: 'IPv4'\n      }).then(message => {\n        this.successToast(message);\n      }).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    changeNtpState(state) {\n      this.$store.dispatch('network/saveNtpState', {\n        ntpState: state,\n        ipVersion: 'IPv4'\n      }).then(message => {\n        this.successToast(message);\n      }).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    changeDomainNameStateIpv6(state) {\n      this.$store.dispatch('network/saveDomainNameState', {\n        domainState: state,\n        ipVersion: 'IPv6'\n      }).then(success => {\n        this.successToast(success);\n      }).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    changeDnsStateIpv6(state) {\n      this.$store.dispatch('network/saveDnsState', {\n        dnsState: state,\n        ipVersion: 'IPv6'\n      }).then(message => {\n        this.successToast(message);\n      }).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    changeNtpStateIpv6(state) {\n      this.$store.dispatch('network/saveNtpState', {\n        ntpState: state,\n        ipVersion: 'IPv6'\n      }).then(message => {\n        this.successToast(message);\n      }).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    initSettingsModal() {\n      this.$bvModal.show('modal-hostname');\n    }\n  }\n};","map":{"version":3,"names":["BVToastMixin","IconEdit","DataFormatterMixin","PageSection","mapState","useI18n","name","components","mixins","data","$t","t","hostname","computed","firstInterface","$store","getters","useDomainNameState","get","useDomainNameEnabled","set","newValue","useDnsState","useDnsEnabled","useNtpState","useNtpEnabled","useDomainNameStateIpv6","useDomainNameEnabledIpv6","useDnsStateIpv6","useDnsEnabledIpv6v6","useNtpStateIpv6","useNtpEnabledIpv6","created","dispatch","finally","$root","$emit","methods","changeDomainNameState","state","domainState","ipVersion","then","success","successToast","catch","message","errorToast","changeDnsState","dnsState","changeNtpState","ntpState","changeDomainNameStateIpv6","changeDnsStateIpv6","changeNtpStateIpv6","initSettingsModal","$bvModal","show"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Settings/Network/NetworkGlobalSettings.vue"],"sourcesContent":["<template>\n  <page-section\n    v-if=\"firstInterface\"\n    :section-title=\"$t('pageNetwork.networkSettings')\"\n  >\n    <b-row>\n      <b-col md=\"2\">\n        <dl>\n          <dt>\n            {{ $t('pageNetwork.hostname') }}\n            <b-button variant=\"link\" class=\"p-1\" @click=\"initSettingsModal()\">\n              <icon-edit :title=\"$t('pageNetwork.modal.editHostnameTitle')\" />\n            </b-button>\n          </dt>\n          <dd style=\"word-break: break-all\">\n            {{ dataFormatter(firstInterface.hostname) }}\n          </dd>\n        </dl>\n      </b-col>\n      <b-col md=\"2\">\n        <dl>\n          <dt>{{ $t('pageNetwork.ipVersion') }}</dt>\n          <dd>{{ $t('pageNetwork.ipv4') }}</dd>\n          <dd>{{ $t('pageNetwork.ipv6') }}</dd>\n        </dl>\n      </b-col>\n      <b-col md=\"2\">\n        <dl>\n          <dt>{{ $t('pageNetwork.useDomainName') }}</dt>\n          <dd>\n            <b-form-checkbox\n              id=\"useDomainNameSwitch\"\n              v-model=\"useDomainNameState\"\n              data-test-id=\"networkSettings-switch-useDomainName\"\n              switch\n              @change=\"changeDomainNameState\"\n            >\n              <span v-if=\"useDomainNameState\">\n                {{ $t('global.status.enabled') }}\n              </span>\n              <span v-else>{{ $t('global.status.disabled') }}</span>\n            </b-form-checkbox>\n          </dd>\n          <dd>\n            <b-form-checkbox\n              id=\"useDomainNameSwitchIpv6\"\n              v-model=\"useDomainNameStateIpv6\"\n              data-test-id=\"networkSettings-switch-useDomainNameIpv6\"\n              switch\n              @change=\"changeDomainNameStateIpv6\"\n            >\n              <span v-if=\"useDomainNameStateIpv6\">\n                {{ $t('global.status.enabled') }}\n              </span>\n              <span v-else>{{ $t('global.status.disabled') }}</span>\n            </b-form-checkbox>\n          </dd>\n        </dl>\n      </b-col>\n      <b-col md=\"2\">\n        <dl>\n          <dt>{{ $t('pageNetwork.useDns') }}</dt>\n          <dd>\n            <b-form-checkbox\n              id=\"useDnsSwitch\"\n              v-model=\"useDnsState\"\n              data-test-id=\"networkSettings-switch-useDns\"\n              switch\n              @change=\"changeDnsState\"\n            >\n              <span v-if=\"useDnsState\">\n                {{ $t('global.status.enabled') }}\n              </span>\n              <span v-else>{{ $t('global.status.disabled') }}</span>\n            </b-form-checkbox>\n          </dd>\n          <dd>\n            <b-form-checkbox\n              id=\"useDnsSwitchIpv6\"\n              v-model=\"useDnsStateIpv6\"\n              data-test-id=\"networkSettings-switch-useDnsIpv6\"\n              switch\n              @change=\"changeDnsStateIpv6\"\n            >\n              <span v-if=\"useDnsStateIpv6\">\n                {{ $t('global.status.enabled') }}\n              </span>\n              <span v-else>{{ $t('global.status.disabled') }}</span>\n            </b-form-checkbox>\n          </dd>\n        </dl>\n      </b-col>\n      <b-col md=\"2\">\n        <dl>\n          <dt>{{ $t('pageNetwork.useNtp') }}</dt>\n          <dd>\n            <b-form-checkbox\n              id=\"useNtpSwitch\"\n              v-model=\"useNtpState\"\n              data-test-id=\"networkSettings-switch-useNtp\"\n              switch\n              @change=\"changeNtpState\"\n            >\n              <span v-if=\"useNtpState\">\n                {{ $t('global.status.enabled') }}\n              </span>\n              <span v-else>{{ $t('global.status.disabled') }}</span>\n            </b-form-checkbox>\n          </dd>\n          <dd>\n            <b-form-checkbox\n              id=\"useNtpSwitchIpv6\"\n              v-model=\"useNtpStateIpv6\"\n              data-test-id=\"networkSettings-switch-useNtpIpv6\"\n              switch\n              @change=\"changeNtpStateIpv6\"\n            >\n              <span v-if=\"useNtpStateIpv6\">\n                {{ $t('global.status.enabled') }}\n              </span>\n              <span v-else>{{ $t('global.status.disabled') }}</span>\n            </b-form-checkbox>\n          </dd>\n        </dl>\n      </b-col>\n    </b-row>\n  </page-section>\n</template>\n\n<script>\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport IconEdit from '@carbon/icons-vue/es/edit/16';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport PageSection from '@/components/Global/PageSection';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  name: 'GlobalNetworkSettings',\n  components: { IconEdit, PageSection },\n  mixins: [BVToastMixin, DataFormatterMixin],\n\n  data() {\n    return {\n      $t: useI18n().t,\n      hostname: '',\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData']),\n    firstInterface() {\n      return this.$store.getters['network/globalNetworkSettings'][0];\n    },\n    useDomainNameState: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0]\n          .useDomainNameEnabled;\n      },\n      set(newValue) {\n        return newValue;\n      },\n    },\n    useDnsState: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0]\n          .useDnsEnabled;\n      },\n      set(newValue) {\n        return newValue;\n      },\n    },\n    useNtpState: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0]\n          .useNtpEnabled;\n      },\n      set(newValue) {\n        return newValue;\n      },\n    },\n    useDomainNameStateIpv6: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0]\n          .useDomainNameEnabledIpv6;\n      },\n      set(newValue) {\n        return newValue;\n      },\n    },\n    useDnsStateIpv6: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0]\n          .useDnsEnabledIpv6v6;\n      },\n      set(newValue) {\n        return newValue;\n      },\n    },\n    useNtpStateIpv6: {\n      get() {\n        return this.$store.getters['network/globalNetworkSettings'][0]\n          .useNtpEnabledIpv6;\n      },\n      set(newValue) {\n        return newValue;\n      },\n    },\n  },\n  created() {\n    this.$store.dispatch('network/getEthernetData').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('network-global-settings-complete');\n    });\n  },\n  methods: {\n    changeDomainNameState(state) {\n      this.$store\n        .dispatch('network/saveDomainNameState', {\n          domainState: state,\n          ipVersion: 'IPv4',\n        })\n        .then((success) => {\n          this.successToast(success);\n        })\n        .catch(({ message }) => this.errorToast(message));\n    },\n    changeDnsState(state) {\n      this.$store\n        .dispatch('network/saveDnsState', {\n          dnsState: state,\n          ipVersion: 'IPv4',\n        })\n        .then((message) => {\n          this.successToast(message);\n        })\n        .catch(({ message }) => this.errorToast(message));\n    },\n    changeNtpState(state) {\n      this.$store\n        .dispatch('network/saveNtpState', {\n          ntpState: state,\n          ipVersion: 'IPv4',\n        })\n        .then((message) => {\n          this.successToast(message);\n        })\n        .catch(({ message }) => this.errorToast(message));\n    },\n    changeDomainNameStateIpv6(state) {\n      this.$store\n        .dispatch('network/saveDomainNameState', {\n          domainState: state,\n          ipVersion: 'IPv6',\n        })\n        .then((success) => {\n          this.successToast(success);\n        })\n        .catch(({ message }) => this.errorToast(message));\n    },\n    changeDnsStateIpv6(state) {\n      this.$store\n        .dispatch('network/saveDnsState', {\n          dnsState: state,\n          ipVersion: 'IPv6',\n        })\n        .then((message) => {\n          this.successToast(message);\n        })\n        .catch(({ message }) => this.errorToast(message));\n    },\n    changeNtpStateIpv6(state) {\n      this.$store\n        .dispatch('network/saveNtpState', {\n          ntpState: state,\n          ipVersion: 'IPv6',\n        })\n        .then((message) => {\n          this.successToast(message);\n        })\n        .catch(({ message }) => this.errorToast(message));\n    },\n    initSettingsModal() {\n      this.$bvModal.show('modal-hostname');\n    },\n  },\n};\n</script>\n"],"mappings":"AAkIA,OAAOA,YAAW,MAAO,kCAAkC;AAC3D,OAAOC,QAAO,MAAO,8BAA8B;AACnD,OAAOC,kBAAiB,MAAO,wCAAwC;AACvE,OAAOC,WAAU,MAAO,iCAAiC;AACzD,SAASC,QAAO,QAAS,MAAM;AAC/B,SAASC,OAAM,QAAS,UAAU;AAElC,eAAe;EACbC,IAAI,EAAE,uBAAuB;EAC7BC,UAAU,EAAE;IAAEN,QAAQ;IAAEE;EAAY,CAAC;EACrCK,MAAM,EAAE,CAACR,YAAY,EAAEE,kBAAkB,CAAC;EAE1CO,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,EAAE,EAAEL,OAAO,CAAC,CAAC,CAACM,CAAC;MACfC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGT,QAAQ,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,CAAC;IACxCU,cAAcA,CAAA,EAAG;MACf,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC;IAChE,CAAC;IACDC,kBAAkB,EAAE;MAClBC,GAAGA,CAAA,EAAG;QACJ,OAAO,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAC1DG,oBAAoB;MACzB,CAAC;MACDC,GAAGA,CAACC,QAAQ,EAAE;QACZ,OAAOA,QAAQ;MACjB;IACF,CAAC;IACDC,WAAW,EAAE;MACXJ,GAAGA,CAAA,EAAG;QACJ,OAAO,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAC1DO,aAAa;MAClB,CAAC;MACDH,GAAGA,CAACC,QAAQ,EAAE;QACZ,OAAOA,QAAQ;MACjB;IACF,CAAC;IACDG,WAAW,EAAE;MACXN,GAAGA,CAAA,EAAG;QACJ,OAAO,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAC1DS,aAAa;MAClB,CAAC;MACDL,GAAGA,CAACC,QAAQ,EAAE;QACZ,OAAOA,QAAQ;MACjB;IACF,CAAC;IACDK,sBAAsB,EAAE;MACtBR,GAAGA,CAAA,EAAG;QACJ,OAAO,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAC1DW,wBAAwB;MAC7B,CAAC;MACDP,GAAGA,CAACC,QAAQ,EAAE;QACZ,OAAOA,QAAQ;MACjB;IACF,CAAC;IACDO,eAAe,EAAE;MACfV,GAAGA,CAAA,EAAG;QACJ,OAAO,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAC1Da,mBAAmB;MACxB,CAAC;MACDT,GAAGA,CAACC,QAAQ,EAAE;QACZ,OAAOA,QAAQ;MACjB;IACF,CAAC;IACDS,eAAe,EAAE;MACfZ,GAAGA,CAAA,EAAG;QACJ,OAAO,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC,EAC1De,iBAAiB;MACtB,CAAC;MACDX,GAAGA,CAACC,QAAQ,EAAE;QACZ,OAAOA,QAAQ;MACjB;IACF;EACF,CAAC;EACDW,OAAOA,CAAA,EAAG;IACR,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,yBAAyB,CAAC,CAACC,OAAO,CAAC,MAAM;MAC5D;MACA,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,kCAAkC,CAAC;IACtD,CAAC,CAAC;EACJ,CAAC;EACDC,OAAO,EAAE;IACPC,qBAAqBA,CAACC,KAAK,EAAE;MAC3B,IAAI,CAACxB,MAAK,CACPkB,QAAQ,CAAC,6BAA6B,EAAE;QACvCO,WAAW,EAAED,KAAK;QAClBE,SAAS,EAAE;MACb,CAAC,EACAC,IAAI,CAAEC,OAAO,IAAK;QACjB,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC;MAC5B,CAAC,EACAE,KAAK,CAAC,CAAC;QAAEC;MAAQ,CAAC,KAAK,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC,CAAC;IACrD,CAAC;IACDE,cAAcA,CAACT,KAAK,EAAE;MACpB,IAAI,CAACxB,MAAK,CACPkB,QAAQ,CAAC,sBAAsB,EAAE;QAChCgB,QAAQ,EAAEV,KAAK;QACfE,SAAS,EAAE;MACb,CAAC,EACAC,IAAI,CAAEI,OAAO,IAAK;QACjB,IAAI,CAACF,YAAY,CAACE,OAAO,CAAC;MAC5B,CAAC,EACAD,KAAK,CAAC,CAAC;QAAEC;MAAQ,CAAC,KAAK,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC,CAAC;IACrD,CAAC;IACDI,cAAcA,CAACX,KAAK,EAAE;MACpB,IAAI,CAACxB,MAAK,CACPkB,QAAQ,CAAC,sBAAsB,EAAE;QAChCkB,QAAQ,EAAEZ,KAAK;QACfE,SAAS,EAAE;MACb,CAAC,EACAC,IAAI,CAAEI,OAAO,IAAK;QACjB,IAAI,CAACF,YAAY,CAACE,OAAO,CAAC;MAC5B,CAAC,EACAD,KAAK,CAAC,CAAC;QAAEC;MAAQ,CAAC,KAAK,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC,CAAC;IACrD,CAAC;IACDM,yBAAyBA,CAACb,KAAK,EAAE;MAC/B,IAAI,CAACxB,MAAK,CACPkB,QAAQ,CAAC,6BAA6B,EAAE;QACvCO,WAAW,EAAED,KAAK;QAClBE,SAAS,EAAE;MACb,CAAC,EACAC,IAAI,CAAEC,OAAO,IAAK;QACjB,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC;MAC5B,CAAC,EACAE,KAAK,CAAC,CAAC;QAAEC;MAAQ,CAAC,KAAK,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC,CAAC;IACrD,CAAC;IACDO,kBAAkBA,CAACd,KAAK,EAAE;MACxB,IAAI,CAACxB,MAAK,CACPkB,QAAQ,CAAC,sBAAsB,EAAE;QAChCgB,QAAQ,EAAEV,KAAK;QACfE,SAAS,EAAE;MACb,CAAC,EACAC,IAAI,CAAEI,OAAO,IAAK;QACjB,IAAI,CAACF,YAAY,CAACE,OAAO,CAAC;MAC5B,CAAC,EACAD,KAAK,CAAC,CAAC;QAAEC;MAAQ,CAAC,KAAK,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC,CAAC;IACrD,CAAC;IACDQ,kBAAkBA,CAACf,KAAK,EAAE;MACxB,IAAI,CAACxB,MAAK,CACPkB,QAAQ,CAAC,sBAAsB,EAAE;QAChCkB,QAAQ,EAAEZ,KAAK;QACfE,SAAS,EAAE;MACb,CAAC,EACAC,IAAI,CAAEI,OAAO,IAAK;QACjB,IAAI,CAACF,YAAY,CAACE,OAAO,CAAC;MAC5B,CAAC,EACAD,KAAK,CAAC,CAAC;QAAEC;MAAQ,CAAC,KAAK,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC,CAAC;IACrD,CAAC;IACDS,iBAAiBA,CAAA,EAAG;MAClB,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,gBAAgB,CAAC;IACtC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}