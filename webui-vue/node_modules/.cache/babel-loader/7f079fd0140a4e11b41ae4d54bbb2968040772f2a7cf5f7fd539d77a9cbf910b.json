{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"text-right\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_icon_add = _resolveComponent(\"icon-add\");\n  const _component_b_button = _resolveComponent(\"b-button\");\n  const _component_icon_edit = _resolveComponent(\"icon-edit\");\n  const _component_icon_trashcan = _resolveComponent(\"icon-trashcan\");\n  const _component_table_row_action = _resolveComponent(\"table-row-action\");\n  const _component_b_table = _resolveComponent(\"b-table\");\n  const _component_b_col = _resolveComponent(\"b-col\");\n  const _component_b_row = _resolveComponent(\"b-row\");\n  const _component_page_section = _resolveComponent(\"page-section\");\n  return _openBlock(), _createBlock(_component_page_section, {\n    \"section-title\": $data.$t('pageNetwork.staticDns')\n  }, {\n    default: _withCtx(() => [_createVNode(_component_b_row, null, {\n      default: _withCtx(() => [_createVNode(_component_b_col, {\n        lg: \"6\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_b_button, {\n          variant: \"primary\",\n          onClick: _cache[0] || (_cache[0] = $event => $options.initDnsModal())\n        }, {\n          default: _withCtx(() => [_createVNode(_component_icon_add), _createTextVNode(\" \" + _toDisplayString($data.$t('pageNetwork.table.addDnsAddress')), 1 /* TEXT */)], undefined, true),\n          _: 1 /* STABLE */\n        })]), _createVNode(_component_b_table, {\n          responsive: \"md\",\n          hover: \"\",\n          fields: $data.dnsTableFields,\n          items: $data.form.dnsStaticTableItems,\n          \"empty-text\": $data.$t('global.table.emptyMessage'),\n          class: \"mb-0\",\n          \"show-empty\": \"\"\n        }, {\n          \"cell(actions)\": _withCtx(({\n            item,\n            index\n          }) => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item.actions, (action, actionIndex) => {\n            return _openBlock(), _createBlock(_component_table_row_action, {\n              key: actionIndex,\n              value: action.value,\n              title: action.title,\n              enabled: action.enabled,\n              onClickTableAction: $event => $options.onDnsTableAction(action, $event, index)\n            }, {\n              icon: _withCtx(() => [action.value === 'edit' ? (_openBlock(), _createBlock(_component_icon_edit, {\n                key: 0\n              })) : _createCommentVNode(\"v-if\", true), action.value === 'delete' ? (_openBlock(), _createBlock(_component_icon_trashcan, {\n                key: 1\n              })) : _createCommentVNode(\"v-if\", true)]),\n              _: 2 /* DYNAMIC */\n            }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"value\", \"title\", \"enabled\", \"onClickTableAction\"]);\n          }), 128 /* KEYED_FRAGMENT */))]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"fields\", \"items\", \"empty-text\"])], undefined, true),\n        _: 1 /* STABLE */\n      })], undefined, true),\n      _: 1 /* STABLE */\n    })], undefined, true),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"section-title\"]);\n}","map":{"version":3,"names":["class","_createBlock","_component_page_section","$data","$t","default","_withCtx","_createVNode","_component_b_row","_component_b_col","lg","_createElementVNode","_hoisted_1","_component_b_button","variant","onClick","_cache","$event","$options","initDnsModal","_component_icon_add","_createTextVNode","_toDisplayString","_","_component_b_table","responsive","hover","fields","dnsTableFields","items","form","dnsStaticTableItems","item","index","_createElementBlock","_Fragment","_renderList","actions","action","actionIndex","_component_table_row_action","key","value","title","enabled","onClickTableAction","onDnsTableAction","icon","_component_icon_edit","_createCommentVNode","_component_icon_trashcan"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Settings/Network/TableDns.vue"],"sourcesContent":["<template>\n  <page-section :section-title=\"$t('pageNetwork.staticDns')\">\n    <b-row>\n      <b-col lg=\"6\">\n        <div class=\"text-right\">\n          <b-button variant=\"primary\" @click=\"initDnsModal()\">\n            <icon-add />\n            {{ $t('pageNetwork.table.addDnsAddress') }}\n          </b-button>\n        </div>\n        <b-table\n          responsive=\"md\"\n          hover\n          :fields=\"dnsTableFields\"\n          :items=\"form.dnsStaticTableItems\"\n          :empty-text=\"$t('global.table.emptyMessage')\"\n          class=\"mb-0\"\n          show-empty\n        >\n          <template #cell(actions)=\"{ item, index }\">\n            <table-row-action\n              v-for=\"(action, actionIndex) in item.actions\"\n              :key=\"actionIndex\"\n              :value=\"action.value\"\n              :title=\"action.title\"\n              :enabled=\"action.enabled\"\n              @click-table-action=\"onDnsTableAction(action, $event, index)\"\n            >\n              <template #icon>\n                <icon-edit v-if=\"action.value === 'edit'\" />\n                <icon-trashcan v-if=\"action.value === 'delete'\" />\n              </template>\n            </table-row-action>\n          </template>\n        </b-table>\n      </b-col>\n    </b-row>\n  </page-section>\n</template>\n\n<script>\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconEdit from '@carbon/icons-vue/es/edit/20';\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport PageSection from '@/components/Global/PageSection';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  name: 'DNSTable',\n  components: {\n    IconAdd,\n    IconEdit,\n    IconTrashcan,\n    PageSection,\n    TableRowAction,\n  },\n  mixins: [BVToastMixin],\n  props: {\n    tabIndex: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        dnsStaticTableItems: [],\n      },\n      actions: [\n        {\n          value: 'edit',\n          title: 'global.action.edit',\n        },\n        {\n          value: 'delete',\n          title: 'global.action.delete',\n        },\n      ],\n      dnsTableFields: [\n        {\n          key: 'address',\n          label: i18n.global.t('pageNetwork.table.ipAddress'),\n        },\n        { key: 'actions', label: '', tdClass: 'text-right' },\n      ],\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData']),\n  },\n  watch: {\n    // Watch for change in tab index\n    tabIndex() {\n      this.getStaticDnsItems();\n    },\n    ethernetData() {\n      this.getStaticDnsItems();\n    },\n  },\n  created() {\n    this.getStaticDnsItems();\n    this.$store.dispatch('network/getEthernetData').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('network-table-dns-complete');\n    });\n  },\n  methods: {\n    getStaticDnsItems() {\n      const index = this.tabIndex;\n      const dns = this.ethernetData[index].StaticNameServers || [];\n      this.form.dnsStaticTableItems = dns.map((server) => {\n        return {\n          address: server,\n          actions: [\n            {\n              value: 'delete',\n              title: 'pageNetwork.table.deleteDns',\n            },\n          ],\n        };\n      });\n    },\n    onDnsTableAction(action, $event, index) {\n      if ($event === 'delete') {\n        this.deleteDnsTableRow(index);\n      }\n    },\n    deleteDnsTableRow(index) {\n      this.form.dnsStaticTableItems.splice(index, 1);\n      const newDnsArray = this.form.dnsStaticTableItems.map((dns) => {\n        return dns.address;\n      });\n      this.$store\n        .dispatch('network/editDnsAddress', newDnsArray)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message));\n    },\n    initDnsModal() {\n      this.$bvModal.show('modal-dns');\n    },\n  },\n};\n</script>\n"],"mappings":";;EAIaA,KAAK,EAAC;AAAY;;;;;;;;;;;uBAH7BC,YAAA,CAoCeC,uBAAA;IApCA,eAAa,EAAEC,KAAA,CAAAC,EAAE;;IADlCC,OAAA,EAAAC,QAAA,CAEI,MAkCQ,CAlCRC,YAAA,CAkCQC,gBAAA;MApCZH,OAAA,EAAAC,QAAA,CAGM,MAgCQ,CAhCRC,YAAA,CAgCQE,gBAAA;QAhCDC,EAAE,EAAC;MAAG;QAHnBL,OAAA,EAAAC,QAAA,CAIQ,MAKM,CALNK,mBAAA,CAKM,OALNC,UAKM,GAJJL,YAAA,CAGWM,mBAAA;UAHDC,OAAO,EAAC,SAAS;UAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,YAAY;;UAL1Dd,OAAA,EAAAC,QAAA,CAMY,MAAY,CAAZC,YAAA,CAAYa,mBAAA,GANxBC,gBAAA,CAMwB,GACZ,GAAAC,gBAAA,CAAGnB,KAAA,CAAAC,EAAE,oD;UAPjBmB,CAAA;cAUQhB,YAAA,CAwBUiB,kBAAA;UAvBRC,UAAU,EAAC,IAAI;UACfC,KAAK,EAAL,EAAK;UACJC,MAAM,EAAExB,KAAA,CAAAyB,cAAc;UACtBC,KAAK,EAAE1B,KAAA,CAAA2B,IAAI,CAACC,mBAAmB;UAC/B,YAAU,EAAE5B,KAAA,CAAAC,EAAE;UACfJ,KAAK,EAAC,MAAM;UACZ,YAAU,EAAV;;UAEW,eAAa,EAAAM,QAAA,CAEpB,CAA6C;YAFrB0B,IAAI;YAAEC;UAAK,Q,kBACrCC,mBAAA,CAYmBC,SAAA,QAhC/BC,WAAA,CAqB8CJ,IAAI,CAACK,OAAO,EArB1D,CAqBsBC,MAAM,EAAEC,WAAW;iCAD7BtC,YAAA,CAYmBuC,2BAAA;cAVhBC,GAAG,EAAEF,WAAW;cAChBG,KAAK,EAAEJ,MAAM,CAACI,KAAK;cACnBC,KAAK,EAAEL,MAAM,CAACK,KAAK;cACnBC,OAAO,EAAEN,MAAM,CAACM,OAAO;cACvBC,kBAAkB,EAAA5B,MAAA,IAAEC,QAAA,CAAA4B,gBAAgB,CAACR,MAAM,EAAErB,MAAM,EAAEgB,KAAK;;cAEhDc,IAAI,EAAAzC,QAAA,CACb,MAA4C,CAA3BgC,MAAM,CAACI,KAAK,e,cAA7BzC,YAAA,CAA4C+C,oBAAA;gBA7B5DP,GAAA;cAAA,MAAAQ,mBAAA,gBA8BqCX,MAAM,CAACI,KAAK,iB,cAAjCzC,YAAA,CAAkDiD,wBAAA;gBA9BlET,GAAA;cAAA,MAAAQ,mBAAA,e;cAAA1B,CAAA;;;UAAAA,CAAA;;QAAAA,CAAA;;MAAAA,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}