{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '@/store/api';\nimport i18n from '@/i18n';\nconst FirmwareStore = {\n  namespaced: true,\n  state: {\n    bmcFirmware: [],\n    biosFirmware: [],\n    bmcActiveFirmwareId: null,\n    biosActiveFirmwareId: null,\n    applyTime: null,\n    multipartHttpPushUri: null,\n    httpPushUri: null\n  },\n  getters: {\n    isSingleFileUploadEnabled: state => state.biosFirmware.length === 0,\n    activeBmcFirmware: state => {\n      return state.bmcFirmware.find(firmware => firmware.id === state.bmcActiveFirmwareId);\n    },\n    activeBiosFirmware: state => {\n      return state.biosFirmware.find(firmware => firmware.id === state.biosActiveFirmwareId);\n    },\n    backupBmcFirmware: state => {\n      return state.bmcFirmware.find(firmware => firmware.id !== state.bmcActiveFirmwareId);\n    },\n    backupBiosFirmware: state => {\n      return state.biosFirmware.find(firmware => firmware.id !== state.biosActiveFirmwareId);\n    }\n  },\n  mutations: {\n    setActiveBmcFirmwareId: (state, id) => state.bmcActiveFirmwareId = id,\n    setActiveBiosFirmwareId: (state, id) => state.biosActiveFirmwareId = id,\n    setBmcFirmware: (state, firmware) => state.bmcFirmware = firmware,\n    setBiosFirmware: (state, firmware) => state.biosFirmware = firmware,\n    setApplyTime: (state, applyTime) => state.applyTime = applyTime,\n    setHttpPushUri: (state, httpPushUri) => state.httpPushUri = httpPushUri,\n    setMultipartHttpPushUri: (state, multipartHttpPushUri) => state.multipartHttpPushUri = multipartHttpPushUri\n  },\n  actions: {\n    async getFirmwareInformation({\n      dispatch\n    }) {\n      dispatch('getActiveBiosFirmware');\n      dispatch('getActiveBmcFirmware');\n      return await dispatch('getFirmwareInventory');\n    },\n    async getActiveBmcFirmware({\n      commit\n    }) {\n      return api.get(`${await this.dispatch('global/getBmcPath')}`).then(({\n        data: {\n          Links\n        }\n      }) => {\n        const id = Links?.ActiveSoftwareImage['@odata.id'].split('/').pop();\n        commit('setActiveBmcFirmwareId', id);\n      }).catch(error => console.log(error));\n    },\n    async getActiveBiosFirmware({\n      commit\n    }) {\n      return api.get(`${await this.dispatch('global/getSystemPath')}/Bios`).then(({\n        data: {\n          Links\n        }\n      }) => {\n        const id = Links?.ActiveSoftwareImage['@odata.id'].split('/').pop();\n        commit('setActiveBiosFirmwareId', id);\n      }).catch(error => console.log(error));\n    },\n    async getFirmwareInventory({\n      commit\n    }) {\n      const inventoryList = await api.get('/redfish/v1/UpdateService/FirmwareInventory').then(({\n        data: {\n          Members = []\n        } = {}\n      }) => Members.map(item => api.get(item['@odata.id']))).catch(error => console.log(error));\n      await api.all(inventoryList).then(response => {\n        const bmcFirmware = [];\n        const biosFirmware = [];\n        response.forEach(({\n          data\n        }) => {\n          const firmwareType = data?.RelatedItem?.[0]?.['@odata.id'].split('/').pop();\n          const item = {\n            version: data?.Version,\n            id: data?.Id,\n            location: data?.['@odata.id'],\n            status: data?.Status?.Health\n          };\n          if (firmwareType === 'bmc') {\n            bmcFirmware.push(item);\n          } else if (firmwareType === 'Bios') {\n            biosFirmware.push(item);\n          }\n        });\n        commit('setBmcFirmware', bmcFirmware);\n        commit('setBiosFirmware', biosFirmware);\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    getUpdateServiceSettings({\n      commit\n    }) {\n      api.get('/redfish/v1/UpdateService').then(({\n        data\n      }) => {\n        const applyTime = data.HttpPushUriOptions.HttpPushUriApplyTime.ApplyTime;\n        commit('setApplyTime', applyTime);\n        const httpPushUri = data.HttpPushUri;\n        commit('setHttpPushUri', httpPushUri);\n        const multipartHttpPushUri = data.MultipartHttpPushUri;\n        commit('setMultipartHttpPushUri', multipartHttpPushUri);\n      }).catch(error => console.log(error));\n    },\n    async uploadFirmware({\n      state,\n      dispatch\n    }, params) {\n      if (state.multipartHttpPushUri != null) {\n        return dispatch('uploadFirmwareMultipartHttpPush', params);\n      } else if (state.httpPushUri != null) {\n        return dispatch('uploadFirmwareHttpPush', params);\n      } else {\n        console.log('Do not support firmware push update');\n      }\n    },\n    async uploadFirmwareHttpPush({\n      state\n    }, {\n      image\n    }) {\n      return await api.post(state.httpPushUri, image, {\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        }\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageFirmware.toast.errorUpdateFirmware'));\n      });\n    },\n    async uploadFirmwareMultipartHttpPush({\n      state\n    }, {\n      image,\n      targets\n    }) {\n      const formData = new FormData();\n      formData.append('UpdateFile', image);\n      let params = {};\n      if (targets != null && targets.length > 0) {\n        params.Targets = targets;\n      } else {\n        // TODO: Should be OK to leave Targets out, remove this clause\n        // when bmcweb is updated\n        params.Targets = [`${await this.dispatch('global/getBmcPath')}`];\n      }\n      formData.append('UpdateParameters', JSON.stringify(params));\n      return await api.post(state.multipartHttpPushUri, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageFirmware.toast.errorUpdateFirmware'));\n      });\n    },\n    async switchBmcFirmwareAndReboot({\n      getters\n    }) {\n      const backupLocation = getters.backupBmcFirmware.location;\n      const data = {\n        Links: {\n          ActiveSoftwareImage: {\n            '@odata.id': backupLocation\n          }\n        }\n      };\n      return await api.patch(`${await this.dispatch('global/getBmcPath')}`, data).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageFirmware.toast.errorSwitchImages'));\n      });\n    }\n  }\n};\nexport default FirmwareStore;","map":{"version":3,"names":["api","i18n","FirmwareStore","namespaced","state","bmcFirmware","biosFirmware","bmcActiveFirmwareId","biosActiveFirmwareId","applyTime","multipartHttpPushUri","httpPushUri","getters","isSingleFileUploadEnabled","length","activeBmcFirmware","find","firmware","id","activeBiosFirmware","backupBmcFirmware","backupBiosFirmware","mutations","setActiveBmcFirmwareId","setActiveBiosFirmwareId","setBmcFirmware","setBiosFirmware","setApplyTime","setHttpPushUri","setMultipartHttpPushUri","actions","getFirmwareInformation","dispatch","getActiveBmcFirmware","commit","get","then","data","Links","ActiveSoftwareImage","split","pop","catch","error","console","log","getActiveBiosFirmware","getFirmwareInventory","inventoryList","Members","map","item","all","response","forEach","firmwareType","RelatedItem","version","Version","Id","location","status","Status","Health","push","getUpdateServiceSettings","HttpPushUriOptions","HttpPushUriApplyTime","ApplyTime","HttpPushUri","MultipartHttpPushUri","uploadFirmware","params","uploadFirmwareHttpPush","image","post","headers","Error","global","t","uploadFirmwareMultipartHttpPush","targets","formData","FormData","append","Targets","JSON","stringify","switchBmcFirmwareAndReboot","backupLocation","patch"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/Operations/FirmwareStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst FirmwareStore = {\n  namespaced: true,\n  state: {\n    bmcFirmware: [],\n    biosFirmware: [],\n    bmcActiveFirmwareId: null,\n    biosActiveFirmwareId: null,\n    applyTime: null,\n    multipartHttpPushUri: null,\n    httpPushUri: null,\n  },\n  getters: {\n    isSingleFileUploadEnabled: (state) => state.biosFirmware.length === 0,\n    activeBmcFirmware: (state) => {\n      return state.bmcFirmware.find(\n        (firmware) => firmware.id === state.bmcActiveFirmwareId,\n      );\n    },\n    activeBiosFirmware: (state) => {\n      return state.biosFirmware.find(\n        (firmware) => firmware.id === state.biosActiveFirmwareId,\n      );\n    },\n    backupBmcFirmware: (state) => {\n      return state.bmcFirmware.find(\n        (firmware) => firmware.id !== state.bmcActiveFirmwareId,\n      );\n    },\n    backupBiosFirmware: (state) => {\n      return state.biosFirmware.find(\n        (firmware) => firmware.id !== state.biosActiveFirmwareId,\n      );\n    },\n  },\n  mutations: {\n    setActiveBmcFirmwareId: (state, id) => (state.bmcActiveFirmwareId = id),\n    setActiveBiosFirmwareId: (state, id) => (state.biosActiveFirmwareId = id),\n    setBmcFirmware: (state, firmware) => (state.bmcFirmware = firmware),\n    setBiosFirmware: (state, firmware) => (state.biosFirmware = firmware),\n    setApplyTime: (state, applyTime) => (state.applyTime = applyTime),\n    setHttpPushUri: (state, httpPushUri) => (state.httpPushUri = httpPushUri),\n    setMultipartHttpPushUri: (state, multipartHttpPushUri) =>\n      (state.multipartHttpPushUri = multipartHttpPushUri),\n  },\n  actions: {\n    async getFirmwareInformation({ dispatch }) {\n      dispatch('getActiveBiosFirmware');\n      dispatch('getActiveBmcFirmware');\n      return await dispatch('getFirmwareInventory');\n    },\n    async getActiveBmcFirmware({ commit }) {\n      return api\n        .get(`${await this.dispatch('global/getBmcPath')}`)\n        .then(({ data: { Links } }) => {\n          const id = Links?.ActiveSoftwareImage['@odata.id'].split('/').pop();\n          commit('setActiveBmcFirmwareId', id);\n        })\n        .catch((error) => console.log(error));\n    },\n    async getActiveBiosFirmware({ commit }) {\n      return api\n        .get(`${await this.dispatch('global/getSystemPath')}/Bios`)\n        .then(({ data: { Links } }) => {\n          const id = Links?.ActiveSoftwareImage['@odata.id'].split('/').pop();\n          commit('setActiveBiosFirmwareId', id);\n        })\n        .catch((error) => console.log(error));\n    },\n    async getFirmwareInventory({ commit }) {\n      const inventoryList = await api\n        .get('/redfish/v1/UpdateService/FirmwareInventory')\n        .then(({ data: { Members = [] } = {} }) =>\n          Members.map((item) => api.get(item['@odata.id'])),\n        )\n        .catch((error) => console.log(error));\n      await api\n        .all(inventoryList)\n        .then((response) => {\n          const bmcFirmware = [];\n          const biosFirmware = [];\n          response.forEach(({ data }) => {\n            const firmwareType = data?.RelatedItem?.[0]?.['@odata.id']\n              .split('/')\n              .pop();\n            const item = {\n              version: data?.Version,\n              id: data?.Id,\n              location: data?.['@odata.id'],\n              status: data?.Status?.Health,\n            };\n            if (firmwareType === 'bmc') {\n              bmcFirmware.push(item);\n            } else if (firmwareType === 'Bios') {\n              biosFirmware.push(item);\n            }\n          });\n          commit('setBmcFirmware', bmcFirmware);\n          commit('setBiosFirmware', biosFirmware);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n    getUpdateServiceSettings({ commit }) {\n      api\n        .get('/redfish/v1/UpdateService')\n        .then(({ data }) => {\n          const applyTime =\n            data.HttpPushUriOptions.HttpPushUriApplyTime.ApplyTime;\n          commit('setApplyTime', applyTime);\n          const httpPushUri = data.HttpPushUri;\n          commit('setHttpPushUri', httpPushUri);\n          const multipartHttpPushUri = data.MultipartHttpPushUri;\n          commit('setMultipartHttpPushUri', multipartHttpPushUri);\n        })\n        .catch((error) => console.log(error));\n    },\n    async uploadFirmware({ state, dispatch }, params) {\n      if (state.multipartHttpPushUri != null) {\n        return dispatch('uploadFirmwareMultipartHttpPush', params);\n      } else if (state.httpPushUri != null) {\n        return dispatch('uploadFirmwareHttpPush', params);\n      } else {\n        console.log('Do not support firmware push update');\n      }\n    },\n    async uploadFirmwareHttpPush({ state }, { image }) {\n      return await api\n        .post(state.httpPushUri, image, {\n          headers: { 'Content-Type': 'application/octet-stream' },\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageFirmware.toast.errorUpdateFirmware'),\n          );\n        });\n    },\n    async uploadFirmwareMultipartHttpPush({ state }, { image, targets }) {\n      const formData = new FormData();\n      formData.append('UpdateFile', image);\n      let params = {};\n      if (targets != null && targets.length > 0) {\n        params.Targets = targets;\n      } else {\n        // TODO: Should be OK to leave Targets out, remove this clause\n        // when bmcweb is updated\n        params.Targets = [`${await this.dispatch('global/getBmcPath')}`];\n      }\n      formData.append('UpdateParameters', JSON.stringify(params));\n      return await api\n        .post(state.multipartHttpPushUri, formData, {\n          headers: { 'Content-Type': 'multipart/form-data' },\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageFirmware.toast.errorUpdateFirmware'),\n          );\n        });\n    },\n    async switchBmcFirmwareAndReboot({ getters }) {\n      const backupLocation = getters.backupBmcFirmware.location;\n      const data = {\n        Links: {\n          ActiveSoftwareImage: {\n            '@odata.id': backupLocation,\n          },\n        },\n      };\n      return await api\n        .patch(`${await this.dispatch('global/getBmcPath')}`, data)\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageFirmware.toast.errorSwitchImages'),\n          );\n        });\n    },\n  },\n};\n\nexport default FirmwareStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}