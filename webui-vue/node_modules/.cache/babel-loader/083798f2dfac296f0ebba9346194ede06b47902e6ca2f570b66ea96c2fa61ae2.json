{"ast":null,"code":"import IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport ModalAddDestination from './ModalAddDestination';\nimport PageTitle from '@/components/Global/PageTitle';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport TableToolbar from '@/components/Global/TableToolbar';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport BVTableSelectableMixin, { selectedRows, tableHeaderCheckboxModel, tableHeaderCheckboxIndeterminate } from '@/components/Mixins/BVTableSelectableMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  name: 'SnmpAlerts',\n  components: {\n    PageTitle,\n    IconAdd,\n    TableToolbar,\n    IconTrashcan,\n    ModalAddDestination,\n    TableRowAction\n  },\n  mixins: [BVTableSelectableMixin, BVToastMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      fields: [{\n        key: 'checkbox'\n      }, {\n        key: 'IP',\n        label: i18n.global.t('pageSnmpAlerts.table.ipaddress')\n      }, {\n        key: 'Port',\n        label: i18n.global.t('pageSnmpAlerts.table.port')\n      }, {\n        key: 'actions',\n        label: '',\n        tdClass: 'text-right text-nowrap'\n      }],\n      tableToolbarActions: [{\n        value: 'delete',\n        label: i18n.global.t('global.action.delete')\n      }],\n      selectedRows: selectedRows,\n      tableHeaderCheckboxModel: tableHeaderCheckboxModel,\n      tableHeaderCheckboxIndeterminate: tableHeaderCheckboxIndeterminate\n    };\n  },\n  computed: {\n    allSnmpDetails() {\n      return this.$store.getters['snmpAlerts/allSnmpDetails'];\n    },\n    tableItems() {\n      // transform destination data to table data\n      return this.allSnmpDetails.map(subscriptions => {\n        const [destination, dataWithProtocol, dataWithoutProtocol] = [subscriptions.Destination, subscriptions.Destination.split('/')[2].split(':'), subscriptions.Destination.split(':')];\n        //condition to check if destination comes with protocol or not\n        const conditionForProtocolCheck = destination.includes('://');\n        const ip = conditionForProtocolCheck ? dataWithProtocol[0] : dataWithoutProtocol[0];\n        const port = conditionForProtocolCheck ? dataWithProtocol[1] : dataWithoutProtocol[1];\n        return {\n          IP: ip,\n          Port: port,\n          id: subscriptions.Id,\n          actions: [{\n            value: 'delete',\n            enabled: true,\n            title: i18n.global.t('pageSnmpAlerts.deleteDestination')\n          }],\n          ...subscriptions\n        };\n      });\n    }\n  },\n  created() {\n    this.startLoader();\n    this.$store.dispatch('snmpAlerts/getSnmpDetails').finally(() => this.endLoader());\n  },\n  methods: {\n    onModalOk({\n      ipAddress,\n      port\n    }) {\n      const protocolIpAddress = 'snmp://' + ipAddress;\n      const destination = port ? protocolIpAddress + ':' + port : protocolIpAddress;\n      const data = {\n        Destination: destination,\n        SubscriptionType: 'SNMPTrap',\n        Protocol: 'SNMPv2c'\n      };\n      this.startLoader();\n      this.$store.dispatch('snmpAlerts/addDestination', {\n        data\n      }).then(success => this.successToast(success)).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => this.endLoader());\n    },\n    initModalAddDestination() {\n      this.$bvModal.show('add-destination');\n    },\n    initModalDeleteDestination(destination) {\n      this.$bvModal.msgBoxConfirm(i18n.global.t('pageSnmpAlerts.modal.deleteConfirmMessage', {\n        destination: destination.id\n      }), {\n        title: i18n.global.t('pageSnmpAlerts.modal.deleteSnmpDestinationTitle'),\n        okTitle: i18n.global.t('pageSnmpAlerts.deleteDestination'),\n        cancelTitle: i18n.global.t('global.action.cancel'),\n        autoFocusButton: 'ok'\n      }).then(deleteConfirmed => {\n        if (deleteConfirmed) {\n          this.deleteDestination(destination);\n        }\n      });\n    },\n    deleteDestination({\n      id\n    }) {\n      this.startLoader();\n      this.$store.dispatch('snmpAlerts/deleteDestination', id).then(success => this.successToast(success)).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => this.endLoader());\n    },\n    onBatchAction(action) {\n      if (action === 'delete') {\n        this.$bvModal.msgBoxConfirm(i18n.global.t('pageSnmpAlerts.modal.batchDeleteConfirmMessage', this.selectedRows.length), {\n          title: i18n.global.t('pageSnmpAlerts.modal.deleteSnmpDestinationTitle', this.selectedRows.length),\n          okTitle: i18n.global.t('pageSnmpAlerts.deleteDestination', this.selectedRows.length),\n          cancelTitle: i18n.global.t('global.action.cancel'),\n          autoFocusButton: 'ok'\n        }).then(deleteConfirmed => {\n          if (deleteConfirmed) {\n            this.startLoader();\n            this.$store.dispatch('snmpAlerts/deleteMultipleDestinations', this.selectedRows).then(messages => {\n              messages.forEach(({\n                type,\n                message\n              }) => {\n                if (type === 'success') this.successToast(message);\n                if (type === 'error') this.errorToast(message);\n              });\n            }).finally(() => this.endLoader());\n          }\n        });\n      }\n    },\n    onTableRowAction(action, row) {\n      if (action === 'delete') {\n        this.initModalDeleteDestination(row);\n      }\n    }\n  }\n};","map":{"version":3,"names":["IconTrashcan","ModalAddDestination","PageTitle","IconAdd","TableToolbar","TableRowAction","LoadingBarMixin","BVToastMixin","BVTableSelectableMixin","selectedRows","tableHeaderCheckboxModel","tableHeaderCheckboxIndeterminate","useI18n","i18n","name","components","mixins","beforeRouteLeave","to","from","next","hideLoader","data","$t","t","fields","key","label","global","tdClass","tableToolbarActions","value","computed","allSnmpDetails","$store","getters","tableItems","map","subscriptions","destination","dataWithProtocol","dataWithoutProtocol","Destination","split","conditionForProtocolCheck","includes","ip","port","IP","Port","id","Id","actions","enabled","title","created","startLoader","dispatch","finally","endLoader","methods","onModalOk","ipAddress","protocolIpAddress","SubscriptionType","Protocol","then","success","successToast","catch","message","errorToast","initModalAddDestination","$bvModal","show","initModalDeleteDestination","msgBoxConfirm","okTitle","cancelTitle","autoFocusButton","deleteConfirmed","deleteDestination","onBatchAction","action","length","messages","forEach","type","onTableRowAction","row"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Settings/SnmpAlerts/SnmpAlerts.vue"],"sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title :description=\"$t('pageSnmpAlerts.pageDescription')\" />\n    <b-row>\n      <b-col xl=\"9\" class=\"text-right\">\n        <b-button variant=\"primary\" @click=\"initModalAddDestination\">\n          <icon-add />\n          {{ $t('pageSnmpAlerts.addDestination') }}\n        </b-button>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col xl=\"9\">\n        <table-toolbar\n          ref=\"toolbar\"\n          :selected-items-count=\"selectedRows.length\"\n          :actions=\"tableToolbarActions\"\n          @clear-selected=\"clearSelectedRows($refs.table)\"\n          @batch-action=\"onBatchAction\"\n        />\n        <b-table\n          ref=\"table\"\n          responsive=\"md\"\n          selectable\n          show-empty\n          no-select-on-click\n          hover\n          :fields=\"fields\"\n          :items=\"tableItems\"\n          :empty-text=\"$t('global.table.emptyMessage')\"\n          @row-selected=\"onRowSelected($event, tableItems.length)\"\n        >\n          <!-- Checkbox column -->\n          <template #head(checkbox)>\n            <b-form-checkbox\n              v-model=\"tableHeaderCheckboxModel\"\n              data-test-id=\"snmpAlerts-checkbox-selectAll\"\n              :indeterminate=\"tableHeaderCheckboxIndeterminate\"\n              @change=\"onChangeHeaderCheckbox($refs.table)\"\n            >\n              <span class=\"sr-only\">{{ $t('global.table.selectAll') }}</span>\n            </b-form-checkbox>\n          </template>\n          <template #cell(checkbox)=\"row\">\n            <b-form-checkbox\n              v-model=\"row.rowSelected\"\n              :data-test-id=\"`snmpAlerts-checkbox-selectRow-${row.index}`\"\n              @change=\"toggleSelectRow($refs.table, row.index)\"\n            >\n              <span class=\"sr-only\">{{ $t('global.table.selectItem') }}</span>\n            </b-form-checkbox>\n          </template>\n\n          <!-- table actions column -->\n          <template #cell(actions)=\"{ item }\">\n            <table-row-action\n              v-for=\"(action, index) in item.actions\"\n              :key=\"index\"\n              :value=\"action.value\"\n              :enabled=\"action.enabled\"\n              :title=\"action.title\"\n              :data-test-id=\"`snmpAlerts-button-deleteRow-${item.index}`\"\n              @click-table-action=\"onTableRowAction($event, item)\"\n            >\n              <template #icon>\n                <icon-trashcan v-if=\"action.value === 'delete'\" />\n              </template>\n            </table-row-action>\n          </template>\n        </b-table>\n      </b-col>\n    </b-row>\n    <!-- Modals -->\n    <modal-add-destination @ok=\"onModalOk\" />\n  </b-container>\n</template>\n\n<script>\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport ModalAddDestination from './ModalAddDestination';\nimport PageTitle from '@/components/Global/PageTitle';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport TableToolbar from '@/components/Global/TableToolbar';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\n\nimport BVTableSelectableMixin, {\n  selectedRows,\n  tableHeaderCheckboxModel,\n  tableHeaderCheckboxIndeterminate,\n} from '@/components/Mixins/BVTableSelectableMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  name: 'SnmpAlerts',\n  components: {\n    PageTitle,\n    IconAdd,\n    TableToolbar,\n    IconTrashcan,\n    ModalAddDestination,\n    TableRowAction,\n  },\n  mixins: [BVTableSelectableMixin, BVToastMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      fields: [\n        {\n          key: 'checkbox',\n        },\n        {\n          key: 'IP',\n          label: i18n.global.t('pageSnmpAlerts.table.ipaddress'),\n        },\n        {\n          key: 'Port',\n          label: i18n.global.t('pageSnmpAlerts.table.port'),\n        },\n        {\n          key: 'actions',\n          label: '',\n          tdClass: 'text-right text-nowrap',\n        },\n      ],\n      tableToolbarActions: [\n        {\n          value: 'delete',\n          label: i18n.global.t('global.action.delete'),\n        },\n      ],\n      selectedRows: selectedRows,\n      tableHeaderCheckboxModel: tableHeaderCheckboxModel,\n      tableHeaderCheckboxIndeterminate: tableHeaderCheckboxIndeterminate,\n    };\n  },\n  computed: {\n    allSnmpDetails() {\n      return this.$store.getters['snmpAlerts/allSnmpDetails'];\n    },\n    tableItems() {\n      // transform destination data to table data\n      return this.allSnmpDetails.map((subscriptions) => {\n        const [destination, dataWithProtocol, dataWithoutProtocol] = [\n          subscriptions.Destination,\n          subscriptions.Destination.split('/')[2].split(':'),\n          subscriptions.Destination.split(':'),\n        ];\n        //condition to check if destination comes with protocol or not\n        const conditionForProtocolCheck = destination.includes('://');\n        const ip = conditionForProtocolCheck\n          ? dataWithProtocol[0]\n          : dataWithoutProtocol[0];\n        const port = conditionForProtocolCheck\n          ? dataWithProtocol[1]\n          : dataWithoutProtocol[1];\n        return {\n          IP: ip,\n          Port: port,\n          id: subscriptions.Id,\n          actions: [\n            {\n              value: 'delete',\n              enabled: true,\n              title: i18n.global.t('pageSnmpAlerts.deleteDestination'),\n            },\n          ],\n          ...subscriptions,\n        };\n      });\n    },\n  },\n  created() {\n    this.startLoader();\n    this.$store\n      .dispatch('snmpAlerts/getSnmpDetails')\n      .finally(() => this.endLoader());\n  },\n  methods: {\n    onModalOk({ ipAddress, port }) {\n      const protocolIpAddress = 'snmp://' + ipAddress;\n      const destination = port\n        ? protocolIpAddress + ':' + port\n        : protocolIpAddress;\n      const data = {\n        Destination: destination,\n        SubscriptionType: 'SNMPTrap',\n        Protocol: 'SNMPv2c',\n      };\n      this.startLoader();\n      this.$store\n        .dispatch('snmpAlerts/addDestination', { data })\n        .then((success) => this.successToast(success))\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => this.endLoader());\n    },\n    initModalAddDestination() {\n      this.$bvModal.show('add-destination');\n    },\n    initModalDeleteDestination(destination) {\n      this.$bvModal\n        .msgBoxConfirm(\n          i18n.global.t('pageSnmpAlerts.modal.deleteConfirmMessage', {\n            destination: destination.id,\n          }),\n          {\n            title: i18n.global.t(\n              'pageSnmpAlerts.modal.deleteSnmpDestinationTitle',\n            ),\n            okTitle: i18n.global.t('pageSnmpAlerts.deleteDestination'),\n            cancelTitle: i18n.global.t('global.action.cancel'),\n            autoFocusButton: 'ok',\n          },\n        )\n        .then((deleteConfirmed) => {\n          if (deleteConfirmed) {\n            this.deleteDestination(destination);\n          }\n        });\n    },\n    deleteDestination({ id }) {\n      this.startLoader();\n      this.$store\n        .dispatch('snmpAlerts/deleteDestination', id)\n        .then((success) => this.successToast(success))\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => this.endLoader());\n    },\n    onBatchAction(action) {\n      if (action === 'delete') {\n        this.$bvModal\n          .msgBoxConfirm(\n            i18n.global.t(\n              'pageSnmpAlerts.modal.batchDeleteConfirmMessage',\n              this.selectedRows.length,\n            ),\n            {\n              title: i18n.global.t(\n                'pageSnmpAlerts.modal.deleteSnmpDestinationTitle',\n                this.selectedRows.length,\n              ),\n              okTitle: i18n.global.t(\n                'pageSnmpAlerts.deleteDestination',\n                this.selectedRows.length,\n              ),\n              cancelTitle: i18n.global.t('global.action.cancel'),\n              autoFocusButton: 'ok',\n            },\n          )\n          .then((deleteConfirmed) => {\n            if (deleteConfirmed) {\n              this.startLoader();\n              this.$store\n                .dispatch(\n                  'snmpAlerts/deleteMultipleDestinations',\n                  this.selectedRows,\n                )\n                .then((messages) => {\n                  messages.forEach(({ type, message }) => {\n                    if (type === 'success') this.successToast(message);\n                    if (type === 'error') this.errorToast(message);\n                  });\n                })\n                .finally(() => this.endLoader());\n            }\n          });\n      }\n    },\n    onTableRowAction(action, row) {\n      if (action === 'delete') {\n        this.initModalDeleteDestination(row);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AA8EA,OAAOA,YAAW,MAAO,mCAAmC;AAC5D,OAAOC,mBAAkB,MAAO,uBAAuB;AACvD,OAAOC,SAAQ,MAAO,+BAA+B;AACrD,OAAOC,OAAM,MAAO,kCAAkC;AACtD,OAAOC,YAAW,MAAO,kCAAkC;AAC3D,OAAOC,cAAa,MAAO,oCAAoC;AAC/D,OAAOC,eAAc,MAAO,qCAAqC;AACjE,OAAOC,YAAW,MAAO,kCAAkC;AAE3D,OAAOC,sBAAsB,IAC3BC,YAAY,EACZC,wBAAwB,EACxBC,gCAAgC,QAC3B,4CAA4C;AACnD,SAASC,OAAM,QAAS,UAAU;AAClC,OAAOC,IAAG,MAAO,QAAQ;AAEzB,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,UAAU,EAAE;IACVb,SAAS;IACTC,OAAO;IACPC,YAAY;IACZJ,YAAY;IACZC,mBAAmB;IACnBI;EACF,CAAC;EACDW,MAAM,EAAE,CAACR,sBAAsB,EAAED,YAAY,EAAED,eAAe,CAAC;EAC/DW,gBAAgBA,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAC/B,IAAI,CAACC,UAAU,CAAC,CAAC;IACjBD,IAAI,CAAC,CAAC;EACR,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,EAAE,EAAEX,OAAO,CAAC,CAAC,CAACY,CAAC;MACfC,MAAM,EAAE,CACN;QACEC,GAAG,EAAE;MACP,CAAC,EACD;QACEA,GAAG,EAAE,IAAI;QACTC,KAAK,EAAEd,IAAI,CAACe,MAAM,CAACJ,CAAC,CAAC,gCAAgC;MACvD,CAAC,EACD;QACEE,GAAG,EAAE,MAAM;QACXC,KAAK,EAAEd,IAAI,CAACe,MAAM,CAACJ,CAAC,CAAC,2BAA2B;MAClD,CAAC,EACD;QACEE,GAAG,EAAE,SAAS;QACdC,KAAK,EAAE,EAAE;QACTE,OAAO,EAAE;MACX,CAAC,CACF;MACDC,mBAAmB,EAAE,CACnB;QACEC,KAAK,EAAE,QAAQ;QACfJ,KAAK,EAAEd,IAAI,CAACe,MAAM,CAACJ,CAAC,CAAC,sBAAsB;MAC7C,CAAC,CACF;MACDf,YAAY,EAAEA,YAAY;MAC1BC,wBAAwB,EAAEA,wBAAwB;MAClDC,gCAAgC,EAAEA;IACpC,CAAC;EACH,CAAC;EACDqB,QAAQ,EAAE;IACRC,cAAcA,CAAA,EAAG;MACf,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,2BAA2B,CAAC;IACzD,CAAC;IACDC,UAAUA,CAAA,EAAG;MACX;MACA,OAAO,IAAI,CAACH,cAAc,CAACI,GAAG,CAAEC,aAAa,IAAK;QAChD,MAAM,CAACC,WAAW,EAAEC,gBAAgB,EAAEC,mBAAmB,IAAI,CAC3DH,aAAa,CAACI,WAAW,EACzBJ,aAAa,CAACI,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,EAClDL,aAAa,CAACI,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC,CACrC;QACD;QACA,MAAMC,yBAAwB,GAAIL,WAAW,CAACM,QAAQ,CAAC,KAAK,CAAC;QAC7D,MAAMC,EAAC,GAAIF,yBAAwB,GAC/BJ,gBAAgB,CAAC,CAAC,IAClBC,mBAAmB,CAAC,CAAC,CAAC;QAC1B,MAAMM,IAAG,GAAIH,yBAAwB,GACjCJ,gBAAgB,CAAC,CAAC,IAClBC,mBAAmB,CAAC,CAAC,CAAC;QAC1B,OAAO;UACLO,EAAE,EAAEF,EAAE;UACNG,IAAI,EAAEF,IAAI;UACVG,EAAE,EAAEZ,aAAa,CAACa,EAAE;UACpBC,OAAO,EAAE,CACP;YACErB,KAAK,EAAE,QAAQ;YACfsB,OAAO,EAAE,IAAI;YACbC,KAAK,EAAEzC,IAAI,CAACe,MAAM,CAACJ,CAAC,CAAC,kCAAkC;UACzD,CAAC,CACF;UACD,GAAGc;QACL,CAAC;MACH,CAAC,CAAC;IACJ;EACF,CAAC;EACDiB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACtB,MAAK,CACPuB,QAAQ,CAAC,2BAA2B,EACpCC,OAAO,CAAC,MAAM,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;EACpC,CAAC;EACDC,OAAO,EAAE;IACPC,SAASA,CAAC;MAAEC,SAAS;MAAEf;IAAK,CAAC,EAAE;MAC7B,MAAMgB,iBAAgB,GAAI,SAAQ,GAAID,SAAS;MAC/C,MAAMvB,WAAU,GAAIQ,IAAG,GACnBgB,iBAAgB,GAAI,GAAE,GAAIhB,IAAG,GAC7BgB,iBAAiB;MACrB,MAAMzC,IAAG,GAAI;QACXoB,WAAW,EAAEH,WAAW;QACxByB,gBAAgB,EAAE,UAAU;QAC5BC,QAAQ,EAAE;MACZ,CAAC;MACD,IAAI,CAACT,WAAW,CAAC,CAAC;MAClB,IAAI,CAACtB,MAAK,CACPuB,QAAQ,CAAC,2BAA2B,EAAE;QAAEnC;MAAK,CAAC,EAC9C4C,IAAI,CAAEC,OAAO,IAAK,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC,EAC5CE,KAAK,CAAC,CAAC;QAAEC;MAAQ,CAAC,KAAK,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC,EAC/CZ,OAAO,CAAC,MAAM,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;IACpC,CAAC;IACDa,uBAAuBA,CAAA,EAAG;MACxB,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,iBAAiB,CAAC;IACvC,CAAC;IACDC,0BAA0BA,CAACpC,WAAW,EAAE;MACtC,IAAI,CAACkC,QAAO,CACTG,aAAa,CACZ/D,IAAI,CAACe,MAAM,CAACJ,CAAC,CAAC,2CAA2C,EAAE;QACzDe,WAAW,EAAEA,WAAW,CAACW;MAC3B,CAAC,CAAC,EACF;QACEI,KAAK,EAAEzC,IAAI,CAACe,MAAM,CAACJ,CAAC,CAClB,iDACF,CAAC;QACDqD,OAAO,EAAEhE,IAAI,CAACe,MAAM,CAACJ,CAAC,CAAC,kCAAkC,CAAC;QAC1DsD,WAAW,EAAEjE,IAAI,CAACe,MAAM,CAACJ,CAAC,CAAC,sBAAsB,CAAC;QAClDuD,eAAe,EAAE;MACnB,CACF,EACCb,IAAI,CAAEc,eAAe,IAAK;QACzB,IAAIA,eAAe,EAAE;UACnB,IAAI,CAACC,iBAAiB,CAAC1C,WAAW,CAAC;QACrC;MACF,CAAC,CAAC;IACN,CAAC;IACD0C,iBAAiBA,CAAC;MAAE/B;IAAG,CAAC,EAAE;MACxB,IAAI,CAACM,WAAW,CAAC,CAAC;MAClB,IAAI,CAACtB,MAAK,CACPuB,QAAQ,CAAC,8BAA8B,EAAEP,EAAE,EAC3CgB,IAAI,CAAEC,OAAO,IAAK,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC,EAC5CE,KAAK,CAAC,CAAC;QAAEC;MAAQ,CAAC,KAAK,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC,EAC/CZ,OAAO,CAAC,MAAM,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;IACpC,CAAC;IACDuB,aAAaA,CAACC,MAAM,EAAE;MACpB,IAAIA,MAAK,KAAM,QAAQ,EAAE;QACvB,IAAI,CAACV,QAAO,CACTG,aAAa,CACZ/D,IAAI,CAACe,MAAM,CAACJ,CAAC,CACX,gDAAgD,EAChD,IAAI,CAACf,YAAY,CAAC2E,MACpB,CAAC,EACD;UACE9B,KAAK,EAAEzC,IAAI,CAACe,MAAM,CAACJ,CAAC,CAClB,iDAAiD,EACjD,IAAI,CAACf,YAAY,CAAC2E,MACpB,CAAC;UACDP,OAAO,EAAEhE,IAAI,CAACe,MAAM,CAACJ,CAAC,CACpB,kCAAkC,EAClC,IAAI,CAACf,YAAY,CAAC2E,MACpB,CAAC;UACDN,WAAW,EAAEjE,IAAI,CAACe,MAAM,CAACJ,CAAC,CAAC,sBAAsB,CAAC;UAClDuD,eAAe,EAAE;QACnB,CACF,EACCb,IAAI,CAAEc,eAAe,IAAK;UACzB,IAAIA,eAAe,EAAE;YACnB,IAAI,CAACxB,WAAW,CAAC,CAAC;YAClB,IAAI,CAACtB,MAAK,CACPuB,QAAQ,CACP,uCAAuC,EACvC,IAAI,CAAChD,YACP,EACCyD,IAAI,CAAEmB,QAAQ,IAAK;cAClBA,QAAQ,CAACC,OAAO,CAAC,CAAC;gBAAEC,IAAI;gBAAEjB;cAAQ,CAAC,KAAK;gBACtC,IAAIiB,IAAG,KAAM,SAAS,EAAE,IAAI,CAACnB,YAAY,CAACE,OAAO,CAAC;gBAClD,IAAIiB,IAAG,KAAM,OAAO,EAAE,IAAI,CAAChB,UAAU,CAACD,OAAO,CAAC;cAChD,CAAC,CAAC;YACJ,CAAC,EACAZ,OAAO,CAAC,MAAM,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;UACpC;QACF,CAAC,CAAC;MACN;IACF,CAAC;IACD6B,gBAAgBA,CAACL,MAAM,EAAEM,GAAG,EAAE;MAC5B,IAAIN,MAAK,KAAM,QAAQ,EAAE;QACvB,IAAI,CAACR,0BAA0B,CAACc,GAAG,CAAC;MACtC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}