{"ast":null,"code":"import BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport LoadingBarMixin, { loading } from '@/components/Mixins/LoadingBarMixin';\nimport ModalMacAddress from './ModalMacAddress.vue';\nimport ModalDefaultGateway from './ModalDefaultGateway.vue';\nimport ModalHostname from './ModalHostname.vue';\nimport ModalIpv4 from './ModalIpv4.vue';\nimport ModalIpv6 from './ModalIpv6.vue';\nimport ModalDns from './ModalDns.vue';\nimport NetworkGlobalSettings from './NetworkGlobalSettings.vue';\nimport NetworkInterfaceSettings from './NetworkInterfaceSettings.vue';\nimport PageSection from '@/components/Global/PageSection';\nimport PageTitle from '@/components/Global/PageTitle';\nimport TableIpv4 from './TableIpv4.vue';\nimport TableIpv6 from './TableIpv6.vue';\nimport TableDns from './TableDns.vue';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\nexport default {\n  name: 'Network',\n  components: {\n    ModalHostname,\n    ModalMacAddress,\n    ModalDefaultGateway,\n    ModalIpv4,\n    ModalIpv6,\n    ModalDns,\n    NetworkGlobalSettings,\n    NetworkInterfaceSettings,\n    PageSection,\n    PageTitle,\n    TableDns,\n    TableIpv4,\n    TableIpv6\n  },\n  mixins: [BVToastMixin, DataFormatterMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      currentHostname: '',\n      currentMacAddress: '',\n      defaultGateway: '',\n      ipv6DefaultGateway: '',\n      loading,\n      tabIndex: 0\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData'])\n  },\n  watch: {\n    ethernetData() {\n      this.getModalInfo();\n    }\n  },\n  created() {\n    this.startLoader();\n    const globalSettings = new Promise(resolve => {\n      this.$root.$on('network-global-settings-complete', () => resolve());\n    });\n    const interfaceSettings = new Promise(resolve => {\n      this.$root.$on('network-interface-settings-complete', () => resolve());\n    });\n    const networkTableDns = new Promise(resolve => {\n      this.$root.$on('network-table-dns-complete', () => resolve());\n    });\n    const networkTableIpv4 = new Promise(resolve => {\n      this.$root.$on('network-table-ipv4-complete', () => resolve());\n    });\n    const networkTableIpv6 = new Promise(resolve => {\n      this.$root.$on('network-table-ipv6-complete', () => resolve());\n    });\n    // Combine all child component Promises to indicate\n    // when page data load complete\n    Promise.all([this.$store.dispatch('network/getEthernetData'), globalSettings, interfaceSettings, networkTableDns, networkTableIpv4, networkTableIpv6]).finally(() => this.endLoader());\n  },\n  methods: {\n    getModalInfo() {\n      this.defaultGateway = this.$store.getters['network/globalNetworkSettings'][this.tabIndex].defaultGateway;\n      this.currentHostname = this.$store.getters['network/globalNetworkSettings'][this.tabIndex].hostname;\n      this.currentMacAddress = this.$store.getters['network/globalNetworkSettings'][this.tabIndex].macAddress;\n      this.ipv6DefaultGateway = this.$store.getters['network/globalNetworkSettings'][this.tabIndex].ipv6DefaultGateway;\n    },\n    getTabIndex(selectedIndex) {\n      this.tabIndex = selectedIndex;\n      this.$store.dispatch('network/setSelectedTabIndex', this.tabIndex);\n      this.$store.dispatch('network/setSelectedTabId', this.ethernetData[selectedIndex].Id);\n      this.getModalInfo();\n    },\n    saveIpv4Address(modalFormData) {\n      this.startLoader();\n      this.$store.dispatch('network/saveIpv4Address', modalFormData).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => this.endLoader());\n    },\n    saveIpv6Address(modalFormData) {\n      this.startLoader();\n      this.$store.dispatch('network/saveIpv6Address', modalFormData).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => this.endLoader());\n    },\n    saveDnsAddress(modalFormData) {\n      this.startLoader();\n      this.$store.dispatch('network/saveDnsAddress', modalFormData).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => this.endLoader());\n    },\n    saveSettings(modalFormData) {\n      this.startLoader();\n      this.$store.dispatch('network/saveSettings', modalFormData).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message)).finally(() => this.endLoader());\n    }\n  }\n};","map":{"version":3,"names":["BVToastMixin","DataFormatterMixin","LoadingBarMixin","loading","ModalMacAddress","ModalDefaultGateway","ModalHostname","ModalIpv4","ModalIpv6","ModalDns","NetworkGlobalSettings","NetworkInterfaceSettings","PageSection","PageTitle","TableIpv4","TableIpv6","TableDns","mapState","useI18n","name","components","mixins","beforeRouteLeave","to","from","next","hideLoader","data","$t","t","currentHostname","currentMacAddress","defaultGateway","ipv6DefaultGateway","tabIndex","computed","watch","ethernetData","getModalInfo","created","startLoader","globalSettings","Promise","resolve","$root","$on","interfaceSettings","networkTableDns","networkTableIpv4","networkTableIpv6","all","$store","dispatch","finally","endLoader","methods","getters","hostname","macAddress","getTabIndex","selectedIndex","Id","saveIpv4Address","modalFormData","then","message","successToast","catch","errorToast","saveIpv6Address","saveDnsAddress","saveSettings"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Settings/Network/Network.vue"],"sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title :description=\"$t('pageNetwork.pageDescription')\" />\n    <!-- Global settings for all interfaces -->\n    <network-global-settings />\n    <!-- Interface tabs -->\n    <page-section v-show=\"ethernetData\">\n      <b-row>\n        <b-col>\n          <b-card no-body>\n            <b-tabs\n              active-nav-item-class=\"font-weight-bold\"\n              card\n              content-class=\"mt-3\"\n            >\n              <b-tab\n                v-for=\"(data, index) in ethernetData\"\n                :key=\"data.Id\"\n                :title=\"data.Id\"\n                @click=\"getTabIndex(index)\"\n              >\n                <!-- Interface settings -->\n                <network-interface-settings :tab-index=\"tabIndex\" />\n                <!-- IPV4 table -->\n                <table-ipv-4 :tab-index=\"tabIndex\" />\n                <!-- IPV6 table -->\n                <table-ipv-6 :tab-index=\"tabIndex\" />\n                <!-- Static DNS table -->\n                <table-dns :tab-index=\"tabIndex\" />\n              </b-tab>\n            </b-tabs>\n          </b-card>\n        </b-col>\n      </b-row>\n    </page-section>\n    <!-- Modals -->\n    <modal-ipv4 :default-gateway=\"defaultGateway\" @ok=\"saveIpv4Address\" />\n    <modal-ipv6 @ok=\"saveIpv6Address\" />\n    <modal-dns @ok=\"saveDnsAddress\" />\n    <modal-hostname :hostname=\"currentHostname\" @ok=\"saveSettings\" />\n    <modal-mac-address :mac-address=\"currentMacAddress\" @ok=\"saveSettings\" />\n    <modal-default-gateway\n      :default-gateway=\"ipv6DefaultGateway\"\n      @ok=\"saveSettings\"\n    />\n  </b-container>\n</template>\n\n<script>\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport LoadingBarMixin, { loading } from '@/components/Mixins/LoadingBarMixin';\nimport ModalMacAddress from './ModalMacAddress.vue';\nimport ModalDefaultGateway from './ModalDefaultGateway.vue';\nimport ModalHostname from './ModalHostname.vue';\nimport ModalIpv4 from './ModalIpv4.vue';\nimport ModalIpv6 from './ModalIpv6.vue';\nimport ModalDns from './ModalDns.vue';\nimport NetworkGlobalSettings from './NetworkGlobalSettings.vue';\nimport NetworkInterfaceSettings from './NetworkInterfaceSettings.vue';\nimport PageSection from '@/components/Global/PageSection';\nimport PageTitle from '@/components/Global/PageTitle';\nimport TableIpv4 from './TableIpv4.vue';\nimport TableIpv6 from './TableIpv6.vue';\nimport TableDns from './TableDns.vue';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  name: 'Network',\n  components: {\n    ModalHostname,\n    ModalMacAddress,\n    ModalDefaultGateway,\n    ModalIpv4,\n    ModalIpv6,\n    ModalDns,\n    NetworkGlobalSettings,\n    NetworkInterfaceSettings,\n    PageSection,\n    PageTitle,\n    TableDns,\n    TableIpv4,\n    TableIpv6,\n  },\n  mixins: [BVToastMixin, DataFormatterMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      currentHostname: '',\n      currentMacAddress: '',\n      defaultGateway: '',\n      ipv6DefaultGateway: '',\n      loading,\n      tabIndex: 0,\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData']),\n  },\n  watch: {\n    ethernetData() {\n      this.getModalInfo();\n    },\n  },\n  created() {\n    this.startLoader();\n    const globalSettings = new Promise((resolve) => {\n      this.$root.$on('network-global-settings-complete', () => resolve());\n    });\n    const interfaceSettings = new Promise((resolve) => {\n      this.$root.$on('network-interface-settings-complete', () => resolve());\n    });\n    const networkTableDns = new Promise((resolve) => {\n      this.$root.$on('network-table-dns-complete', () => resolve());\n    });\n    const networkTableIpv4 = new Promise((resolve) => {\n      this.$root.$on('network-table-ipv4-complete', () => resolve());\n    });\n    const networkTableIpv6 = new Promise((resolve) => {\n      this.$root.$on('network-table-ipv6-complete', () => resolve());\n    });\n    // Combine all child component Promises to indicate\n    // when page data load complete\n    Promise.all([\n      this.$store.dispatch('network/getEthernetData'),\n      globalSettings,\n      interfaceSettings,\n      networkTableDns,\n      networkTableIpv4,\n      networkTableIpv6,\n    ]).finally(() => this.endLoader());\n  },\n  methods: {\n    getModalInfo() {\n      this.defaultGateway =\n        this.$store.getters['network/globalNetworkSettings'][\n          this.tabIndex\n        ].defaultGateway;\n\n      this.currentHostname =\n        this.$store.getters['network/globalNetworkSettings'][\n          this.tabIndex\n        ].hostname;\n\n      this.currentMacAddress =\n        this.$store.getters['network/globalNetworkSettings'][\n          this.tabIndex\n        ].macAddress;\n      this.ipv6DefaultGateway =\n        this.$store.getters['network/globalNetworkSettings'][\n          this.tabIndex\n        ].ipv6DefaultGateway;\n    },\n    getTabIndex(selectedIndex) {\n      this.tabIndex = selectedIndex;\n      this.$store.dispatch('network/setSelectedTabIndex', this.tabIndex);\n      this.$store.dispatch(\n        'network/setSelectedTabId',\n        this.ethernetData[selectedIndex].Id,\n      );\n      this.getModalInfo();\n    },\n    saveIpv4Address(modalFormData) {\n      this.startLoader();\n      this.$store\n        .dispatch('network/saveIpv4Address', modalFormData)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => this.endLoader());\n    },\n    saveIpv6Address(modalFormData) {\n      this.startLoader();\n      this.$store\n        .dispatch('network/saveIpv6Address', modalFormData)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => this.endLoader());\n    },\n    saveDnsAddress(modalFormData) {\n      this.startLoader();\n      this.$store\n        .dispatch('network/saveDnsAddress', modalFormData)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => this.endLoader());\n    },\n    saveSettings(modalFormData) {\n      this.startLoader();\n      this.$store\n        .dispatch('network/saveSettings', modalFormData)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message))\n        .finally(() => this.endLoader());\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}