{"ast":null,"code":"import { required, maxLength, minLength, requiredIf } from '@vuelidate/validators';\nimport { helpers, sameAs } from 'vuelidate/lib/validators';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport InputPasswordToggle from '@/components/Global/InputPasswordToggle';\nimport Alert from '@/components/Global/Alert';\nimport { useI18n } from 'vue-i18n';\nexport default {\n  components: {\n    Alert,\n    InputPasswordToggle\n  },\n  mixins: [VuelidateMixin],\n  props: {\n    user: {\n      type: Object,\n      default: null\n    },\n    passwordRequirements: {\n      type: Object,\n      required: true\n    }\n  },\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      originalUsername: '',\n      form: {\n        status: true,\n        username: '',\n        privilege: null,\n        password: '',\n        passwordConfirmation: '',\n        manualUnlock: false\n      },\n      disabled: this.$store.getters['global/username']\n    };\n  },\n  computed: {\n    newUser() {\n      return this.user ? false : true;\n    },\n    accountSettings() {\n      return this.$store.getters['userManagement/accountSettings'];\n    },\n    manualUnlockPolicy() {\n      return !this.accountSettings.accountLockoutDuration;\n    },\n    privilegeTypes() {\n      return this.$store.getters['userManagement/accountRoles'];\n    }\n  },\n  watch: {\n    user: function (value) {\n      if (value === null) return;\n      this.originalUsername = value.username;\n      this.form.username = value.username;\n      this.form.status = value.Enabled;\n      this.form.privilege = value.privilege;\n    }\n  },\n  validations() {\n    return {\n      form: {\n        status: {\n          required\n        },\n        username: {\n          required,\n          maxLength: maxLength(16),\n          pattern: helpers.regex('pattern', /^([a-zA-Z_][a-zA-Z0-9_]*)/)\n        },\n        privilege: {\n          required\n        },\n        password: {\n          required: requiredIf(function () {\n            return this.requirePassword();\n          }),\n          minLength: minLength(this.passwordRequirements.minLength),\n          maxLength: maxLength(this.passwordRequirements.maxLength)\n        },\n        passwordConfirmation: {\n          required: requiredIf(function () {\n            return this.requirePassword();\n          }),\n          sameAsPassword: sameAs('password')\n        },\n        manualUnlock: {}\n      }\n    };\n  },\n  methods: {\n    handleSubmit() {\n      let userData = {};\n      if (this.newUser) {\n        this.v$.$touch();\n        if (this.v$.$invalid) return;\n        userData.username = this.form.username;\n        userData.status = this.form.status;\n        userData.privilege = this.form.privilege;\n        userData.password = this.form.password;\n      } else {\n        if (this.v$.$invalid) return;\n        userData.originalUsername = this.originalUsername;\n        if (this.v$.form.status.$dirty) {\n          userData.status = this.form.status;\n        }\n        if (this.v$.form.username.$dirty) {\n          userData.username = this.form.username;\n        }\n        if (this.v$.form.privilege.$dirty) {\n          userData.privilege = this.form.privilege;\n        }\n        if (this.v$.form.password.$dirty) {\n          userData.password = this.form.password;\n        }\n        if (this.v$.form.manualUnlock.$dirty) {\n          // If form manualUnlock control $dirty then\n          // set user Locked property to false\n          userData.locked = false;\n        }\n        if (Object.entries(userData).length === 1) {\n          this.closeModal();\n          return;\n        }\n      }\n      this.$emit('ok', {\n        isNewUser: this.newUser,\n        userData\n      });\n      this.closeModal();\n    },\n    closeModal() {\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    },\n    resetForm() {\n      this.form.originalUsername = '';\n      this.form.status = true;\n      this.form.username = '';\n      this.form.privilege = null;\n      this.form.password = '';\n      this.form.passwordConfirmation = '';\n      this.v$.$reset();\n      this.$emit('hidden');\n    },\n    requirePassword() {\n      if (this.newUser) return true;\n      if (this.v$.form.password.$dirty) return true;\n      if (this.v$.form.passwordConfirmation.$dirty) return true;\n      return false;\n    },\n    onOk(bvModalEvt) {\n      // prevent modal close\n      bvModalEvt.preventDefault();\n      this.handleSubmit();\n    }\n  }\n};","map":{"version":3,"names":["required","maxLength","minLength","requiredIf","helpers","sameAs","VuelidateMixin","useVuelidate","InputPasswordToggle","Alert","useI18n","components","mixins","props","user","type","Object","default","passwordRequirements","setup","v$","data","$t","t","originalUsername","form","status","username","privilege","password","passwordConfirmation","manualUnlock","disabled","$store","getters","computed","newUser","accountSettings","manualUnlockPolicy","accountLockoutDuration","privilegeTypes","watch","value","Enabled","validations","pattern","regex","requirePassword","sameAsPassword","methods","handleSubmit","userData","$touch","$invalid","$dirty","locked","entries","length","closeModal","$emit","isNewUser","$nextTick","$refs","modal","hide","resetForm","$reset","onOk","bvModalEvt","preventDefault"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/SecurityAndAccess/UserManagement/ModalUser.vue"],"sourcesContent":["<template>\n  <b-modal id=\"modal-user\" ref=\"modal\" @hidden=\"resetForm\">\n    <template #modal-title>\n      <template v-if=\"newUser\">\n        {{ $t('pageUserManagement.addUser') }}\n      </template>\n      <template v-else>\n        {{ $t('pageUserManagement.editUser') }}\n      </template>\n    </template>\n    <b-form id=\"form-user\" novalidate @submit.prevent=\"handleSubmit\">\n      <b-container>\n        <!-- Manual unlock form control -->\n        <b-row v-if=\"!newUser && manualUnlockPolicy && user.Locked\">\n          <b-col sm=\"9\">\n            <alert :show=\"true\" variant=\"warning\" small>\n              <template v-if=\"!v$.form.manualUnlock.$dirty\">\n                {{ $t('pageUserManagement.modal.accountLocked') }}\n              </template>\n              <template v-else>\n                {{ $t('pageUserManagement.modal.clickSaveToUnlockAccount') }}\n              </template>\n            </alert>\n          </b-col>\n          <b-col sm=\"3\">\n            <input\n              v-model=\"form.manualUnlock\"\n              data-test-id=\"userManagement-input-manualUnlock\"\n              type=\"hidden\"\n            />\n            <b-button\n              variant=\"primary\"\n              :disabled=\"v$.form.manualUnlock.$dirty\"\n              data-test-id=\"userManagement-button-manualUnlock\"\n              @click=\"v$.form.manualUnlock.$touch()\"\n            >\n              {{ $t('pageUserManagement.modal.unlock') }}\n            </b-button>\n          </b-col>\n        </b-row>\n        <b-row>\n          <b-col>\n            <b-form-group :label=\"$t('pageUserManagement.modal.accountStatus')\">\n              <b-form-radio\n                v-model=\"form.status\"\n                name=\"user-status\"\n                :value=\"true\"\n                data-test-id=\"userManagement-radioButton-statusEnabled\"\n                @input=\"v$.form.status.$touch()\"\n              >\n                {{ $t('global.status.enabled') }}\n              </b-form-radio>\n              <b-form-radio\n                v-model=\"form.status\"\n                name=\"user-status\"\n                data-test-id=\"userManagement-radioButton-statusDisabled\"\n                :value=\"false\"\n                :disabled=\"!newUser && originalUsername === disabled\"\n                @input=\"v$.form.status.$touch()\"\n              >\n                {{ $t('global.status.disabled') }}\n              </b-form-radio>\n            </b-form-group>\n            <b-form-group\n              :label=\"$t('pageUserManagement.modal.username')\"\n              label-for=\"username\"\n            >\n              <b-form-text id=\"username-help-block\">\n                {{ $t('pageUserManagement.modal.cannotStartWithANumber') }}\n                <br />\n                {{\n                  $t(\n                    'pageUserManagement.modal.noSpecialCharactersExceptUnderscore',\n                  )\n                }}\n              </b-form-text>\n              <b-form-input\n                id=\"username\"\n                v-model=\"form.username\"\n                type=\"text\"\n                aria-describedby=\"username-help-block\"\n                data-test-id=\"userManagement-input-username\"\n                :state=\"getValidationState(v$.form.username)\"\n                :disabled=\"!newUser && originalUsername === disabled\"\n                @input=\"v$.form.username.$touch()\"\n              />\n              <b-form-invalid-feedback role=\"alert\">\n                <template v-if=\"v$.form.username.required.$invalid\">\n                  {{ $t('global.form.fieldRequired') }}\n                </template>\n                <template v-else-if=\"v$.form.username.maxLength.$invalid\">\n                  {{\n                    $t('global.form.lengthMustBeBetween', { min: 1, max: 16 })\n                  }}\n                </template>\n                <template v-else-if=\"v$.form.username.pattern.$invalid\">\n                  {{ $t('global.form.invalidFormat') }}\n                </template>\n              </b-form-invalid-feedback>\n            </b-form-group>\n            <b-form-group\n              :label=\"$t('pageUserManagement.modal.privilege')\"\n              label-for=\"privilege\"\n            >\n              <b-form-select\n                id=\"privilege\"\n                v-model=\"form.privilege\"\n                :options=\"privilegeTypes\"\n                data-test-id=\"userManagement-select-privilege\"\n                :state=\"getValidationState(v$.form.privilege)\"\n                :disabled=\"!newUser && originalUsername === 'root'\"\n                @input=\"v$.form.privilege.$touch()\"\n              >\n                <template #first>\n                  <b-form-select-option :value=\"null\" disabled>\n                    {{ $t('global.form.selectAnOption') }}\n                  </b-form-select-option>\n                </template>\n              </b-form-select>\n              <b-form-invalid-feedback role=\"alert\">\n                <template v-if=\"v$.form.privilege.required.$invalid\">\n                  {{ $t('global.form.fieldRequired') }}\n                </template>\n              </b-form-invalid-feedback>\n            </b-form-group>\n          </b-col>\n          <b-col>\n            <b-form-group\n              :label=\"$t('pageUserManagement.modal.userPassword')\"\n              label-for=\"password\"\n            >\n              <b-form-text id=\"password-help-block\">\n                {{\n                  $t('pageUserManagement.modal.passwordMustBeBetween', {\n                    min: passwordRequirements.minLength,\n                    max: passwordRequirements.maxLength,\n                  })\n                }}\n              </b-form-text>\n              <input-password-toggle>\n                <b-form-input\n                  id=\"password\"\n                  v-model=\"form.password\"\n                  type=\"password\"\n                  data-test-id=\"userManagement-input-password\"\n                  aria-describedby=\"password-help-block\"\n                  :state=\"getValidationState(v$.form.password)\"\n                  class=\"form-control-with-button\"\n                  @input=\"v$.form.password.$touch()\"\n                />\n                <b-form-invalid-feedback role=\"alert\">\n                  <template v-if=\"v$.form.password.required.$invalid\">\n                    {{ $t('global.form.fieldRequired') }}\n                  </template>\n                  <template\n                    v-if=\"\n                      v$.form.password.minLength.$invalid ||\n                      v$.form.password.maxLength.$invalid\n                    \"\n                  >\n                    {{\n                      $t('pageUserManagement.modal.passwordMustBeBetween', {\n                        min: passwordRequirements.minLength,\n                        max: passwordRequirements.maxLength,\n                      })\n                    }}\n                  </template>\n                </b-form-invalid-feedback>\n              </input-password-toggle>\n            </b-form-group>\n            <b-form-group\n              :label=\"$t('pageUserManagement.modal.confirmUserPassword')\"\n              label-for=\"password-confirmation\"\n            >\n              <input-password-toggle>\n                <b-form-input\n                  id=\"password-confirmation\"\n                  v-model=\"form.passwordConfirmation\"\n                  data-test-id=\"userManagement-input-passwordConfirmation\"\n                  type=\"password\"\n                  :state=\"getValidationState(v$.form.passwordConfirmation)\"\n                  class=\"form-control-with-button\"\n                  @input=\"v$.form.passwordConfirmation.$touch()\"\n                />\n                <b-form-invalid-feedback role=\"alert\">\n                  <template\n                    v-if=\"v$.form.passwordConfirmation.required.$invalid\"\n                  >\n                    {{ $t('global.form.fieldRequired') }}\n                  </template>\n                  <template\n                    v-else-if=\"\n                      v$.form.passwordConfirmation.sameAsPassword.$invalid\n                    \"\n                  >\n                    {{ $t('pageUserManagement.modal.passwordsDoNotMatch') }}\n                  </template>\n                </b-form-invalid-feedback>\n              </input-password-toggle>\n            </b-form-group>\n          </b-col>\n        </b-row>\n      </b-container>\n    </b-form>\n    <template #modal-footer=\"{ cancel }\">\n      <b-button\n        variant=\"secondary\"\n        data-test-id=\"userManagement-button-cancel\"\n        @click=\"cancel()\"\n      >\n        {{ $t('global.action.cancel') }}\n      </b-button>\n      <b-button\n        form=\"form-user\"\n        data-test-id=\"userManagement-button-submit\"\n        type=\"submit\"\n        variant=\"primary\"\n        @click=\"onOk\"\n      >\n        <template v-if=\"newUser\">\n          {{ $t('pageUserManagement.addUser') }}\n        </template>\n        <template v-else>\n          {{ $t('global.action.save') }}\n        </template>\n      </b-button>\n    </template>\n  </b-modal>\n</template>\n\n<script>\nimport {\n  required,\n  maxLength,\n  minLength,\n  requiredIf,\n} from '@vuelidate/validators';\nimport { helpers, sameAs } from 'vuelidate/lib/validators';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\n\nimport InputPasswordToggle from '@/components/Global/InputPasswordToggle';\nimport Alert from '@/components/Global/Alert';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  components: { Alert, InputPasswordToggle },\n  mixins: [VuelidateMixin],\n  props: {\n    user: {\n      type: Object,\n      default: null,\n    },\n    passwordRequirements: {\n      type: Object,\n      required: true,\n    },\n  },\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      originalUsername: '',\n      form: {\n        status: true,\n        username: '',\n        privilege: null,\n        password: '',\n        passwordConfirmation: '',\n        manualUnlock: false,\n      },\n      disabled: this.$store.getters['global/username'],\n    };\n  },\n  computed: {\n    newUser() {\n      return this.user ? false : true;\n    },\n    accountSettings() {\n      return this.$store.getters['userManagement/accountSettings'];\n    },\n    manualUnlockPolicy() {\n      return !this.accountSettings.accountLockoutDuration;\n    },\n    privilegeTypes() {\n      return this.$store.getters['userManagement/accountRoles'];\n    },\n  },\n  watch: {\n    user: function (value) {\n      if (value === null) return;\n      this.originalUsername = value.username;\n      this.form.username = value.username;\n      this.form.status = value.Enabled;\n      this.form.privilege = value.privilege;\n    },\n  },\n  validations() {\n    return {\n      form: {\n        status: {\n          required,\n        },\n        username: {\n          required,\n          maxLength: maxLength(16),\n          pattern: helpers.regex('pattern', /^([a-zA-Z_][a-zA-Z0-9_]*)/),\n        },\n        privilege: {\n          required,\n        },\n        password: {\n          required: requiredIf(function () {\n            return this.requirePassword();\n          }),\n          minLength: minLength(this.passwordRequirements.minLength),\n          maxLength: maxLength(this.passwordRequirements.maxLength),\n        },\n        passwordConfirmation: {\n          required: requiredIf(function () {\n            return this.requirePassword();\n          }),\n          sameAsPassword: sameAs('password'),\n        },\n        manualUnlock: {},\n      },\n    };\n  },\n  methods: {\n    handleSubmit() {\n      let userData = {};\n\n      if (this.newUser) {\n        this.v$.$touch();\n        if (this.v$.$invalid) return;\n        userData.username = this.form.username;\n        userData.status = this.form.status;\n        userData.privilege = this.form.privilege;\n        userData.password = this.form.password;\n      } else {\n        if (this.v$.$invalid) return;\n        userData.originalUsername = this.originalUsername;\n        if (this.v$.form.status.$dirty) {\n          userData.status = this.form.status;\n        }\n        if (this.v$.form.username.$dirty) {\n          userData.username = this.form.username;\n        }\n        if (this.v$.form.privilege.$dirty) {\n          userData.privilege = this.form.privilege;\n        }\n        if (this.v$.form.password.$dirty) {\n          userData.password = this.form.password;\n        }\n        if (this.v$.form.manualUnlock.$dirty) {\n          // If form manualUnlock control $dirty then\n          // set user Locked property to false\n          userData.locked = false;\n        }\n        if (Object.entries(userData).length === 1) {\n          this.closeModal();\n          return;\n        }\n      }\n\n      this.$emit('ok', { isNewUser: this.newUser, userData });\n      this.closeModal();\n    },\n    closeModal() {\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    },\n    resetForm() {\n      this.form.originalUsername = '';\n      this.form.status = true;\n      this.form.username = '';\n      this.form.privilege = null;\n      this.form.password = '';\n      this.form.passwordConfirmation = '';\n      this.v$.$reset();\n      this.$emit('hidden');\n    },\n    requirePassword() {\n      if (this.newUser) return true;\n      if (this.v$.form.password.$dirty) return true;\n      if (this.v$.form.passwordConfirmation.$dirty) return true;\n      return false;\n    },\n    onOk(bvModalEvt) {\n      // prevent modal close\n      bvModalEvt.preventDefault();\n      this.handleSubmit();\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}