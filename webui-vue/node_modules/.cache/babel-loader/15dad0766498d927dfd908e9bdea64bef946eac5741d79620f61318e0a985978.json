{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport { find } from 'lodash';\nimport { requiredIf } from '@vuelidate/validators';\nimport { useVuelidate } from '@vuelidate/core';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin';\nimport LoadingBarMixin, { loading } from '@/components/Mixins/LoadingBarMixin';\nimport InputPasswordToggle from '@/components/Global/InputPasswordToggle';\nimport PageTitle from '@/components/Global/PageTitle';\nimport PageSection from '@/components/Global/PageSection';\nimport InfoTooltip from '@/components/Global/InfoTooltip';\nimport TableRoleGroups from './TableRoleGroups';\nimport { useI18n } from 'vue-i18n';\nexport default {\n  name: 'Ldap',\n  components: {\n    InfoTooltip,\n    InputPasswordToggle,\n    PageTitle,\n    PageSection,\n    TableRoleGroups\n  },\n  mixins: [BVToastMixin, VuelidateMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        ldapAuthenticationEnabled: this.$store.getters['ldap/isServiceEnabled'],\n        secureLdapEnabled: false,\n        activeDirectoryEnabled: this.$store.getters['ldap/isActiveDirectoryEnabled'],\n        serverUri: '',\n        bindDn: '',\n        bindPassword: '',\n        baseDn: '',\n        userIdAttribute: '',\n        groupIdAttribute: ''\n      },\n      loading\n    };\n  },\n  computed: {\n    ...mapGetters('ldap', ['isServiceEnabled', 'isActiveDirectoryEnabled', 'ldap', 'activeDirectory']),\n    sslCertificates() {\n      return this.$store.getters['certificates/allCertificates'];\n    },\n    caCertificateExpiration() {\n      const caCertificate = find(this.sslCertificates, {\n        type: 'TrustStore Certificate'\n      });\n      if (caCertificate === undefined) return null;\n      return caCertificate.validUntil;\n    },\n    ldapCertificateExpiration() {\n      const ldapCertificate = find(this.sslCertificates, {\n        type: 'LDAP Certificate'\n      });\n      if (ldapCertificate === undefined) return null;\n      return ldapCertificate.validUntil;\n    },\n    ldapProtocol() {\n      return this.form.secureLdapEnabled ? 'ldaps://' : 'ldap://';\n    }\n  },\n  watch: {\n    isServiceEnabled: function (value) {\n      this.form.ldapAuthenticationEnabled = value;\n    },\n    isActiveDirectoryEnabled: function (value) {\n      this.form.activeDirectoryEnabled = value;\n      this.setFormValues();\n    }\n  },\n  validations: {\n    form: {\n      ldapAuthenticationEnabled: {},\n      secureLdapEnabled: {},\n      activeDirectoryEnabled: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        })\n      },\n      serverUri: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        })\n      },\n      bindDn: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        })\n      },\n      bindPassword: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        })\n      },\n      baseDn: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        })\n      },\n      userIdAttribute: {},\n      groupIdAttribute: {}\n    }\n  },\n  created() {\n    this.startLoader();\n    this.$store.dispatch('ldap/getAccountSettings').finally(() => this.endLoader());\n    this.$store.dispatch('certificates/getCertificates').finally(() => this.endLoader());\n    this.setFormValues();\n  },\n  methods: {\n    setFormValues(serviceType) {\n      if (!serviceType) {\n        serviceType = this.isActiveDirectoryEnabled ? this.activeDirectory : this.ldap;\n      }\n      const {\n        serviceAddress = '',\n        bindDn = '',\n        baseDn = '',\n        userAttribute = '',\n        groupsAttribute = ''\n      } = serviceType;\n      const secureLdap = serviceAddress && serviceAddress.includes('ldaps://') ? true : false;\n      const serverUri = serviceAddress ? serviceAddress.replace(/ldaps?:\\/\\//, '') : '';\n      this.form.secureLdapEnabled = secureLdap;\n      this.form.serverUri = serverUri;\n      this.form.bindDn = bindDn;\n      this.form.bindPassword = '';\n      this.form.baseDn = baseDn;\n      this.form.userIdAttribute = userAttribute;\n      this.form.groupIdAttribute = groupsAttribute;\n    },\n    handleSubmit() {\n      this.v$.form.$touch();\n      if (this.v$.form.$invalid) return;\n      const data = {\n        serviceEnabled: this.form.ldapAuthenticationEnabled,\n        activeDirectoryEnabled: this.form.activeDirectoryEnabled,\n        serviceAddress: `${this.ldapProtocol}${this.form.serverUri}`,\n        bindDn: this.form.bindDn,\n        bindPassword: this.form.bindPassword,\n        baseDn: this.form.baseDn,\n        userIdAttribute: this.form.userIdAttribute,\n        groupIdAttribute: this.form.groupIdAttribute\n      };\n      this.startLoader();\n      this.$store.dispatch('ldap/saveAccountSettings', data).then(success => {\n        this.successToast(success);\n      }).catch(({\n        message\n      }) => {\n        this.errorToast(message);\n      }).finally(() => {\n        this.form.bindPassword = '';\n        this.v$.form.$reset();\n        this.endLoader();\n      });\n    },\n    onChangeServiceType(isActiveDirectoryEnabled) {\n      this.v$.form.activeDirectoryEnabled.$touch();\n      const serviceType = isActiveDirectoryEnabled ? this.activeDirectory : this.ldap;\n      // Set form values according to user selected\n      // service type\n      this.setFormValues(serviceType);\n    },\n    onChangeldapAuthenticationEnabled(isServiceEnabled) {\n      this.v$.form.ldapAuthenticationEnabled.$touch();\n      if (!isServiceEnabled) {\n        // Request will fail if sent with empty values.\n        // The frontend only checks for required fields\n        // when the service is enabled. This is to prevent\n        // an error if a user clears any properties then\n        // disables the service.\n        this.setFormValues();\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","find","requiredIf","useVuelidate","BVToastMixin","VuelidateMixin","LoadingBarMixin","loading","InputPasswordToggle","PageTitle","PageSection","InfoTooltip","TableRoleGroups","useI18n","name","components","mixins","beforeRouteLeave","to","from","next","hideLoader","setup","v$","data","$t","t","form","ldapAuthenticationEnabled","$store","getters","secureLdapEnabled","activeDirectoryEnabled","serverUri","bindDn","bindPassword","baseDn","userIdAttribute","groupIdAttribute","computed","sslCertificates","caCertificateExpiration","caCertificate","type","undefined","validUntil","ldapCertificateExpiration","ldapCertificate","ldapProtocol","watch","isServiceEnabled","value","isActiveDirectoryEnabled","setFormValues","validations","required","created","startLoader","dispatch","finally","endLoader","methods","serviceType","activeDirectory","ldap","serviceAddress","userAttribute","groupsAttribute","secureLdap","includes","replace","handleSubmit","$touch","$invalid","serviceEnabled","then","success","successToast","catch","message","errorToast","$reset","onChangeServiceType","onChangeldapAuthenticationEnabled"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/SecurityAndAccess/Ldap/Ldap.vue"],"sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title :description=\"$t('pageLdap.pageDescription')\" />\n    <page-section :section-title=\"$t('pageLdap.settings')\">\n      <b-form novalidate @submit.prevent=\"handleSubmit\">\n        <b-row>\n          <b-col>\n            <b-form-group\n              class=\"mb-3\"\n              :label=\"$t('pageLdap.form.ldapAuthentication')\"\n              :disabled=\"loading\"\n            >\n              <b-form-checkbox\n                v-model=\"form.ldapAuthenticationEnabled\"\n                data-test-id=\"ldap-checkbox-ldapAuthenticationEnabled\"\n                @change=\"onChangeldapAuthenticationEnabled\"\n              >\n                {{ $t('global.action.enable') }}\n              </b-form-checkbox>\n            </b-form-group>\n          </b-col>\n        </b-row>\n        <div class=\"form-background p-3\">\n          <b-form-group\n            class=\"m-0\"\n            :label=\"$t('pageLdap.ariaLabel.ldapSettings')\"\n            label-class=\"sr-only\"\n            :disabled=\"!form.ldapAuthenticationEnabled || loading\"\n          >\n            <b-row>\n              <b-col md=\"3\" lg=\"4\" xl=\"3\">\n                <b-form-group\n                  class=\"mb-4\"\n                  :label=\"$t('pageLdap.form.secureLdapUsingSsl')\"\n                >\n                  <b-form-text id=\"enable-secure-help-block\">\n                    {{ $t('pageLdap.form.secureLdapHelper') }}\n                  </b-form-text>\n                  <b-form-checkbox\n                    id=\"enable-secure-ldap\"\n                    v-model=\"form.secureLdapEnabled\"\n                    aria-describedby=\"enable-secure-help-block\"\n                    data-test-id=\"ldap-checkbox-secureLdapEnabled\"\n                    :disabled=\"\n                      !caCertificateExpiration || !ldapCertificateExpiration\n                    \"\n                    @change=\"v$.form.secureLdapEnabled.$touch()\"\n                  >\n                    {{ $t('global.action.enable') }}\n                  </b-form-checkbox>\n                </b-form-group>\n                <dl>\n                  <dt>{{ $t('pageLdap.form.caCertificateValidUntil') }}</dt>\n                  <dd v-if=\"caCertificateExpiration\">\n                    {{ $filters.formatDate(caCertificateExpiration) }}\n                  </dd>\n                  <dd v-else>--</dd>\n                  <dt>{{ $t('pageLdap.form.ldapCertificateValidUntil') }}</dt>\n                  <dd v-if=\"ldapCertificateExpiration\">\n                    {{ $filters.formatDate(ldapCertificateExpiration) }}\n                  </dd>\n                  <dd v-else>--</dd>\n                </dl>\n                <b-link\n                  class=\"d-inline-block mb-4 m-md-0\"\n                  to=\"/security-and-access/certificates\"\n                >\n                  {{ $t('pageLdap.form.manageSslCertificates') }}\n                </b-link>\n              </b-col>\n              <b-col md=\"9\" lg=\"8\" xl=\"9\">\n                <b-row>\n                  <b-col>\n                    <b-form-group :label=\"$t('pageLdap.form.serviceType')\">\n                      <b-form-radio\n                        v-model=\"form.activeDirectoryEnabled\"\n                        data-test-id=\"ldap-radio-activeDirectoryEnabled\"\n                        :value=\"false\"\n                        @change=\"onChangeServiceType\"\n                      >\n                        {{ $t('pageLdap.form.openLDAP') }}\n                      </b-form-radio>\n                      <b-form-radio\n                        v-model=\"form.activeDirectoryEnabled\"\n                        data-test-id=\"ldap-radio-activeDirectoryEnabled\"\n                        :value=\"true\"\n                        @change=\"onChangeServiceType\"\n                      >\n                        {{ $t('pageLdap.form.activeDirectory') }}\n                      </b-form-radio>\n                    </b-form-group>\n                  </b-col>\n                </b-row>\n                <b-row>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group label-for=\"server-uri\">\n                      <template #label>\n                        {{ $t('pageLdap.form.serverUri') }}\n                        <info-tooltip\n                          :title=\"$t('pageLdap.form.serverUriTooltip')\"\n                        />\n                      </template>\n                      <b-input-group :prepend=\"ldapProtocol\">\n                        <b-form-input\n                          id=\"server-uri\"\n                          v-model=\"form.serverUri\"\n                          data-test-id=\"ldap-input-serverUri\"\n                          :state=\"getValidationState(v$.form.serverUri)\"\n                          @change=\"v$.form.serverUri.$touch()\"\n                        />\n                        <b-form-invalid-feedback role=\"alert\">\n                          {{ $t('global.form.fieldRequired') }}\n                        </b-form-invalid-feedback>\n                      </b-input-group>\n                    </b-form-group>\n                  </b-col>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group\n                      :label=\"$t('pageLdap.form.bindDn')\"\n                      label-for=\"bind-dn\"\n                    >\n                      <b-form-input\n                        id=\"bind-dn\"\n                        v-model=\"form.bindDn\"\n                        data-test-id=\"ldap-input-bindDn\"\n                        :state=\"getValidationState(v$.form.bindDn)\"\n                        @change=\"v$.form.bindDn.$touch()\"\n                      />\n                      <b-form-invalid-feedback role=\"alert\">\n                        {{ $t('global.form.fieldRequired') }}\n                      </b-form-invalid-feedback>\n                    </b-form-group>\n                  </b-col>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group\n                      :label=\"$t('pageLdap.form.bindPassword')\"\n                      label-for=\"bind-password\"\n                    >\n                      <input-password-toggle\n                        data-test-id=\"ldap-input-togglePassword\"\n                      >\n                        <b-form-input\n                          id=\"bind-password\"\n                          v-model=\"form.bindPassword\"\n                          type=\"password\"\n                          :state=\"getValidationState(v$.form.bindPassword)\"\n                          class=\"form-control-with-button\"\n                          @change=\"v$.form.bindPassword.$touch()\"\n                        />\n                        <b-form-invalid-feedback role=\"alert\">\n                          {{ $t('global.form.fieldRequired') }}\n                        </b-form-invalid-feedback>\n                      </input-password-toggle>\n                    </b-form-group>\n                  </b-col>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group\n                      :label=\"$t('pageLdap.form.baseDn')\"\n                      label-for=\"base-dn\"\n                    >\n                      <b-form-input\n                        id=\"base-dn\"\n                        v-model=\"form.baseDn\"\n                        data-test-id=\"ldap-input-baseDn\"\n                        :state=\"getValidationState(v$.form.baseDn)\"\n                        @change=\"v$.form.baseDn.$touch()\"\n                      />\n                      <b-form-invalid-feedback role=\"alert\">\n                        {{ $t('global.form.fieldRequired') }}\n                      </b-form-invalid-feedback>\n                    </b-form-group>\n                  </b-col>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group label-for=\"user-id-attribute\">\n                      <template #label>\n                        {{ $t('pageLdap.form.userIdAttribute') }} -\n                        <span class=\"form-text d-inline\">\n                          {{ $t('global.form.optional') }}\n                        </span>\n                      </template>\n                      <b-form-input\n                        id=\"user-id-attribute\"\n                        v-model=\"form.userIdAttribute\"\n                        data-test-id=\"ldap-input-userIdAttribute\"\n                        @change=\"v$.form.userIdAttribute.$touch()\"\n                      />\n                    </b-form-group>\n                  </b-col>\n                  <b-col sm=\"6\" xl=\"4\">\n                    <b-form-group label-for=\"group-id-attribute\">\n                      <template #label>\n                        {{ $t('pageLdap.form.groupIdAttribute') }} -\n                        <span class=\"form-text d-inline\">\n                          {{ $t('global.form.optional') }}\n                        </span>\n                      </template>\n                      <b-form-input\n                        id=\"group-id-attribute\"\n                        v-model=\"form.groupIdAttribute\"\n                        data-test-id=\"ldap-input-groupIdAttribute\"\n                        @change=\"v$.form.groupIdAttribute.$touch()\"\n                      />\n                    </b-form-group>\n                  </b-col>\n                </b-row>\n              </b-col>\n            </b-row>\n          </b-form-group>\n        </div>\n        <b-row class=\"mt-4 mb-5\">\n          <b-col>\n            <b-btn\n              variant=\"primary\"\n              type=\"submit\"\n              data-test-id=\"ldap-button-saveSettings\"\n              :disabled=\"loading\"\n            >\n              {{ $t('global.action.saveSettings') }}\n            </b-btn>\n          </b-col>\n        </b-row>\n      </b-form>\n    </page-section>\n\n    <!-- Role groups -->\n    <page-section :section-title=\"$t('pageLdap.roleGroups')\">\n      <table-role-groups />\n    </page-section>\n  </b-container>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { find } from 'lodash';\nimport { requiredIf } from '@vuelidate/validators';\nimport { useVuelidate } from '@vuelidate/core';\n\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin';\nimport LoadingBarMixin, { loading } from '@/components/Mixins/LoadingBarMixin';\nimport InputPasswordToggle from '@/components/Global/InputPasswordToggle';\nimport PageTitle from '@/components/Global/PageTitle';\nimport PageSection from '@/components/Global/PageSection';\nimport InfoTooltip from '@/components/Global/InfoTooltip';\nimport TableRoleGroups from './TableRoleGroups';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  name: 'Ldap',\n  components: {\n    InfoTooltip,\n    InputPasswordToggle,\n    PageTitle,\n    PageSection,\n    TableRoleGroups,\n  },\n  mixins: [BVToastMixin, VuelidateMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        ldapAuthenticationEnabled: this.$store.getters['ldap/isServiceEnabled'],\n        secureLdapEnabled: false,\n        activeDirectoryEnabled:\n          this.$store.getters['ldap/isActiveDirectoryEnabled'],\n        serverUri: '',\n        bindDn: '',\n        bindPassword: '',\n        baseDn: '',\n        userIdAttribute: '',\n        groupIdAttribute: '',\n      },\n      loading,\n    };\n  },\n  computed: {\n    ...mapGetters('ldap', [\n      'isServiceEnabled',\n      'isActiveDirectoryEnabled',\n      'ldap',\n      'activeDirectory',\n    ]),\n    sslCertificates() {\n      return this.$store.getters['certificates/allCertificates'];\n    },\n    caCertificateExpiration() {\n      const caCertificate = find(this.sslCertificates, {\n        type: 'TrustStore Certificate',\n      });\n      if (caCertificate === undefined) return null;\n      return caCertificate.validUntil;\n    },\n    ldapCertificateExpiration() {\n      const ldapCertificate = find(this.sslCertificates, {\n        type: 'LDAP Certificate',\n      });\n      if (ldapCertificate === undefined) return null;\n      return ldapCertificate.validUntil;\n    },\n    ldapProtocol() {\n      return this.form.secureLdapEnabled ? 'ldaps://' : 'ldap://';\n    },\n  },\n  watch: {\n    isServiceEnabled: function (value) {\n      this.form.ldapAuthenticationEnabled = value;\n    },\n    isActiveDirectoryEnabled: function (value) {\n      this.form.activeDirectoryEnabled = value;\n      this.setFormValues();\n    },\n  },\n  validations: {\n    form: {\n      ldapAuthenticationEnabled: {},\n      secureLdapEnabled: {},\n      activeDirectoryEnabled: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        }),\n      },\n      serverUri: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        }),\n      },\n      bindDn: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        }),\n      },\n      bindPassword: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        }),\n      },\n      baseDn: {\n        required: requiredIf(function () {\n          return this.form.ldapAuthenticationEnabled;\n        }),\n      },\n      userIdAttribute: {},\n      groupIdAttribute: {},\n    },\n  },\n  created() {\n    this.startLoader();\n    this.$store\n      .dispatch('ldap/getAccountSettings')\n      .finally(() => this.endLoader());\n    this.$store\n      .dispatch('certificates/getCertificates')\n      .finally(() => this.endLoader());\n    this.setFormValues();\n  },\n  methods: {\n    setFormValues(serviceType) {\n      if (!serviceType) {\n        serviceType = this.isActiveDirectoryEnabled\n          ? this.activeDirectory\n          : this.ldap;\n      }\n      const {\n        serviceAddress = '',\n        bindDn = '',\n        baseDn = '',\n        userAttribute = '',\n        groupsAttribute = '',\n      } = serviceType;\n      const secureLdap =\n        serviceAddress && serviceAddress.includes('ldaps://') ? true : false;\n      const serverUri = serviceAddress\n        ? serviceAddress.replace(/ldaps?:\\/\\//, '')\n        : '';\n      this.form.secureLdapEnabled = secureLdap;\n      this.form.serverUri = serverUri;\n      this.form.bindDn = bindDn;\n      this.form.bindPassword = '';\n      this.form.baseDn = baseDn;\n      this.form.userIdAttribute = userAttribute;\n      this.form.groupIdAttribute = groupsAttribute;\n    },\n    handleSubmit() {\n      this.v$.form.$touch();\n      if (this.v$.form.$invalid) return;\n      const data = {\n        serviceEnabled: this.form.ldapAuthenticationEnabled,\n        activeDirectoryEnabled: this.form.activeDirectoryEnabled,\n        serviceAddress: `${this.ldapProtocol}${this.form.serverUri}`,\n        bindDn: this.form.bindDn,\n        bindPassword: this.form.bindPassword,\n        baseDn: this.form.baseDn,\n        userIdAttribute: this.form.userIdAttribute,\n        groupIdAttribute: this.form.groupIdAttribute,\n      };\n      this.startLoader();\n      this.$store\n        .dispatch('ldap/saveAccountSettings', data)\n        .then((success) => {\n          this.successToast(success);\n        })\n        .catch(({ message }) => {\n          this.errorToast(message);\n        })\n        .finally(() => {\n          this.form.bindPassword = '';\n          this.v$.form.$reset();\n          this.endLoader();\n        });\n    },\n    onChangeServiceType(isActiveDirectoryEnabled) {\n      this.v$.form.activeDirectoryEnabled.$touch();\n      const serviceType = isActiveDirectoryEnabled\n        ? this.activeDirectory\n        : this.ldap;\n      // Set form values according to user selected\n      // service type\n      this.setFormValues(serviceType);\n    },\n    onChangeldapAuthenticationEnabled(isServiceEnabled) {\n      this.v$.form.ldapAuthenticationEnabled.$touch();\n      if (!isServiceEnabled) {\n        // Request will fail if sent with empty values.\n        // The frontend only checks for required fields\n        // when the service is enabled. This is to prevent\n        // an error if a user clears any properties then\n        // disables the service.\n        this.setFormValues();\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}