{"ast":null,"code":"import PageTitle from '@/components/Global/PageTitle';\nimport PageSection from '@/components/Global/PageSection';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport BootSettings from './BootSettings';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport Alert from '@/components/Global/Alert';\nimport InfoTooltip from '@/components/Global/InfoTooltip';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  name: 'ServerPowerOperations',\n  components: {\n    PageTitle,\n    PageSection,\n    BootSettings,\n    Alert,\n    InfoTooltip\n  },\n  mixins: [BVToastMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        rebootOption: 'orderly',\n        shutdownOption: 'orderly'\n      }\n    };\n  },\n  computed: {\n    serverStatus() {\n      return this.$store.getters['global/serverStatus'];\n    },\n    isOperationInProgress() {\n      return this.$store.getters['controls/isOperationInProgress'];\n    },\n    lastPowerOperationTime() {\n      return this.$store.getters['controls/lastPowerOperationTime'];\n    },\n    oneTimeBootEnabled() {\n      return this.$store.getters['serverBootSettings/overrideEnabled'];\n    },\n    hasBootSourceOptions() {\n      let bootOptions = this.$store.getters['serverBootSettings/bootSourceOptions'];\n      return bootOptions.length !== 0;\n    }\n  },\n  created() {\n    this.startLoader();\n    const bootSettingsPromise = new Promise(resolve => {\n      this.$root.$on('server-power-operations-boot-settings-complete', () => resolve());\n    });\n    Promise.all([this.$store.dispatch('serverBootSettings/getBootSettings'), this.$store.dispatch('controls/getLastPowerOperationTime'), bootSettingsPromise]).finally(() => this.endLoader());\n  },\n  methods: {\n    powerOn() {\n      this.$store.dispatch('controls/serverPowerOn');\n    },\n    rebootServer() {\n      const modalMessage = i18n.global.t('pageServerPowerOperations.modal.confirmRebootMessage');\n      const modalOptions = {\n        title: i18n.global.t('pageServerPowerOperations.modal.confirmRebootTitle'),\n        okTitle: i18n.global.t('global.action.confirm'),\n        cancelTitle: i18n.global.t('global.action.cancel'),\n        autoFocusButton: 'ok'\n      };\n      if (this.form.rebootOption === 'orderly') {\n        this.$bvModal.msgBoxConfirm(modalMessage, modalOptions).then(confirmed => {\n          if (confirmed) this.$store.dispatch('controls/serverSoftReboot');\n        });\n      } else if (this.form.rebootOption === 'immediate') {\n        this.$bvModal.msgBoxConfirm(modalMessage, modalOptions).then(confirmed => {\n          if (confirmed) this.$store.dispatch('controls/serverHardReboot');\n        });\n      }\n    },\n    shutdownServer() {\n      const modalMessage = i18n.global.t('pageServerPowerOperations.modal.confirmShutdownMessage');\n      const modalOptions = {\n        title: i18n.global.t('pageServerPowerOperations.modal.confirmShutdownTitle'),\n        okTitle: i18n.global.t('global.action.confirm'),\n        cancelTitle: i18n.global.t('global.action.cancel'),\n        autoFocusButton: 'ok'\n      };\n      if (this.form.shutdownOption === 'orderly') {\n        this.$bvModal.msgBoxConfirm(modalMessage, modalOptions).then(confirmed => {\n          if (confirmed) this.$store.dispatch('controls/serverSoftPowerOff');\n        });\n      }\n      if (this.form.shutdownOption === 'immediate') {\n        this.$bvModal.msgBoxConfirm(modalMessage, modalOptions).then(confirmed => {\n          if (confirmed) this.$store.dispatch('controls/serverHardPowerOff');\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["PageTitle","PageSection","BVToastMixin","BootSettings","LoadingBarMixin","Alert","InfoTooltip","useI18n","i18n","name","components","mixins","beforeRouteLeave","to","from","next","hideLoader","data","$t","t","form","rebootOption","shutdownOption","computed","serverStatus","$store","getters","isOperationInProgress","lastPowerOperationTime","oneTimeBootEnabled","hasBootSourceOptions","bootOptions","length","created","startLoader","bootSettingsPromise","Promise","resolve","$root","$on","all","dispatch","finally","endLoader","methods","powerOn","rebootServer","modalMessage","global","modalOptions","title","okTitle","cancelTitle","autoFocusButton","$bvModal","msgBoxConfirm","then","confirmed","shutdownServer"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Operations/ServerPowerOperations/ServerPowerOperations.vue"],"sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title />\n    <b-row class=\"mb-4\">\n      <b-col md=\"8\" xl=\"6\">\n        <page-section\n          :section-title=\"$t('pageServerPowerOperations.currentStatus')\"\n        >\n          <b-row>\n            <b-col>\n              <dl>\n                <dt>{{ $t('pageServerPowerOperations.serverStatus') }}</dt>\n                <dd\n                  v-if=\"serverStatus === 'on'\"\n                  data-test-id=\"powerServerOps-text-hostStatus\"\n                >\n                  {{ $t('global.status.on') }}\n                </dd>\n                <dd\n                  v-else-if=\"serverStatus === 'off'\"\n                  data-test-id=\"powerServerOps-text-hostStatus\"\n                >\n                  {{ $t('global.status.off') }}\n                </dd>\n                <dd\n                  v-else-if=\"serverStatus === 'diagnosticMode'\"\n                  data-test-id=\"powerServerOps-text-hostStatus\"\n                >\n                  {{ $t('global.status.diagnosticMode') }}\n                </dd>\n                <dd v-else>\n                  {{ $t('global.status.notAvailable') }}\n                </dd>\n              </dl>\n            </b-col>\n          </b-row>\n          <b-row>\n            <b-col>\n              <dl>\n                <dt>\n                  {{ $t('pageServerPowerOperations.lastPowerOperation') }}\n                </dt>\n                <dd\n                  v-if=\"lastPowerOperationTime\"\n                  data-test-id=\"powerServerOps-text-lastPowerOp\"\n                >\n                  {{ $filters.formatDate(lastPowerOperationTime) }}\n                  {{ $filters.formatTime(lastPowerOperationTime) }}\n                </dd>\n                <dd v-else>--</dd>\n              </dl>\n            </b-col>\n          </b-row>\n        </page-section>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col v-if=\"hasBootSourceOptions\" sm=\"8\" md=\"6\" xl=\"4\">\n        <page-section\n          :section-title=\"$t('pageServerPowerOperations.serverBootSettings')\"\n        >\n          <boot-settings />\n        </page-section>\n      </b-col>\n      <b-col sm=\"8\" md=\"6\" xl=\"7\">\n        <page-section\n          :section-title=\"$t('pageServerPowerOperations.operations')\"\n        >\n          <alert :show=\"oneTimeBootEnabled\" variant=\"warning\">\n            {{ $t('pageServerPowerOperations.oneTimeBootWarning') }}\n          </alert>\n          <template v-if=\"isOperationInProgress\">\n            <alert variant=\"info\">\n              {{ $t('pageServerPowerOperations.operationInProgress') }}\n            </alert>\n          </template>\n          <template v-else-if=\"serverStatus === 'off'\">\n            <b-button\n              variant=\"primary\"\n              data-test-id=\"serverPowerOperations-button-powerOn\"\n              @click=\"powerOn\"\n            >\n              {{ $t('pageServerPowerOperations.powerOn') }}\n            </b-button>\n          </template>\n          <template v-else>\n            <!-- Reboot server options -->\n            <b-form novalidate class=\"mb-5\" @submit.prevent=\"rebootServer\">\n              <b-form-group\n                :label=\"$t('pageServerPowerOperations.rebootServer')\"\n              >\n                <b-form-radio\n                  v-model=\"form.rebootOption\"\n                  name=\"reboot-option\"\n                  data-test-id=\"serverPowerOperations-radio-rebootOrderly\"\n                  value=\"orderly\"\n                >\n                  {{ $t('pageServerPowerOperations.gracefulRestart') }}\n                  <info-tooltip\n                    :title=\"$t('pageServerPowerOperations.gracefulRestartInfo')\"\n                  />\n                </b-form-radio>\n                <b-form-radio\n                  v-model=\"form.rebootOption\"\n                  name=\"reboot-option\"\n                  data-test-id=\"serverPowerOperations-radio-rebootImmediate\"\n                  value=\"immediate\"\n                >\n                  {{ $t('pageServerPowerOperations.forceRestart') }}\n                  <info-tooltip\n                    :title=\"$t('pageServerPowerOperations.forceRestartInfo')\"\n                  />\n                </b-form-radio>\n              </b-form-group>\n              <b-button\n                variant=\"primary\"\n                type=\"submit\"\n                data-test-id=\"serverPowerOperations-button-reboot\"\n              >\n                {{ $t('pageServerPowerOperations.reboot') }}\n              </b-button>\n            </b-form>\n            <!-- Shutdown server options -->\n            <b-form novalidate @submit.prevent=\"shutdownServer\">\n              <b-form-group\n                :label=\"$t('pageServerPowerOperations.shutdownServer')\"\n              >\n                <b-form-radio\n                  v-model=\"form.shutdownOption\"\n                  name=\"shutdown-option\"\n                  data-test-id=\"serverPowerOperations-radio-shutdownOrderly\"\n                  value=\"orderly\"\n                >\n                  {{ $t('pageServerPowerOperations.gracefulShutdown') }}\n                  <info-tooltip\n                    :title=\"\n                      $t('pageServerPowerOperations.gracefulShutdownInfo')\n                    \"\n                  />\n                </b-form-radio>\n                <b-form-radio\n                  v-model=\"form.shutdownOption\"\n                  name=\"shutdown-option\"\n                  data-test-id=\"serverPowerOperations-radio-shutdownImmediate\"\n                  value=\"immediate\"\n                >\n                  {{ $t('pageServerPowerOperations.forceOff') }}\n                  <info-tooltip\n                    :title=\"$t('pageServerPowerOperations.forceOffInfo')\"\n                  />\n                </b-form-radio>\n              </b-form-group>\n              <b-button\n                variant=\"primary\"\n                type=\"submit\"\n                data-test-id=\"serverPowerOperations-button-shutDown\"\n              >\n                {{ $t('pageServerPowerOperations.shutDown') }}\n              </b-button>\n            </b-form>\n          </template>\n        </page-section>\n      </b-col>\n    </b-row>\n  </b-container>\n</template>\n\n<script>\nimport PageTitle from '@/components/Global/PageTitle';\nimport PageSection from '@/components/Global/PageSection';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport BootSettings from './BootSettings';\nimport LoadingBarMixin from '@/components/Mixins/LoadingBarMixin';\nimport Alert from '@/components/Global/Alert';\nimport InfoTooltip from '@/components/Global/InfoTooltip';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  name: 'ServerPowerOperations',\n  components: { PageTitle, PageSection, BootSettings, Alert, InfoTooltip },\n  mixins: [BVToastMixin, LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        rebootOption: 'orderly',\n        shutdownOption: 'orderly',\n      },\n    };\n  },\n  computed: {\n    serverStatus() {\n      return this.$store.getters['global/serverStatus'];\n    },\n    isOperationInProgress() {\n      return this.$store.getters['controls/isOperationInProgress'];\n    },\n    lastPowerOperationTime() {\n      return this.$store.getters['controls/lastPowerOperationTime'];\n    },\n    oneTimeBootEnabled() {\n      return this.$store.getters['serverBootSettings/overrideEnabled'];\n    },\n    hasBootSourceOptions() {\n      let bootOptions =\n        this.$store.getters['serverBootSettings/bootSourceOptions'];\n      return bootOptions.length !== 0;\n    },\n  },\n  created() {\n    this.startLoader();\n    const bootSettingsPromise = new Promise((resolve) => {\n      this.$root.$on('server-power-operations-boot-settings-complete', () =>\n        resolve(),\n      );\n    });\n    Promise.all([\n      this.$store.dispatch('serverBootSettings/getBootSettings'),\n      this.$store.dispatch('controls/getLastPowerOperationTime'),\n      bootSettingsPromise,\n    ]).finally(() => this.endLoader());\n  },\n  methods: {\n    powerOn() {\n      this.$store.dispatch('controls/serverPowerOn');\n    },\n    rebootServer() {\n      const modalMessage = i18n.global.t(\n        'pageServerPowerOperations.modal.confirmRebootMessage',\n      );\n      const modalOptions = {\n        title: i18n.global.t(\n          'pageServerPowerOperations.modal.confirmRebootTitle',\n        ),\n        okTitle: i18n.global.t('global.action.confirm'),\n        cancelTitle: i18n.global.t('global.action.cancel'),\n        autoFocusButton: 'ok',\n      };\n\n      if (this.form.rebootOption === 'orderly') {\n        this.$bvModal\n          .msgBoxConfirm(modalMessage, modalOptions)\n          .then((confirmed) => {\n            if (confirmed) this.$store.dispatch('controls/serverSoftReboot');\n          });\n      } else if (this.form.rebootOption === 'immediate') {\n        this.$bvModal\n          .msgBoxConfirm(modalMessage, modalOptions)\n          .then((confirmed) => {\n            if (confirmed) this.$store.dispatch('controls/serverHardReboot');\n          });\n      }\n    },\n    shutdownServer() {\n      const modalMessage = i18n.global.t(\n        'pageServerPowerOperations.modal.confirmShutdownMessage',\n      );\n      const modalOptions = {\n        title: i18n.global.t(\n          'pageServerPowerOperations.modal.confirmShutdownTitle',\n        ),\n        okTitle: i18n.global.t('global.action.confirm'),\n        cancelTitle: i18n.global.t('global.action.cancel'),\n        autoFocusButton: 'ok',\n      };\n\n      if (this.form.shutdownOption === 'orderly') {\n        this.$bvModal\n          .msgBoxConfirm(modalMessage, modalOptions)\n          .then((confirmed) => {\n            if (confirmed) this.$store.dispatch('controls/serverSoftPowerOff');\n          });\n      }\n      if (this.form.shutdownOption === 'immediate') {\n        this.$bvModal\n          .msgBoxConfirm(modalMessage, modalOptions)\n          .then((confirmed) => {\n            if (confirmed) this.$store.dispatch('controls/serverHardPowerOff');\n          });\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}