{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api, { getResponseCount } from '@/store/api';\nimport i18n from '@/i18n';\nconst SessionsStore = {\n  namespaced: true,\n  state: {\n    allConnections: []\n  },\n  getters: {\n    allConnections: state => state.allConnections\n  },\n  mutations: {\n    setAllConnections: (state, allConnections) => state.allConnections = allConnections\n  },\n  actions: {\n    async getSessionsData({\n      commit\n    }) {\n      return await api.get('/redfish/v1/SessionService/Sessions').then(response => response.data.Members.map(sessionLogs => sessionLogs['@odata.id'])).then(sessionUris => api.all(sessionUris.map(sessionUri => api.get(sessionUri)))).then(sessionUris => {\n        const allConnectionsData = sessionUris.map(sessionUri => {\n          return {\n            sessionID: sessionUri.data?.Id,\n            context: sessionUri.data?.Context ? sessionUri.data?.Context : '-',\n            username: sessionUri.data?.UserName,\n            ipAddress: sessionUri.data?.ClientOriginIPAddress,\n            uri: sessionUri.data['@odata.id']\n          };\n        });\n        commit('setAllConnections', allConnectionsData);\n      }).catch(error => {\n        console.log('Client Session Data:', error);\n      });\n    },\n    async disconnectSessions({\n      dispatch\n    }, uris = []) {\n      const promises = uris.map(uri => api.delete(uri).catch(error => {\n        console.log(error);\n        return error;\n      }));\n      return await api.all(promises).then(response => {\n        dispatch('getSessionsData');\n        return response;\n      }).then(api.spread((...responses) => {\n        const {\n          successCount,\n          errorCount\n        } = getResponseCount(responses);\n        const toastMessages = [];\n        if (successCount) {\n          const message = i18n.global.t('pageSessions.toast.successDelete', successCount);\n          toastMessages.push({\n            type: 'success',\n            message\n          });\n        }\n        if (errorCount) {\n          const message = i18n.global.t('pageSessions.toast.errorDelete', errorCount);\n          toastMessages.push({\n            type: 'error',\n            message\n          });\n        }\n        return toastMessages;\n      }));\n    }\n  }\n};\nexport default SessionsStore;","map":{"version":3,"names":["api","getResponseCount","i18n","SessionsStore","namespaced","state","allConnections","getters","mutations","setAllConnections","actions","getSessionsData","commit","get","then","response","data","Members","map","sessionLogs","sessionUris","all","sessionUri","allConnectionsData","sessionID","Id","context","Context","username","UserName","ipAddress","ClientOriginIPAddress","uri","catch","error","console","log","disconnectSessions","dispatch","uris","promises","delete","spread","responses","successCount","errorCount","toastMessages","message","global","t","push","type"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/SecurityAndAccess/SessionsStore.js"],"sourcesContent":["import api, { getResponseCount } from '@/store/api';\nimport i18n from '@/i18n';\n\nconst SessionsStore = {\n  namespaced: true,\n  state: {\n    allConnections: [],\n  },\n  getters: {\n    allConnections: (state) => state.allConnections,\n  },\n  mutations: {\n    setAllConnections: (state, allConnections) =>\n      (state.allConnections = allConnections),\n  },\n  actions: {\n    async getSessionsData({ commit }) {\n      return await api\n        .get('/redfish/v1/SessionService/Sessions')\n        .then((response) =>\n          response.data.Members.map((sessionLogs) => sessionLogs['@odata.id']),\n        )\n        .then((sessionUris) =>\n          api.all(sessionUris.map((sessionUri) => api.get(sessionUri))),\n        )\n        .then((sessionUris) => {\n          const allConnectionsData = sessionUris.map((sessionUri) => {\n            return {\n              sessionID: sessionUri.data?.Id,\n              context: sessionUri.data?.Context\n                ? sessionUri.data?.Context\n                : '-',\n              username: sessionUri.data?.UserName,\n              ipAddress: sessionUri.data?.ClientOriginIPAddress,\n              uri: sessionUri.data['@odata.id'],\n            };\n          });\n          commit('setAllConnections', allConnectionsData);\n        })\n        .catch((error) => {\n          console.log('Client Session Data:', error);\n        });\n    },\n    async disconnectSessions({ dispatch }, uris = []) {\n      const promises = uris.map((uri) =>\n        api.delete(uri).catch((error) => {\n          console.log(error);\n          return error;\n        }),\n      );\n      return await api\n        .all(promises)\n        .then((response) => {\n          dispatch('getSessionsData');\n          return response;\n        })\n        .then(\n          api.spread((...responses) => {\n            const { successCount, errorCount } = getResponseCount(responses);\n            const toastMessages = [];\n\n            if (successCount) {\n              const message = i18n.global.t(\n                'pageSessions.toast.successDelete',\n                successCount,\n              );\n              toastMessages.push({ type: 'success', message });\n            }\n\n            if (errorCount) {\n              const message = i18n.global.t(\n                'pageSessions.toast.errorDelete',\n                errorCount,\n              );\n              toastMessages.push({ type: 'error', message });\n            }\n            return toastMessages;\n          }),\n        );\n    },\n  },\n};\nexport default SessionsStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}