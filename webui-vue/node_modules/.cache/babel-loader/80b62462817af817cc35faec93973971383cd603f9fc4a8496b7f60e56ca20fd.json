{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst PowerPolicyStore = {\n  namespaced: true,\n  state: {\n    powerRestoreCurrentPolicy: null,\n    powerRestorePolicies: []\n  },\n  getters: {\n    powerRestoreCurrentPolicy: state => state.powerRestoreCurrentPolicy,\n    powerRestorePolicies: state => state.powerRestorePolicies\n  },\n  mutations: {\n    setPowerRestoreCurrentPolicy: (state, powerRestoreCurrentPolicy) => state.powerRestoreCurrentPolicy = powerRestoreCurrentPolicy,\n    setPowerRestorePolicies: (state, powerRestorePolicies) => state.powerRestorePolicies = powerRestorePolicies\n  },\n  actions: {\n    async getPowerRestorePolicies({\n      commit\n    }) {\n      return await api.get('/redfish/v1/JsonSchemas/ComputerSystem').then(async response => {\n        if (response.data?.Location.length > 0 && response.data?.Location[0].Uri) {\n          return await api.get(response.data?.Location[0].Uri).then(({\n            data: {\n              definitions: {\n                PowerRestorePolicyTypes = {}\n              }\n            }\n          }) => {\n            let powerPoliciesData = PowerRestorePolicyTypes.enum.map(powerState => {\n              let desc = `${i18n.global.t(`pagePowerRestorePolicy.policies.${powerState}`)} - ${PowerRestorePolicyTypes.enumDescriptions[powerState]}`;\n              return {\n                state: powerState,\n                desc\n              };\n            });\n            commit('setPowerRestorePolicies', powerPoliciesData);\n          });\n        }\n      });\n    },\n    async getPowerRestoreCurrentPolicy({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getSystemPath')}`).then(({\n        data: {\n          PowerRestorePolicy\n        }\n      }) => {\n        commit('setPowerRestoreCurrentPolicy', PowerRestorePolicy);\n      }).catch(error => console.log(error));\n    },\n    async setPowerRestorePolicy({\n      dispatch\n    }, powerPolicy) {\n      const data = {\n        PowerRestorePolicy: powerPolicy\n      };\n      return await api.patch(`${await this.dispatch('global/getSystemPath')}`, data).then(() => {\n        dispatch('getPowerRestoreCurrentPolicy');\n        return i18n.global.t('pagePowerRestorePolicy.toast.successSaveSettings');\n      }).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pagePowerRestorePolicy.toast.errorSaveSettings'));\n      });\n    }\n  }\n};\nexport default PowerPolicyStore;","map":{"version":3,"names":["api","i18n","PowerPolicyStore","namespaced","state","powerRestoreCurrentPolicy","powerRestorePolicies","getters","mutations","setPowerRestoreCurrentPolicy","setPowerRestorePolicies","actions","getPowerRestorePolicies","commit","get","then","response","data","Location","length","Uri","definitions","PowerRestorePolicyTypes","powerPoliciesData","enum","map","powerState","desc","global","t","enumDescriptions","getPowerRestoreCurrentPolicy","dispatch","PowerRestorePolicy","catch","error","console","log","setPowerRestorePolicy","powerPolicy","patch","Error"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/Settings/PowerPolicyStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst PowerPolicyStore = {\n  namespaced: true,\n  state: {\n    powerRestoreCurrentPolicy: null,\n    powerRestorePolicies: [],\n  },\n  getters: {\n    powerRestoreCurrentPolicy: (state) => state.powerRestoreCurrentPolicy,\n    powerRestorePolicies: (state) => state.powerRestorePolicies,\n  },\n  mutations: {\n    setPowerRestoreCurrentPolicy: (state, powerRestoreCurrentPolicy) =>\n      (state.powerRestoreCurrentPolicy = powerRestoreCurrentPolicy),\n    setPowerRestorePolicies: (state, powerRestorePolicies) =>\n      (state.powerRestorePolicies = powerRestorePolicies),\n  },\n  actions: {\n    async getPowerRestorePolicies({ commit }) {\n      return await api\n        .get('/redfish/v1/JsonSchemas/ComputerSystem')\n        .then(async (response) => {\n          if (\n            response.data?.Location.length > 0 &&\n            response.data?.Location[0].Uri\n          ) {\n            return await api.get(response.data?.Location[0].Uri).then(\n              ({\n                data: {\n                  definitions: { PowerRestorePolicyTypes = {} },\n                },\n              }) => {\n                let powerPoliciesData = PowerRestorePolicyTypes.enum.map(\n                  (powerState) => {\n                    let desc = `${i18n.global.t(\n                      `pagePowerRestorePolicy.policies.${powerState}`,\n                    )} - ${\n                      PowerRestorePolicyTypes.enumDescriptions[powerState]\n                    }`;\n                    return {\n                      state: powerState,\n                      desc,\n                    };\n                  },\n                );\n                commit('setPowerRestorePolicies', powerPoliciesData);\n              },\n            );\n          }\n        });\n    },\n    async getPowerRestoreCurrentPolicy({ commit }) {\n      return await api\n        .get(`${await this.dispatch('global/getSystemPath')}`)\n        .then(({ data: { PowerRestorePolicy } }) => {\n          commit('setPowerRestoreCurrentPolicy', PowerRestorePolicy);\n        })\n        .catch((error) => console.log(error));\n    },\n    async setPowerRestorePolicy({ dispatch }, powerPolicy) {\n      const data = { PowerRestorePolicy: powerPolicy };\n\n      return await api\n        .patch(`${await this.dispatch('global/getSystemPath')}`, data)\n        .then(() => {\n          dispatch('getPowerRestoreCurrentPolicy');\n          return i18n.global.t(\n            'pagePowerRestorePolicy.toast.successSaveSettings',\n          );\n        })\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pagePowerRestorePolicy.toast.errorSaveSettings'),\n          );\n        });\n    },\n  },\n};\n\nexport default PowerPolicyStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}