{"ast":null,"code":"import BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport PageSection from '@/components/Global/PageSection';\nimport IconChevron from '@carbon/icons-vue/es/chevron--down/20';\nimport StatusIcon from '@/components/Global/StatusIcon';\nimport TableRowExpandMixin, { expandRowLabel } from '@/components/Mixins/TableRowExpandMixin';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  components: {\n    IconChevron,\n    PageSection,\n    StatusIcon\n  },\n  mixins: [BVToastMixin, TableRowExpandMixin, DataFormatterMixin],\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      fields: [{\n        key: 'expandRow',\n        label: '',\n        tdClass: 'table-row-expand'\n      }, {\n        key: 'id',\n        label: i18n.global.t('pageInventory.table.id'),\n        formatter: this.dataFormatter\n      }, {\n        key: 'hardwareType',\n        label: i18n.global.t('pageInventory.table.hardwareType'),\n        formatter: this.dataFormatter,\n        tdClass: 'text-nowrap'\n      }, {\n        key: 'health',\n        label: i18n.global.t('pageInventory.table.health'),\n        formatter: this.dataFormatter,\n        tdClass: 'text-nowrap'\n      }, {\n        key: 'locationNumber',\n        label: i18n.global.t('pageInventory.table.locationNumber'),\n        formatter: this.dataFormatter\n      }, {\n        key: 'locationIndicatorActive',\n        label: i18n.global.t('pageInventory.table.identifyLed'),\n        formatter: this.dataFormatter\n      }],\n      expandRowLabel: expandRowLabel\n    };\n  },\n  computed: {\n    systems() {\n      return this.$store.getters['system/systems'];\n    }\n  },\n  created() {\n    this.$store.dispatch('system/getSystem').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('hardware-status-system-complete');\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    toggleIdentifyLedSwitch(state) {\n      this.$store.dispatch('system/changeIdentifyLedState', state).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message));\n    }\n  }\n};","map":{"version":3,"names":["BVToastMixin","PageSection","IconChevron","StatusIcon","TableRowExpandMixin","expandRowLabel","DataFormatterMixin","useI18n","i18n","components","mixins","data","$t","t","isBusy","fields","key","label","tdClass","global","formatter","dataFormatter","computed","systems","$store","getters","created","dispatch","finally","$root","$emit","methods","toggleIdentifyLedSwitch","state","then","message","successToast","catch","errorToast"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/HardwareStatus/Inventory/InventoryTableSystem.vue"],"sourcesContent":["<template>\n  <page-section :section-title=\"$t('pageInventory.system')\">\n    <b-table\n      responsive=\"md\"\n      hover\n      show-empty\n      :items=\"systems\"\n      :fields=\"fields\"\n      :empty-text=\"$t('global.table.emptyMessage')\"\n      :busy=\"isBusy\"\n    >\n      <!-- Expand chevron icon -->\n      <template #cell(expandRow)=\"row\">\n        <b-button\n          variant=\"link\"\n          data-test-id=\"hardwareStatus-button-expandSystem\"\n          :title=\"expandRowLabel\"\n          class=\"btn-icon-only\"\n          @click=\"toggleRowDetails(row)\"\n        >\n          <icon-chevron />\n          <span class=\"sr-only\">{{ expandRowLabel }}</span>\n        </b-button>\n      </template>\n\n      <!-- Health -->\n      <template #cell(health)=\"{ value }\">\n        <status-icon :status=\"statusIcon(value)\" />\n        {{ value }}\n      </template>\n\n      <template #cell(locationIndicatorActive)=\"{ item }\">\n        <b-form-checkbox\n          id=\"identifyLedSwitchSystem\"\n          v-model=\"item.locationIndicatorActive\"\n          data-test-id=\"inventorySystem-toggle-identifyLed\"\n          switch\n          @change=\"toggleIdentifyLedSwitch\"\n        >\n          <span v-if=\"item.locationIndicatorActive\">\n            {{ $t('global.status.on') }}\n          </span>\n          <span v-else>{{ $t('global.status.off') }}</span>\n        </b-form-checkbox>\n      </template>\n\n      <template #row-details=\"{ item }\">\n        <b-container fluid>\n          <b-row>\n            <b-col class=\"mt-2\" sm=\"6\">\n              <dl>\n                <!-- Serial number -->\n                <dt>{{ $t('pageInventory.table.serialNumber') }}:</dt>\n                <dd>{{ dataFormatter(item.serialNumber) }}</dd>\n                <!-- Model -->\n                <dt>{{ $t('pageInventory.table.model') }}:</dt>\n                <dd>{{ dataFormatter(item.model) }}</dd>\n                <!-- Asset tag -->\n                <dt>{{ $t('pageInventory.table.assetTag') }}:</dt>\n                <dd class=\"mb-2\">\n                  {{ dataFormatter(item.assetTag) }}\n                </dd>\n              </dl>\n            </b-col>\n            <b-col class=\"mt-2\" sm=\"6\">\n              <dl>\n                <!-- Status state -->\n                <dt>{{ $t('pageInventory.table.statusState') }}:</dt>\n                <dd>{{ dataFormatter(item.statusState) }}</dd>\n                <!-- Power state -->\n                <dt>{{ $t('pageInventory.table.power') }}:</dt>\n                <dd>{{ dataFormatter(item.powerState) }}</dd>\n                <!-- Health rollup -->\n                <dt>{{ $t('pageInventory.table.healthRollup') }}:</dt>\n                <dd>{{ dataFormatter(item.healthRollup) }}</dd>\n              </dl>\n            </b-col>\n          </b-row>\n          <div class=\"section-divider mb-3 mt-3\"></div>\n          <b-row>\n            <b-col class=\"mt-1\" sm=\"6\">\n              <dl>\n                <!-- Manufacturer -->\n                <dt>{{ $t('pageInventory.table.manufacturer') }}:</dt>\n                <dd>{{ dataFormatter(item.manufacturer) }}</dd>\n                <!-- Description -->\n                <dt>{{ $t('pageInventory.table.description') }}:</dt>\n                <dd>{{ dataFormatter(item.description) }}</dd>\n                <!-- Sub Model -->\n                <dt>{{ $t('pageInventory.table.subModel') }}:</dt>\n                <dd>\n                  {{ dataFormatter(item.subModel) }}\n                </dd>\n                <!-- System Type -->\n                <dt>{{ $t('pageInventory.table.systemType') }}:</dt>\n                <dd>\n                  {{ dataFormatter(item.systemType) }}\n                </dd>\n              </dl>\n            </b-col>\n            <b-col sm=\"6\">\n              <!-- Memory Summary -->\n              <p class=\"mt-1 mb-2 h6 float-none m-0\">\n                {{ $t('pageInventory.table.memorySummary') }}\n              </p>\n              <dl class=\"ml-4\">\n                <!-- Total system memory -->\n                <dt>{{ $t('pageInventory.table.totalSystemMemoryGiB') }}:</dt>\n                <dd>\n                  {{ dataFormatter(item.totalSystemMemoryGiB) }}\n                  {{ $t('unit.GiB') }}\n                </dd>\n              </dl>\n              <!-- Processor Summary -->\n              <p class=\"mt-1 mb-2 h6 float-none m-0\">\n                {{ $t('pageInventory.table.processorSummary') }}\n              </p>\n              <dl class=\"ml-4\">\n                <!-- Count -->\n                <dt>{{ $t('pageInventory.table.count') }}:</dt>\n                <dd>{{ dataFormatter(item.processorSummaryCount) }}</dd>\n                <!-- Core Count -->\n                <dt>{{ $t('pageInventory.table.coreCount') }}:</dt>\n                <dd>{{ dataFormatter(item.processorSummaryCoreCount) }}</dd>\n              </dl>\n              <!-- Serial console -->\n              <p class=\"mt-1 mb-2 h6 float-none m-0\">\n                {{ $t('pageInventory.table.serialConsole') }}\n              </p>\n              <dl class=\"ml-4\">\n                <dt>{{ $t('pageInventory.table.maxConcurrentSessions') }}:</dt>\n                <dd>{{ dataFormatter(item.serialConsoleMaxSessions) }}</dd>\n                <dt>{{ $t('pageInventory.table.serviceEnabled') }}:</dt>\n                <dd>{{ dataFormatter(item.serialConsoleEnabled) }}</dd>\n              </dl>\n            </b-col>\n          </b-row>\n        </b-container>\n      </template>\n    </b-table>\n  </page-section>\n</template>\n\n<script>\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport PageSection from '@/components/Global/PageSection';\nimport IconChevron from '@carbon/icons-vue/es/chevron--down/20';\n\nimport StatusIcon from '@/components/Global/StatusIcon';\n\nimport TableRowExpandMixin, {\n  expandRowLabel,\n} from '@/components/Mixins/TableRowExpandMixin';\nimport DataFormatterMixin from '@/components/Mixins/DataFormatterMixin';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  components: { IconChevron, PageSection, StatusIcon },\n  mixins: [BVToastMixin, TableRowExpandMixin, DataFormatterMixin],\n  data() {\n    return {\n      $t: useI18n().t,\n      isBusy: true,\n      fields: [\n        {\n          key: 'expandRow',\n          label: '',\n          tdClass: 'table-row-expand',\n        },\n        {\n          key: 'id',\n          label: i18n.global.t('pageInventory.table.id'),\n          formatter: this.dataFormatter,\n        },\n        {\n          key: 'hardwareType',\n          label: i18n.global.t('pageInventory.table.hardwareType'),\n          formatter: this.dataFormatter,\n          tdClass: 'text-nowrap',\n        },\n        {\n          key: 'health',\n          label: i18n.global.t('pageInventory.table.health'),\n          formatter: this.dataFormatter,\n          tdClass: 'text-nowrap',\n        },\n        {\n          key: 'locationNumber',\n          label: i18n.global.t('pageInventory.table.locationNumber'),\n          formatter: this.dataFormatter,\n        },\n        {\n          key: 'locationIndicatorActive',\n          label: i18n.global.t('pageInventory.table.identifyLed'),\n          formatter: this.dataFormatter,\n        },\n      ],\n      expandRowLabel: expandRowLabel,\n    };\n  },\n  computed: {\n    systems() {\n      return this.$store.getters['system/systems'];\n    },\n  },\n  created() {\n    this.$store.dispatch('system/getSystem').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('hardware-status-system-complete');\n      this.isBusy = false;\n    });\n  },\n  methods: {\n    toggleIdentifyLedSwitch(state) {\n      this.$store\n        .dispatch('system/changeIdentifyLedState', state)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message));\n    },\n  },\n};\n</script>\n"],"mappings":"AAgJA,OAAOA,YAAW,MAAO,kCAAkC;AAC3D,OAAOC,WAAU,MAAO,iCAAiC;AACzD,OAAOC,WAAU,MAAO,uCAAuC;AAE/D,OAAOC,UAAS,MAAO,gCAAgC;AAEvD,OAAOC,mBAAmB,IACxBC,cAAc,QACT,yCAAyC;AAChD,OAAOC,kBAAiB,MAAO,wCAAwC;AACvE,SAASC,OAAM,QAAS,UAAU;AAClC,OAAOC,IAAG,MAAO,QAAQ;AAEzB,eAAe;EACbC,UAAU,EAAE;IAAEP,WAAW;IAAED,WAAW;IAAEE;EAAW,CAAC;EACpDO,MAAM,EAAE,CAACV,YAAY,EAAEI,mBAAmB,EAAEE,kBAAkB,CAAC;EAC/DK,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,EAAE,EAAEL,OAAO,CAAC,CAAC,CAACM,CAAC;MACfC,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE,CACN;QACEC,GAAG,EAAE,WAAW;QAChBC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE;MACX,CAAC,EACD;QACEF,GAAG,EAAE,IAAI;QACTC,KAAK,EAAET,IAAI,CAACW,MAAM,CAACN,CAAC,CAAC,wBAAwB,CAAC;QAC9CO,SAAS,EAAE,IAAI,CAACC;MAClB,CAAC,EACD;QACEL,GAAG,EAAE,cAAc;QACnBC,KAAK,EAAET,IAAI,CAACW,MAAM,CAACN,CAAC,CAAC,kCAAkC,CAAC;QACxDO,SAAS,EAAE,IAAI,CAACC,aAAa;QAC7BH,OAAO,EAAE;MACX,CAAC,EACD;QACEF,GAAG,EAAE,QAAQ;QACbC,KAAK,EAAET,IAAI,CAACW,MAAM,CAACN,CAAC,CAAC,4BAA4B,CAAC;QAClDO,SAAS,EAAE,IAAI,CAACC,aAAa;QAC7BH,OAAO,EAAE;MACX,CAAC,EACD;QACEF,GAAG,EAAE,gBAAgB;QACrBC,KAAK,EAAET,IAAI,CAACW,MAAM,CAACN,CAAC,CAAC,oCAAoC,CAAC;QAC1DO,SAAS,EAAE,IAAI,CAACC;MAClB,CAAC,EACD;QACEL,GAAG,EAAE,yBAAyB;QAC9BC,KAAK,EAAET,IAAI,CAACW,MAAM,CAACN,CAAC,CAAC,iCAAiC,CAAC;QACvDO,SAAS,EAAE,IAAI,CAACC;MAClB,CAAC,CACF;MACDhB,cAAc,EAAEA;IAClB,CAAC;EACH,CAAC;EACDiB,QAAQ,EAAE;IACRC,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAC9C;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,kBAAkB,CAAC,CAACC,OAAO,CAAC,MAAM;MACrD;MACA,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,iCAAiC,CAAC;MACnD,IAAI,CAAChB,MAAK,GAAI,KAAK;IACrB,CAAC,CAAC;EACJ,CAAC;EACDiB,OAAO,EAAE;IACPC,uBAAuBA,CAACC,KAAK,EAAE;MAC7B,IAAI,CAACT,MAAK,CACPG,QAAQ,CAAC,+BAA+B,EAAEM,KAAK,EAC/CC,IAAI,CAAEC,OAAO,IAAK,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC,EAC5CE,KAAK,CAAC,CAAC;QAAEF;MAAQ,CAAC,KAAK,IAAI,CAACG,UAAU,CAACH,OAAO,CAAC,CAAC;IACrD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}