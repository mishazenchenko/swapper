{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconCheckmark from '@carbon/icons-vue/es/checkmark/20';\nimport { required, requiredIf } from '@vuelidate/validators';\nimport { COUNTRY_LIST } from './CsrCountryCodes';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { useI18n } from 'vue-i18n';\nexport default {\n  name: 'ModalGenerateCsr',\n  components: {\n    IconAdd,\n    IconCheckmark\n  },\n  mixins: [BVToastMixin, VuelidateMixin],\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        certificateType: null,\n        country: null,\n        state: null,\n        city: null,\n        companyName: null,\n        companyUnit: null,\n        commonName: null,\n        contactPerson: null,\n        emailAddress: null,\n        alternateName: [],\n        keyPairAlgorithm: null,\n        keyCurveId: null,\n        keyBitLength: null\n      },\n      countryOptions: COUNTRY_LIST.map(country => ({\n        text: country.label,\n        value: country.code\n      })),\n      keyPairAlgorithmOptions: ['EC', 'RSA'],\n      keyCurveIdOptions: ['prime256v1', 'secp521r1', 'secp384r1'],\n      keyBitLengthOptions: [2048],\n      csrString: '',\n      csrStringCopied: false\n    };\n  },\n  computed: {\n    certificateTypes() {\n      return this.$store.getters['certificates/certificateTypes'];\n    },\n    certificateOptions() {\n      return this.certificateTypes.reduce((arr, cert) => {\n        if (cert.type === 'TrustStore Certificate') return arr;\n        arr.push({\n          text: cert.label,\n          value: cert.type\n        });\n        return arr;\n      }, []);\n    }\n  },\n  validations: {\n    form: {\n      certificateType: {\n        required\n      },\n      country: {\n        required\n      },\n      state: {\n        required\n      },\n      city: {\n        required\n      },\n      companyName: {\n        required\n      },\n      companyUnit: {\n        required\n      },\n      commonName: {\n        required\n      },\n      contactPerson: {},\n      emailAddress: {},\n      alternateName: {},\n      keyPairAlgorithm: {\n        required\n      },\n      keyCurveId: {\n        reuired: requiredIf(function (form) {\n          return form.keyPairAlgorithm === 'EC';\n        })\n      },\n      keyBitLength: {\n        reuired: requiredIf(function (form) {\n          return form.keyPairAlgorithm === 'RSA';\n        })\n      }\n    }\n  },\n  methods: {\n    handleSubmit() {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n      this.$store.dispatch('certificates/generateCsr', this.form).then(({\n        data: {\n          CSRString\n        }\n      }) => {\n        this.csrString = CSRString;\n        this.$bvModal.show('csr-string');\n        this.v$.$reset();\n      });\n    },\n    resetForm() {\n      for (let key of Object.keys(this.form)) {\n        if (key === 'alternateName') {\n          this.form[key] = [];\n        } else {\n          this.form[key] = null;\n        }\n      }\n    },\n    onOkGenerateCsrModal(bvModalEvt) {\n      // prevent modal close\n      bvModalEvt.preventDefault();\n      this.handleSubmit();\n    },\n    onHiddenCsrStringModal() {\n      this.csrString = '';\n      this.resetForm();\n    },\n    copyCsrString(bvModalEvt) {\n      // prevent modal close\n      bvModalEvt.preventDefault();\n      navigator.clipboard.writeText(this.csrString).then(() => {\n        // Show copied text for 5 seconds\n        this.csrStringCopied = true;\n        setTimeout(() => {\n          this.csrStringCopied = false;\n        }, 5000 /*5 seconds*/);\n      });\n    }\n  }\n};","map":{"version":3,"names":["IconAdd","IconCheckmark","required","requiredIf","COUNTRY_LIST","BVToastMixin","VuelidateMixin","useVuelidate","useI18n","name","components","mixins","setup","v$","data","$t","t","form","certificateType","country","state","city","companyName","companyUnit","commonName","contactPerson","emailAddress","alternateName","keyPairAlgorithm","keyCurveId","keyBitLength","countryOptions","map","text","label","value","code","keyPairAlgorithmOptions","keyCurveIdOptions","keyBitLengthOptions","csrString","csrStringCopied","computed","certificateTypes","$store","getters","certificateOptions","reduce","arr","cert","type","push","validations","reuired","methods","handleSubmit","$touch","$invalid","dispatch","then","CSRString","$bvModal","show","$reset","resetForm","key","Object","keys","onOkGenerateCsrModal","bvModalEvt","preventDefault","onHiddenCsrStringModal","copyCsrString","navigator","clipboard","writeText","setTimeout"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/SecurityAndAccess/Certificates/ModalGenerateCsr.vue"],"sourcesContent":["<template>\n  <div>\n    <b-modal\n      id=\"generate-csr\"\n      ref=\"modal\"\n      size=\"lg\"\n      no-stacking\n      :title=\"$t('pageCertificates.modal.generateACertificateSigningRequest')\"\n      @ok=\"onOkGenerateCsrModal\"\n      @cancel=\"resetForm\"\n      @hidden=\"v$.$reset()\"\n    >\n      <b-form id=\"generate-csr-form\" novalidate>\n        <b-container fluid>\n          <b-row>\n            <b-col lg=\"9\">\n              <b-row>\n                <b-col lg=\"6\">\n                  <b-form-group\n                    :label=\"$t('pageCertificates.modal.certificateType')\"\n                    label-for=\"certificate-type\"\n                  >\n                    <b-form-select\n                      id=\"certificate-type\"\n                      v-model=\"form.certificateType\"\n                      data-test-id=\"modalGenerateCsr-select-certificateType\"\n                      :options=\"certificateOptions\"\n                      :state=\"getValidationState(v$.form.certificateType)\"\n                      @input=\"v$.form.certificateType.$touch()\"\n                    >\n                      <template #first>\n                        <b-form-select-option :value=\"null\" disabled>\n                          {{ $t('global.form.selectAnOption') }}\n                        </b-form-select-option>\n                      </template>\n                    </b-form-select>\n                    <b-form-invalid-feedback role=\"alert\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n                <b-col lg=\"6\">\n                  <b-form-group\n                    :label=\"$t('pageCertificates.modal.country')\"\n                    label-for=\"country\"\n                  >\n                    <b-form-select\n                      id=\"country\"\n                      v-model=\"form.country\"\n                      data-test-id=\"modalGenerateCsr-select-country\"\n                      :options=\"countryOptions\"\n                      :state=\"getValidationState(v$.form.country)\"\n                      @input=\"v$.form.country.$touch()\"\n                    >\n                      <template #first>\n                        <b-form-select-option :value=\"null\" disabled>\n                          {{ $t('global.form.selectAnOption') }}\n                        </b-form-select-option>\n                      </template>\n                    </b-form-select>\n                    <b-form-invalid-feedback role=\"alert\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n              </b-row>\n              <b-row>\n                <b-col lg=\"6\">\n                  <b-form-group\n                    :label=\"$t('pageCertificates.modal.state')\"\n                    label-for=\"state\"\n                  >\n                    <b-form-input\n                      id=\"state\"\n                      v-model=\"form.state\"\n                      type=\"text\"\n                      data-test-id=\"modalGenerateCsr-input-state\"\n                      :state=\"getValidationState(v$.form.state)\"\n                    />\n                    <b-form-invalid-feedback role=\"alert\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n                <b-col lg=\"6\">\n                  <b-form-group\n                    :label=\"$t('pageCertificates.modal.city')\"\n                    label-for=\"city\"\n                  >\n                    <b-form-input\n                      id=\"city\"\n                      v-model=\"form.city\"\n                      type=\"text\"\n                      data-test-id=\"modalGenerateCsr-input-city\"\n                      :state=\"getValidationState(v$.form.city)\"\n                    />\n                    <b-form-invalid-feedback role=\"alert\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n              </b-row>\n              <b-row>\n                <b-col lg=\"6\">\n                  <b-form-group\n                    :label=\"$t('pageCertificates.modal.companyName')\"\n                    label-for=\"company-name\"\n                  >\n                    <b-form-input\n                      id=\"company-name\"\n                      v-model=\"form.companyName\"\n                      type=\"text\"\n                      data-test-id=\"modalGenerateCsr-input-companyName\"\n                      :state=\"getValidationState(v$.form.companyName)\"\n                    />\n                    <b-form-invalid-feedback role=\"alert\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n                <b-col lg=\"6\">\n                  <b-form-group\n                    :label=\"$t('pageCertificates.modal.companyUnit')\"\n                    label-for=\"company-unit\"\n                  >\n                    <b-form-input\n                      id=\"company-unit\"\n                      v-model=\"form.companyUnit\"\n                      type=\"text\"\n                      data-test-id=\"modalGenerateCsr-input-companyUnit\"\n                      :state=\"getValidationState(v$.form.companyUnit)\"\n                    />\n                    <b-form-invalid-feedback role=\"alert\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n              </b-row>\n              <b-row>\n                <b-col lg=\"6\">\n                  <b-form-group\n                    :label=\"$t('pageCertificates.modal.commonName')\"\n                    label-for=\"common-name\"\n                  >\n                    <b-form-input\n                      id=\"common-name\"\n                      v-model=\"form.commonName\"\n                      type=\"text\"\n                      data-test-id=\"modalGenerateCsr-input-commonName\"\n                      :state=\"getValidationState(v$.form.commonName)\"\n                    />\n                    <b-form-invalid-feedback role=\"alert\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n                <b-col lg=\"6\">\n                  <b-form-group label-for=\"contact-person\">\n                    <template #label>\n                      {{ $t('pageCertificates.modal.contactPerson') }} -\n                      <span class=\"form-text d-inline\">\n                        {{ $t('global.form.optional') }}\n                      </span>\n                    </template>\n                    <b-form-input\n                      id=\"contact-person\"\n                      v-model=\"form.contactPerson\"\n                      type=\"text\"\n                      data-test-id=\"modalGenerateCsr-input-contactPerson\"\n                    />\n                  </b-form-group>\n                </b-col>\n              </b-row>\n              <b-row>\n                <b-col lg=\"6\">\n                  <b-form-group label-for=\"email-address\">\n                    <template #label>\n                      {{ $t('pageCertificates.modal.emailAddress') }} -\n                      <span class=\"form-text d-inline\">\n                        {{ $t('global.form.optional') }}\n                      </span>\n                    </template>\n                    <b-form-input\n                      id=\"email-address\"\n                      v-model=\"form.emailAddress\"\n                      type=\"text\"\n                      data-test-id=\"modalGenerateCsr-input-emailAddress\"\n                    />\n                  </b-form-group>\n                </b-col>\n              </b-row>\n              <b-row>\n                <b-col lg=\"12\">\n                  <b-form-group label-for=\"alternate-name\">\n                    <template #label>\n                      {{ $t('pageCertificates.modal.alternateName') }} -\n                      <span class=\"form-text d-inline\">\n                        {{ $t('global.form.optional') }}\n                      </span>\n                    </template>\n                    <b-form-text id=\"alternate-name-help-block\">\n                      {{ $t('pageCertificates.modal.alternateNameHelperText') }}\n                    </b-form-text>\n                    <b-form-tags\n                      v-model=\"form.alternateName\"\n                      :remove-on-delete=\"true\"\n                      :tag-pills=\"true\"\n                      input-id=\"alternate-name\"\n                      size=\"lg\"\n                      separator=\" \"\n                      :input-attrs=\"{\n                        'aria-describedby': 'alternate-name-help-block',\n                      }\"\n                      :duplicate-tag-text=\"\n                        $t('pageCertificates.modal.duplicateAlternateName')\n                      \"\n                      placeholder=\"\"\n                      data-test-id=\"modalGenerateCsr-input-alternateName\"\n                    >\n                      <template #add-button-text>\n                        <icon-add /> {{ $t('global.action.add') }}\n                      </template>\n                    </b-form-tags>\n                  </b-form-group>\n                </b-col>\n              </b-row>\n            </b-col>\n            <b-col lg=\"3\">\n              <b-row>\n                <b-col lg=\"12\">\n                  <p class=\"col-form-label\">\n                    {{ $t('pageCertificates.modal.privateKey') }}\n                  </p>\n                  <b-form-group\n                    :label=\"$t('pageCertificates.modal.keyPairAlgorithm')\"\n                    label-for=\"key-pair-algorithm\"\n                  >\n                    <b-form-select\n                      id=\"key-pair-algorithm\"\n                      v-model=\"form.keyPairAlgorithm\"\n                      data-test-id=\"modalGenerateCsr-select-keyPairAlgorithm\"\n                      :options=\"keyPairAlgorithmOptions\"\n                      :state=\"getValidationState(v$.form.keyPairAlgorithm)\"\n                      @input=\"v$.form.keyPairAlgorithm.$touch()\"\n                    >\n                      <template #first>\n                        <b-form-select-option :value=\"null\" disabled>\n                          {{ $t('global.form.selectAnOption') }}\n                        </b-form-select-option>\n                      </template>\n                    </b-form-select>\n                    <b-form-invalid-feedback role=\"alert\">\n                      {{ $t('global.form.fieldRequired') }}\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n              </b-row>\n              <b-row>\n                <b-col lg=\"12\">\n                  <template v-if=\"v$.form.keyPairAlgorithm.$model === 'EC'\">\n                    <b-form-group\n                      :label=\"$t('pageCertificates.modal.keyCurveId')\"\n                      label-for=\"key-curve-id\"\n                    >\n                      <b-form-select\n                        id=\"key-curve-id\"\n                        v-model=\"form.keyCurveId\"\n                        data-test-id=\"modalGenerateCsr-select-keyCurveId\"\n                        :options=\"keyCurveIdOptions\"\n                        :state=\"getValidationState(v$.form.keyCurveId)\"\n                        @input=\"v$.form.keyCurveId.$touch()\"\n                      >\n                        <template #first>\n                          <b-form-select-option :value=\"null\" disabled>\n                            {{ $t('global.form.selectAnOption') }}\n                          </b-form-select-option>\n                        </template>\n                      </b-form-select>\n                      <b-form-invalid-feedback role=\"alert\">\n                        {{ $t('global.form.fieldRequired') }}\n                      </b-form-invalid-feedback>\n                    </b-form-group>\n                  </template>\n                  <template v-if=\"v$.form.keyPairAlgorithm.$model === 'RSA'\">\n                    <b-form-group\n                      :label=\"$t('pageCertificates.modal.keyBitLength')\"\n                      label-for=\"key-bit-length\"\n                    >\n                      <b-form-select\n                        id=\"key-bit-length\"\n                        v-model=\"form.keyBitLength\"\n                        data-test-id=\"modalGenerateCsr-select-keyBitLength\"\n                        :options=\"keyBitLengthOptions\"\n                        :state=\"getValidationState(v$.form.keyBitLength)\"\n                        @input=\"v$.form.keyBitLength.$touch()\"\n                      >\n                        <template #first>\n                          <b-form-select-option :value=\"null\" disabled>\n                            {{ $t('global.form.selectAnOption') }}\n                          </b-form-select-option>\n                        </template>\n                      </b-form-select>\n                      <b-form-invalid-feedback role=\"alert\">\n                        {{ $t('global.form.fieldRequired') }}\n                      </b-form-invalid-feedback>\n                    </b-form-group>\n                  </template>\n                </b-col>\n              </b-row>\n            </b-col>\n          </b-row>\n        </b-container>\n      </b-form>\n      <template #modal-footer=\"{ ok, cancel }\">\n        <b-button variant=\"secondary\" @click=\"cancel()\">\n          {{ $t('global.action.cancel') }}\n        </b-button>\n        <b-button\n          form=\"generate-csr-form\"\n          type=\"submit\"\n          variant=\"primary\"\n          data-test-id=\"modalGenerateCsr-button-ok\"\n          @click=\"ok()\"\n        >\n          {{ $t('pageCertificates.generateCsr') }}\n        </b-button>\n      </template>\n    </b-modal>\n    <b-modal\n      id=\"csr-string\"\n      no-stacking\n      size=\"lg\"\n      :title=\"$t('pageCertificates.modal.certificateSigningRequest')\"\n      @hidden=\"onHiddenCsrStringModal\"\n    >\n      {{ csrString }}\n      <template #modal-footer>\n        <b-btn variant=\"secondary\" @click=\"copyCsrString\">\n          <template v-if=\"csrStringCopied\">\n            <icon-checkmark />\n            {{ $t('global.status.copied') }}\n          </template>\n          <template v-else>\n            {{ $t('global.action.copy') }}\n          </template>\n        </b-btn>\n        <a\n          :href=\"\n            `data:application/json;charset=utf-8,` +\n            encodeURIComponent(`${csrString}`)\n          \"\n          download=\"certificate.csr\"\n          class=\"btn btn-primary\"\n        >\n          {{ $t('global.action.download') }}\n        </a>\n      </template>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconCheckmark from '@carbon/icons-vue/es/checkmark/20';\n\nimport { required, requiredIf } from '@vuelidate/validators';\n\nimport { COUNTRY_LIST } from './CsrCountryCodes';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  name: 'ModalGenerateCsr',\n  components: { IconAdd, IconCheckmark },\n  mixins: [BVToastMixin, VuelidateMixin],\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        certificateType: null,\n        country: null,\n        state: null,\n        city: null,\n        companyName: null,\n        companyUnit: null,\n        commonName: null,\n        contactPerson: null,\n        emailAddress: null,\n        alternateName: [],\n        keyPairAlgorithm: null,\n        keyCurveId: null,\n        keyBitLength: null,\n      },\n      countryOptions: COUNTRY_LIST.map((country) => ({\n        text: country.label,\n        value: country.code,\n      })),\n      keyPairAlgorithmOptions: ['EC', 'RSA'],\n      keyCurveIdOptions: ['prime256v1', 'secp521r1', 'secp384r1'],\n      keyBitLengthOptions: [2048],\n      csrString: '',\n      csrStringCopied: false,\n    };\n  },\n  computed: {\n    certificateTypes() {\n      return this.$store.getters['certificates/certificateTypes'];\n    },\n    certificateOptions() {\n      return this.certificateTypes.reduce((arr, cert) => {\n        if (cert.type === 'TrustStore Certificate') return arr;\n        arr.push({\n          text: cert.label,\n          value: cert.type,\n        });\n        return arr;\n      }, []);\n    },\n  },\n  validations: {\n    form: {\n      certificateType: { required },\n      country: { required },\n      state: { required },\n      city: { required },\n      companyName: { required },\n      companyUnit: { required },\n      commonName: { required },\n      contactPerson: {},\n      emailAddress: {},\n      alternateName: {},\n      keyPairAlgorithm: { required },\n      keyCurveId: {\n        reuired: requiredIf(function (form) {\n          return form.keyPairAlgorithm === 'EC';\n        }),\n      },\n      keyBitLength: {\n        reuired: requiredIf(function (form) {\n          return form.keyPairAlgorithm === 'RSA';\n        }),\n      },\n    },\n  },\n  methods: {\n    handleSubmit() {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n      this.$store\n        .dispatch('certificates/generateCsr', this.form)\n        .then(({ data: { CSRString } }) => {\n          this.csrString = CSRString;\n          this.$bvModal.show('csr-string');\n          this.v$.$reset();\n        });\n    },\n    resetForm() {\n      for (let key of Object.keys(this.form)) {\n        if (key === 'alternateName') {\n          this.form[key] = [];\n        } else {\n          this.form[key] = null;\n        }\n      }\n    },\n    onOkGenerateCsrModal(bvModalEvt) {\n      // prevent modal close\n      bvModalEvt.preventDefault();\n      this.handleSubmit();\n    },\n    onHiddenCsrStringModal() {\n      this.csrString = '';\n      this.resetForm();\n    },\n    copyCsrString(bvModalEvt) {\n      // prevent modal close\n      bvModalEvt.preventDefault();\n      navigator.clipboard.writeText(this.csrString).then(() => {\n        // Show copied text for 5 seconds\n        this.csrStringCopied = true;\n        setTimeout(() => {\n          this.csrStringCopied = false;\n        }, 5000 /*5 seconds*/);\n      });\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}