{"ast":null,"code":"const TableFilterMixin = {\n  methods: {\n    getFilteredTableData(tableData = [], filters = []) {\n      const filterItems = filters.reduce((arr, filter) => {\n        return [...arr, ...filter.values];\n      }, []);\n      // If no filters are active, then return all table data\n      if (filterItems.length === 0) return tableData;\n      const selectedValues = {};\n      for (const {\n        key,\n        values\n      } of filters) {\n        if (values.length > 0) {\n          selectedValues[key] = values;\n        }\n      }\n\n      // Check if row property value is included in list of\n      // active filters\n      return tableData.filter(row => {\n        for (const [key, values] of Object.entries(selectedValues)) {\n          const rowProperty = row[key];\n          if (rowProperty && !values.includes(rowProperty)) {\n            return false;\n          }\n        }\n        return true;\n      });\n    },\n    getFilteredTableDataByDate(tableData = [], startDate, endDate, propertyKey = 'date') {\n      if (!startDate && !endDate) return tableData;\n      let startDateInMs = startDate ? startDate.getTime() : 0;\n      let endDateInMs = endDate ? endDate.getTime() : Number.POSITIVE_INFINITY;\n      const isUtcDisplay = this.$store.getters['global/isUtcDisplay'];\n\n      //Offset preference selected\n      if (!isUtcDisplay) {\n        startDateInMs = startDate ? startDate.getTime() + startDate.getTimezoneOffset() * 60000 : 0;\n        endDateInMs = endDate ? endDate.getTime() + endDate.getTimezoneOffset() * 60000 : Number.POSITIVE_INFINITY;\n      }\n      return tableData.filter(row => {\n        const date = row[propertyKey];\n        if (!(date instanceof Date)) return;\n        const dateInMs = date.getTime();\n        if (dateInMs >= startDateInMs && dateInMs <= endDateInMs) return row;\n      });\n    }\n  }\n};\nexport default TableFilterMixin;","map":{"version":3,"names":["TableFilterMixin","methods","getFilteredTableData","tableData","filters","filterItems","reduce","arr","filter","values","length","selectedValues","key","row","Object","entries","rowProperty","includes","getFilteredTableDataByDate","startDate","endDate","propertyKey","startDateInMs","getTime","endDateInMs","Number","POSITIVE_INFINITY","isUtcDisplay","$store","getters","getTimezoneOffset","date","Date","dateInMs"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/components/Mixins/TableFilterMixin.js"],"sourcesContent":["const TableFilterMixin = {\n  methods: {\n    getFilteredTableData(tableData = [], filters = []) {\n      const filterItems = filters.reduce((arr, filter) => {\n        return [...arr, ...filter.values];\n      }, []);\n      // If no filters are active, then return all table data\n      if (filterItems.length === 0) return tableData;\n\n      const selectedValues = {};\n      for (const { key, values } of filters) {\n        if (values.length > 0) {\n          selectedValues[key] = values;\n        }\n      }\n\n      // Check if row property value is included in list of\n      // active filters\n      return tableData.filter((row) => {\n        for (const [key, values] of Object.entries(selectedValues)) {\n          const rowProperty = row[key];\n          if (rowProperty && !values.includes(rowProperty)) {\n            return false;\n          }\n        }\n        return true;\n      });\n    },\n    getFilteredTableDataByDate(\n      tableData = [],\n      startDate,\n      endDate,\n      propertyKey = 'date',\n    ) {\n      if (!startDate && !endDate) return tableData;\n      let startDateInMs = startDate ? startDate.getTime() : 0;\n      let endDateInMs = endDate ? endDate.getTime() : Number.POSITIVE_INFINITY;\n\n      const isUtcDisplay = this.$store.getters['global/isUtcDisplay'];\n\n      //Offset preference selected\n      if (!isUtcDisplay) {\n        startDateInMs = startDate\n          ? startDate.getTime() + startDate.getTimezoneOffset() * 60000\n          : 0;\n        endDateInMs = endDate\n          ? endDate.getTime() + endDate.getTimezoneOffset() * 60000\n          : Number.POSITIVE_INFINITY;\n      }\n\n      return tableData.filter((row) => {\n        const date = row[propertyKey];\n        if (!(date instanceof Date)) return;\n        const dateInMs = date.getTime();\n        if (dateInMs >= startDateInMs && dateInMs <= endDateInMs) return row;\n      });\n    },\n  },\n};\n\nexport default TableFilterMixin;\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG;EACvBC,OAAO,EAAE;IACPC,oBAAoBA,CAACC,SAAS,GAAG,EAAE,EAAEC,OAAO,GAAG,EAAE,EAAE;MACjD,MAAMC,WAAW,GAAGD,OAAO,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;QAClD,OAAO,CAAC,GAAGD,GAAG,EAAE,GAAGC,MAAM,CAACC,MAAM,CAAC;MACnC,CAAC,EAAE,EAAE,CAAC;MACN;MACA,IAAIJ,WAAW,CAACK,MAAM,KAAK,CAAC,EAAE,OAAOP,SAAS;MAE9C,MAAMQ,cAAc,GAAG,CAAC,CAAC;MACzB,KAAK,MAAM;QAAEC,GAAG;QAAEH;MAAO,CAAC,IAAIL,OAAO,EAAE;QACrC,IAAIK,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;UACrBC,cAAc,CAACC,GAAG,CAAC,GAAGH,MAAM;QAC9B;MACF;;MAEA;MACA;MACA,OAAON,SAAS,CAACK,MAAM,CAAEK,GAAG,IAAK;QAC/B,KAAK,MAAM,CAACD,GAAG,EAAEH,MAAM,CAAC,IAAIK,MAAM,CAACC,OAAO,CAACJ,cAAc,CAAC,EAAE;UAC1D,MAAMK,WAAW,GAAGH,GAAG,CAACD,GAAG,CAAC;UAC5B,IAAII,WAAW,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAACD,WAAW,CAAC,EAAE;YAChD,OAAO,KAAK;UACd;QACF;QACA,OAAO,IAAI;MACb,CAAC,CAAC;IACJ,CAAC;IACDE,0BAA0BA,CACxBf,SAAS,GAAG,EAAE,EACdgB,SAAS,EACTC,OAAO,EACPC,WAAW,GAAG,MAAM,EACpB;MACA,IAAI,CAACF,SAAS,IAAI,CAACC,OAAO,EAAE,OAAOjB,SAAS;MAC5C,IAAImB,aAAa,GAAGH,SAAS,GAAGA,SAAS,CAACI,OAAO,CAAC,CAAC,GAAG,CAAC;MACvD,IAAIC,WAAW,GAAGJ,OAAO,GAAGA,OAAO,CAACG,OAAO,CAAC,CAAC,GAAGE,MAAM,CAACC,iBAAiB;MAExE,MAAMC,YAAY,GAAG,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,qBAAqB,CAAC;;MAE/D;MACA,IAAI,CAACF,YAAY,EAAE;QACjBL,aAAa,GAAGH,SAAS,GACrBA,SAAS,CAACI,OAAO,CAAC,CAAC,GAAGJ,SAAS,CAACW,iBAAiB,CAAC,CAAC,GAAG,KAAK,GAC3D,CAAC;QACLN,WAAW,GAAGJ,OAAO,GACjBA,OAAO,CAACG,OAAO,CAAC,CAAC,GAAGH,OAAO,CAACU,iBAAiB,CAAC,CAAC,GAAG,KAAK,GACvDL,MAAM,CAACC,iBAAiB;MAC9B;MAEA,OAAOvB,SAAS,CAACK,MAAM,CAAEK,GAAG,IAAK;QAC/B,MAAMkB,IAAI,GAAGlB,GAAG,CAACQ,WAAW,CAAC;QAC7B,IAAI,EAAEU,IAAI,YAAYC,IAAI,CAAC,EAAE;QAC7B,MAAMC,QAAQ,GAAGF,IAAI,CAACR,OAAO,CAAC,CAAC;QAC/B,IAAIU,QAAQ,IAAIX,aAAa,IAAIW,QAAQ,IAAIT,WAAW,EAAE,OAAOX,GAAG;MACtE,CAAC,CAAC;IACJ;EACF;AACF,CAAC;AAED,eAAeb,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}