{"ast":null,"code":"import BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconEdit from '@carbon/icons-vue/es/edit/20';\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport PageSection from '@/components/Global/PageSection';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\nexport default {\n  name: 'DNSTable',\n  components: {\n    IconAdd,\n    IconEdit,\n    IconTrashcan,\n    PageSection,\n    TableRowAction\n  },\n  mixins: [BVToastMixin],\n  props: {\n    tabIndex: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        dnsStaticTableItems: []\n      },\n      actions: [{\n        value: 'edit',\n        title: 'global.action.edit'\n      }, {\n        value: 'delete',\n        title: 'global.action.delete'\n      }],\n      dnsTableFields: [{\n        key: 'address',\n        label: i18n.global.t('pageNetwork.table.ipAddress')\n      }, {\n        key: 'actions',\n        label: '',\n        tdClass: 'text-right'\n      }]\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData'])\n  },\n  watch: {\n    // Watch for change in tab index\n    tabIndex() {\n      this.getStaticDnsItems();\n    },\n    ethernetData() {\n      this.getStaticDnsItems();\n    }\n  },\n  created() {\n    this.getStaticDnsItems();\n    this.$store.dispatch('network/getEthernetData').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('network-table-dns-complete');\n    });\n  },\n  methods: {\n    getStaticDnsItems() {\n      const index = this.tabIndex;\n      const dns = this.ethernetData[index].StaticNameServers || [];\n      this.form.dnsStaticTableItems = dns.map(server => {\n        return {\n          address: server,\n          actions: [{\n            value: 'delete',\n            title: 'pageNetwork.table.deleteDns'\n          }]\n        };\n      });\n    },\n    onDnsTableAction(action, $event, index) {\n      if ($event === 'delete') {\n        this.deleteDnsTableRow(index);\n      }\n    },\n    deleteDnsTableRow(index) {\n      this.form.dnsStaticTableItems.splice(index, 1);\n      const newDnsArray = this.form.dnsStaticTableItems.map(dns => {\n        return dns.address;\n      });\n      this.$store.dispatch('network/editDnsAddress', newDnsArray).then(message => this.successToast(message)).catch(({\n        message\n      }) => this.errorToast(message));\n    },\n    initDnsModal() {\n      this.$bvModal.show('modal-dns');\n    }\n  }\n};","map":{"version":3,"names":["BVToastMixin","IconAdd","IconEdit","IconTrashcan","PageSection","TableRowAction","mapState","useI18n","i18n","name","components","mixins","props","tabIndex","type","Number","default","data","$t","t","form","dnsStaticTableItems","actions","value","title","dnsTableFields","key","label","global","tdClass","computed","watch","getStaticDnsItems","ethernetData","created","$store","dispatch","finally","$root","$emit","methods","index","dns","StaticNameServers","map","server","address","onDnsTableAction","action","$event","deleteDnsTableRow","splice","newDnsArray","then","message","successToast","catch","errorToast","initDnsModal","$bvModal","show"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Settings/Network/TableDns.vue"],"sourcesContent":["<template>\n  <page-section :section-title=\"$t('pageNetwork.staticDns')\">\n    <b-row>\n      <b-col lg=\"6\">\n        <div class=\"text-right\">\n          <b-button variant=\"primary\" @click=\"initDnsModal()\">\n            <icon-add />\n            {{ $t('pageNetwork.table.addDnsAddress') }}\n          </b-button>\n        </div>\n        <b-table\n          responsive=\"md\"\n          hover\n          :fields=\"dnsTableFields\"\n          :items=\"form.dnsStaticTableItems\"\n          :empty-text=\"$t('global.table.emptyMessage')\"\n          class=\"mb-0\"\n          show-empty\n        >\n          <template #cell(actions)=\"{ item, index }\">\n            <table-row-action\n              v-for=\"(action, actionIndex) in item.actions\"\n              :key=\"actionIndex\"\n              :value=\"action.value\"\n              :title=\"action.title\"\n              :enabled=\"action.enabled\"\n              @click-table-action=\"onDnsTableAction(action, $event, index)\"\n            >\n              <template #icon>\n                <icon-edit v-if=\"action.value === 'edit'\" />\n                <icon-trashcan v-if=\"action.value === 'delete'\" />\n              </template>\n            </table-row-action>\n          </template>\n        </b-table>\n      </b-col>\n    </b-row>\n  </page-section>\n</template>\n\n<script>\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport IconAdd from '@carbon/icons-vue/es/add--alt/20';\nimport IconEdit from '@carbon/icons-vue/es/edit/20';\nimport IconTrashcan from '@carbon/icons-vue/es/trash-can/20';\nimport PageSection from '@/components/Global/PageSection';\nimport TableRowAction from '@/components/Global/TableRowAction';\nimport { mapState } from 'vuex';\nimport { useI18n } from 'vue-i18n';\nimport i18n from '@/i18n';\n\nexport default {\n  name: 'DNSTable',\n  components: {\n    IconAdd,\n    IconEdit,\n    IconTrashcan,\n    PageSection,\n    TableRowAction,\n  },\n  mixins: [BVToastMixin],\n  props: {\n    tabIndex: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        dnsStaticTableItems: [],\n      },\n      actions: [\n        {\n          value: 'edit',\n          title: 'global.action.edit',\n        },\n        {\n          value: 'delete',\n          title: 'global.action.delete',\n        },\n      ],\n      dnsTableFields: [\n        {\n          key: 'address',\n          label: i18n.global.t('pageNetwork.table.ipAddress'),\n        },\n        { key: 'actions', label: '', tdClass: 'text-right' },\n      ],\n    };\n  },\n  computed: {\n    ...mapState('network', ['ethernetData']),\n  },\n  watch: {\n    // Watch for change in tab index\n    tabIndex() {\n      this.getStaticDnsItems();\n    },\n    ethernetData() {\n      this.getStaticDnsItems();\n    },\n  },\n  created() {\n    this.getStaticDnsItems();\n    this.$store.dispatch('network/getEthernetData').finally(() => {\n      // Emit initial data fetch complete to parent component\n      this.$root.$emit('network-table-dns-complete');\n    });\n  },\n  methods: {\n    getStaticDnsItems() {\n      const index = this.tabIndex;\n      const dns = this.ethernetData[index].StaticNameServers || [];\n      this.form.dnsStaticTableItems = dns.map((server) => {\n        return {\n          address: server,\n          actions: [\n            {\n              value: 'delete',\n              title: 'pageNetwork.table.deleteDns',\n            },\n          ],\n        };\n      });\n    },\n    onDnsTableAction(action, $event, index) {\n      if ($event === 'delete') {\n        this.deleteDnsTableRow(index);\n      }\n    },\n    deleteDnsTableRow(index) {\n      this.form.dnsStaticTableItems.splice(index, 1);\n      const newDnsArray = this.form.dnsStaticTableItems.map((dns) => {\n        return dns.address;\n      });\n      this.$store\n        .dispatch('network/editDnsAddress', newDnsArray)\n        .then((message) => this.successToast(message))\n        .catch(({ message }) => this.errorToast(message));\n    },\n    initDnsModal() {\n      this.$bvModal.show('modal-dns');\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}