{"ast":null,"code":"import api from '@/store/api';\nconst HOST_STATE = {\n  on: 'xyz.openbmc_project.State.Host.HostState.Running',\n  off: 'xyz.openbmc_project.State.Host.HostState.Off',\n  error: 'xyz.openbmc_project.State.Host.HostState.Quiesced',\n  diagnosticMode: 'xyz.openbmc_project.State.Host.HostState.DiagnosticMode'\n};\nconst serverStateMapper = hostState => {\n  switch (hostState) {\n    case HOST_STATE.on:\n    case 'On':\n      // Redfish PowerState\n      return 'on';\n    case HOST_STATE.off:\n    case 'Off':\n      // Redfish PowerState\n      return 'off';\n    case HOST_STATE.error:\n    case 'Quiesced':\n      // Redfish Status\n      return 'error';\n    case HOST_STATE.diagnosticMode:\n    case 'InTest':\n      // Redfish Status\n      return 'diagnosticMode';\n    default:\n      return 'unreachable';\n  }\n};\nconst GlobalStore = {\n  namespaced: true,\n  state: {\n    assetTag: null,\n    bmcTime: null,\n    modelType: null,\n    serialNumber: null,\n    serverStatus: 'unreachable',\n    languagePreference: localStorage.getItem('storedLanguage') || 'en-US',\n    isUtcDisplay: localStorage.getItem('storedUtcDisplay') ? JSON.parse(localStorage.getItem('storedUtcDisplay')) : true,\n    username: localStorage.getItem('storedUsername'),\n    isAuthorized: true,\n    userPrivilege: null\n  },\n  getters: {\n    assetTag: state => state.assetTag,\n    modelType: state => state.modelType,\n    serialNumber: state => state.serialNumber,\n    serverStatus: state => state.serverStatus,\n    bmcTime: state => state.bmcTime,\n    languagePreference: state => state.languagePreference,\n    isUtcDisplay: state => state.isUtcDisplay,\n    username: state => state.username,\n    isAuthorized: state => state.isAuthorized,\n    userPrivilege: state => state.userPrivilege\n  },\n  mutations: {\n    setAssetTag: (state, assetTag) => state.assetTag = assetTag,\n    setModelType: (state, modelType) => state.modelType = modelType,\n    setSerialNumber: (state, serialNumber) => state.serialNumber = serialNumber,\n    setBmcTime: (state, bmcTime) => state.bmcTime = bmcTime,\n    setServerStatus: (state, serverState) => state.serverStatus = serverStateMapper(serverState),\n    setLanguagePreference: (state, language) => state.languagePreference = language,\n    setUsername: (state, username) => state.username = username,\n    setUtcTime: (state, isUtcDisplay) => state.isUtcDisplay = isUtcDisplay,\n    setUnauthorized: state => {\n      state.isAuthorized = false;\n      window.setTimeout(() => {\n        state.isAuthorized = true;\n      }, 100);\n    },\n    setPrivilege: (state, privilege) => {\n      state.userPrivilege = privilege;\n    }\n  },\n  actions: {\n    async getBmcPath() {\n      const serviceRoot = await api.get('/redfish/v1').catch(error => console.log(error));\n      let bmcPath = serviceRoot?.data?.ManagerProvidingService?.['@odata.id'];\n      if (!bmcPath) {\n        const managers = await api.get('/redfish/v1/Managers').catch(error => console.log(error));\n        bmcPath = managers.data?.Members?.[0]?.['@odata.id'];\n      }\n      return bmcPath;\n    },\n    async getSystemPath() {\n      const systems = await api.get('/redfish/v1/Systems').catch(error => console.log(error));\n      let systemPath = systems?.data?.Members?.[0]?.['@odata.id'];\n      return systemPath;\n    },\n    async getBmcTime({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getBmcPath')}`).then(response => {\n        const bmcDateTime = response.data.DateTime;\n        const date = new Date(bmcDateTime);\n        commit('setBmcTime', date);\n      }).catch(error => console.log(error));\n    },\n    async getSystemInfo({\n      commit\n    }) {\n      api.get(`${await this.dispatch('global/getSystemPath')}`).then(({\n        data: {\n          AssetTag,\n          Model,\n          PowerState,\n          SerialNumber,\n          Status: {\n            State\n          } = {}\n        }\n      } = {}) => {\n        commit('setAssetTag', AssetTag);\n        commit('setSerialNumber', SerialNumber);\n        commit('setModelType', Model);\n        if (State === 'Quiesced' || State === 'InTest') {\n          // OpenBMC's host state interface is mapped to 2 Redfish\n          // properties \"Status\"\"State\" and \"PowerState\". Look first\n          // at State for certain cases.\n          commit('setServerStatus', State);\n        } else {\n          commit('setServerStatus', PowerState);\n        }\n      }).catch(error => console.log(error));\n    }\n  }\n};\nexport default GlobalStore;","map":{"version":3,"names":["api","HOST_STATE","on","off","error","diagnosticMode","serverStateMapper","hostState","GlobalStore","namespaced","state","assetTag","bmcTime","modelType","serialNumber","serverStatus","languagePreference","localStorage","getItem","isUtcDisplay","JSON","parse","username","isAuthorized","userPrivilege","getters","mutations","setAssetTag","setModelType","setSerialNumber","setBmcTime","setServerStatus","serverState","setLanguagePreference","language","setUsername","setUtcTime","setUnauthorized","window","setTimeout","setPrivilege","privilege","actions","getBmcPath","serviceRoot","get","catch","console","log","bmcPath","data","ManagerProvidingService","managers","Members","getSystemPath","systems","systemPath","getBmcTime","commit","dispatch","then","response","bmcDateTime","DateTime","date","Date","getSystemInfo","AssetTag","Model","PowerState","SerialNumber","Status","State"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/GlobalStore.js"],"sourcesContent":["import api from '@/store/api';\n\nconst HOST_STATE = {\n  on: 'xyz.openbmc_project.State.Host.HostState.Running',\n  off: 'xyz.openbmc_project.State.Host.HostState.Off',\n  error: 'xyz.openbmc_project.State.Host.HostState.Quiesced',\n  diagnosticMode: 'xyz.openbmc_project.State.Host.HostState.DiagnosticMode',\n};\n\nconst serverStateMapper = (hostState) => {\n  switch (hostState) {\n    case HOST_STATE.on:\n    case 'On': // Redfish PowerState\n      return 'on';\n    case HOST_STATE.off:\n    case 'Off': // Redfish PowerState\n      return 'off';\n    case HOST_STATE.error:\n    case 'Quiesced': // Redfish Status\n      return 'error';\n    case HOST_STATE.diagnosticMode:\n    case 'InTest': // Redfish Status\n      return 'diagnosticMode';\n    default:\n      return 'unreachable';\n  }\n};\n\nconst GlobalStore = {\n  namespaced: true,\n  state: {\n    assetTag: null,\n    bmcTime: null,\n    modelType: null,\n    serialNumber: null,\n    serverStatus: 'unreachable',\n    languagePreference: localStorage.getItem('storedLanguage') || 'en-US',\n    isUtcDisplay: localStorage.getItem('storedUtcDisplay')\n      ? JSON.parse(localStorage.getItem('storedUtcDisplay'))\n      : true,\n    username: localStorage.getItem('storedUsername'),\n    isAuthorized: true,\n    userPrivilege: null,\n  },\n  getters: {\n    assetTag: (state) => state.assetTag,\n    modelType: (state) => state.modelType,\n    serialNumber: (state) => state.serialNumber,\n    serverStatus: (state) => state.serverStatus,\n    bmcTime: (state) => state.bmcTime,\n    languagePreference: (state) => state.languagePreference,\n    isUtcDisplay: (state) => state.isUtcDisplay,\n    username: (state) => state.username,\n    isAuthorized: (state) => state.isAuthorized,\n    userPrivilege: (state) => state.userPrivilege,\n  },\n  mutations: {\n    setAssetTag: (state, assetTag) => (state.assetTag = assetTag),\n    setModelType: (state, modelType) => (state.modelType = modelType),\n    setSerialNumber: (state, serialNumber) =>\n      (state.serialNumber = serialNumber),\n    setBmcTime: (state, bmcTime) => (state.bmcTime = bmcTime),\n    setServerStatus: (state, serverState) =>\n      (state.serverStatus = serverStateMapper(serverState)),\n    setLanguagePreference: (state, language) =>\n      (state.languagePreference = language),\n    setUsername: (state, username) => (state.username = username),\n    setUtcTime: (state, isUtcDisplay) => (state.isUtcDisplay = isUtcDisplay),\n    setUnauthorized: (state) => {\n      state.isAuthorized = false;\n      window.setTimeout(() => {\n        state.isAuthorized = true;\n      }, 100);\n    },\n    setPrivilege: (state, privilege) => {\n      state.userPrivilege = privilege;\n    },\n  },\n  actions: {\n    async getBmcPath() {\n      const serviceRoot = await api\n        .get('/redfish/v1')\n        .catch((error) => console.log(error));\n      let bmcPath = serviceRoot?.data?.ManagerProvidingService?.['@odata.id'];\n      if (!bmcPath) {\n        const managers = await api\n          .get('/redfish/v1/Managers')\n          .catch((error) => console.log(error));\n        bmcPath = managers.data?.Members?.[0]?.['@odata.id'];\n      }\n      return bmcPath;\n    },\n    async getSystemPath() {\n      const systems = await api\n        .get('/redfish/v1/Systems')\n        .catch((error) => console.log(error));\n      let systemPath = systems?.data?.Members?.[0]?.['@odata.id'];\n      return systemPath;\n    },\n    async getBmcTime({ commit }) {\n      return await api\n        .get(`${await this.dispatch('global/getBmcPath')}`)\n        .then((response) => {\n          const bmcDateTime = response.data.DateTime;\n          const date = new Date(bmcDateTime);\n          commit('setBmcTime', date);\n        })\n        .catch((error) => console.log(error));\n    },\n    async getSystemInfo({ commit }) {\n      api\n        .get(`${await this.dispatch('global/getSystemPath')}`)\n        .then(\n          ({\n            data: {\n              AssetTag,\n              Model,\n              PowerState,\n              SerialNumber,\n              Status: { State } = {},\n            },\n          } = {}) => {\n            commit('setAssetTag', AssetTag);\n            commit('setSerialNumber', SerialNumber);\n            commit('setModelType', Model);\n            if (State === 'Quiesced' || State === 'InTest') {\n              // OpenBMC's host state interface is mapped to 2 Redfish\n              // properties \"Status\"\"State\" and \"PowerState\". Look first\n              // at State for certain cases.\n              commit('setServerStatus', State);\n            } else {\n              commit('setServerStatus', PowerState);\n            }\n          },\n        )\n        .catch((error) => console.log(error));\n    },\n  },\n};\n\nexport default GlobalStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}