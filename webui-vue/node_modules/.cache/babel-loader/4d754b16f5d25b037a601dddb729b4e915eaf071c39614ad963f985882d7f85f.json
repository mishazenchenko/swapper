{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nconst SystemStore = {\n  namespaced: true,\n  state: {\n    systems: []\n  },\n  getters: {\n    systems: state => state.systems\n  },\n  mutations: {\n    setSystemInfo: (state, data) => {\n      const system = {};\n      system.assetTag = data.AssetTag;\n      system.description = data.Description;\n      system.firmwareVersion = data.BiosVersion;\n      system.hardwareType = data.Name;\n      system.health = data.Status?.Health;\n      system.totalSystemMemoryGiB = data.MemorySummary?.TotalSystemMemoryGiB;\n      system.id = data.Id;\n      system.locationIndicatorActive = data.LocationIndicatorActive;\n      system.locationNumber = data.Location?.PartLocation?.ServiceLabel;\n      system.manufacturer = data.Manufacturer;\n      system.model = data.Model;\n      system.processorSummaryCount = data.ProcessorSummary?.Count;\n      system.processorSummaryCoreCount = data.ProcessorSummary?.CoreCount;\n      system.powerState = data.PowerState;\n      system.serialNumber = data.SerialNumber;\n      system.serialConsoleEnabled = data.SerialConsole.ServiceEnabled;\n      system.serialConsoleMaxSessions = data.SerialConsole.MaxConcurrentSessions;\n      system.healthRollup = data.Status?.HealthRollup;\n      system.subModel = data.SubModel;\n      system.statusState = data.Status?.State;\n      system.systemType = data.SystemType;\n      state.systems = [system];\n    }\n  },\n  actions: {\n    async getSystem({\n      commit\n    }) {\n      return await api.get(`${await this.dispatch('global/getSystemPath')}`).then(({\n        data\n      }) => commit('setSystemInfo', data)).catch(error => console.log(error));\n    },\n    async changeIdentifyLedState({\n      commit\n    }, ledState) {\n      return await api.patch(`${await this.dispatch('global/getSystemPath')}`, {\n        LocationIndicatorActive: ledState\n      }).then(() => {\n        if (ledState) {\n          return i18n.global.t('pageInventory.toast.successEnableIdentifyLed');\n        } else {\n          return i18n.global.t('pageInventory.toast.successDisableIdentifyLed');\n        }\n      }).catch(error => {\n        commit('setSystemInfo', this.state.system.systems[0]);\n        console.log('error', error);\n        if (ledState) {\n          throw new Error(i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'));\n        } else {\n          throw new Error(i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'));\n        }\n      });\n    }\n  }\n};\nexport default SystemStore;","map":{"version":3,"names":["api","i18n","SystemStore","namespaced","state","systems","getters","mutations","setSystemInfo","data","system","assetTag","AssetTag","description","Description","firmwareVersion","BiosVersion","hardwareType","Name","health","Status","Health","totalSystemMemoryGiB","MemorySummary","TotalSystemMemoryGiB","id","Id","locationIndicatorActive","LocationIndicatorActive","locationNumber","Location","PartLocation","ServiceLabel","manufacturer","Manufacturer","model","Model","processorSummaryCount","ProcessorSummary","Count","processorSummaryCoreCount","CoreCount","powerState","PowerState","serialNumber","SerialNumber","serialConsoleEnabled","SerialConsole","ServiceEnabled","serialConsoleMaxSessions","MaxConcurrentSessions","healthRollup","HealthRollup","subModel","SubModel","statusState","State","systemType","SystemType","actions","getSystem","commit","get","dispatch","then","catch","error","console","log","changeIdentifyLedState","ledState","patch","global","t","Error"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/HardwareStatus/SystemStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\n\nconst SystemStore = {\n  namespaced: true,\n  state: {\n    systems: [],\n  },\n  getters: {\n    systems: (state) => state.systems,\n  },\n  mutations: {\n    setSystemInfo: (state, data) => {\n      const system = {};\n      system.assetTag = data.AssetTag;\n      system.description = data.Description;\n      system.firmwareVersion = data.BiosVersion;\n      system.hardwareType = data.Name;\n      system.health = data.Status?.Health;\n      system.totalSystemMemoryGiB = data.MemorySummary?.TotalSystemMemoryGiB;\n      system.id = data.Id;\n      system.locationIndicatorActive = data.LocationIndicatorActive;\n      system.locationNumber = data.Location?.PartLocation?.ServiceLabel;\n      system.manufacturer = data.Manufacturer;\n      system.model = data.Model;\n      system.processorSummaryCount = data.ProcessorSummary?.Count;\n      system.processorSummaryCoreCount = data.ProcessorSummary?.CoreCount;\n      system.powerState = data.PowerState;\n      system.serialNumber = data.SerialNumber;\n      system.serialConsoleEnabled = data.SerialConsole.ServiceEnabled;\n      system.serialConsoleMaxSessions =\n        data.SerialConsole.MaxConcurrentSessions;\n      system.healthRollup = data.Status?.HealthRollup;\n      system.subModel = data.SubModel;\n      system.statusState = data.Status?.State;\n      system.systemType = data.SystemType;\n      state.systems = [system];\n    },\n  },\n  actions: {\n    async getSystem({ commit }) {\n      return await api\n        .get(`${await this.dispatch('global/getSystemPath')}`)\n        .then(({ data }) => commit('setSystemInfo', data))\n        .catch((error) => console.log(error));\n    },\n    async changeIdentifyLedState({ commit }, ledState) {\n      return await api\n        .patch(`${await this.dispatch('global/getSystemPath')}`, {\n          LocationIndicatorActive: ledState,\n        })\n        .then(() => {\n          if (ledState) {\n            return i18n.global.t(\n              'pageInventory.toast.successEnableIdentifyLed',\n            );\n          } else {\n            return i18n.global.t(\n              'pageInventory.toast.successDisableIdentifyLed',\n            );\n          }\n        })\n        .catch((error) => {\n          commit('setSystemInfo', this.state.system.systems[0]);\n          console.log('error', error);\n          if (ledState) {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorEnableIdentifyLed'),\n            );\n          } else {\n            throw new Error(\n              i18n.global.t('pageInventory.toast.errorDisableIdentifyLed'),\n            );\n          }\n        });\n    },\n  },\n};\n\nexport default SystemStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}