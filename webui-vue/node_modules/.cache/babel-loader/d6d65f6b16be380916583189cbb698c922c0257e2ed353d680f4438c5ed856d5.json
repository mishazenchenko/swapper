{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_b_form_input = _resolveComponent(\"b-form-input\");\n  const _component_b_form_invalid_feedback = _resolveComponent(\"b-form-invalid-feedback\");\n  const _component_b_form_group = _resolveComponent(\"b-form-group\");\n  const _component_b_form_checkbox = _resolveComponent(\"b-form-checkbox\");\n  const _component_b_form = _resolveComponent(\"b-form\");\n  const _component_b_modal = _resolveComponent(\"b-modal\");\n  return _openBlock(), _createBlock(_component_b_modal, {\n    id: \"configure-connection\",\n    ref: \"modal\",\n    onOk: $options.onOk,\n    onHidden: $options.resetForm,\n    onShow: $options.initModal\n  }, {\n    \"modal-title\": _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('pageVirtualMedia.modal.title')), 1 /* TEXT */)]),\n    \"modal-ok\": _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.action.save')), 1 /* TEXT */)]),\n    \"modal-cancel\": _withCtx(() => [_createTextVNode(_toDisplayString($data.$t('global.action.cancel')), 1 /* TEXT */)]),\n    default: _withCtx(() => [_createVNode(_component_b_form, null, {\n      default: _withCtx(() => [_createVNode(_component_b_form_group, {\n        label: $data.$t('pageVirtualMedia.modal.serverUri'),\n        \"label-for\": \"serverUri\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_b_form_input, {\n          id: \"serverUri\",\n          modelValue: $data.form.serverUri,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.form.serverUri = $event),\n          type: \"text\",\n          state: _ctx.getValidationState($setup.v$.form.serverUri),\n          \"data-test-id\": \"configureConnection-input-serverUri\",\n          onInput: _cache[1] || (_cache[1] = $event => $setup.v$.form.serverUri.$touch())\n        }, null, 8 /* PROPS */, [\"modelValue\", \"state\"]), _createVNode(_component_b_form_invalid_feedback, {\n          role: \"alert\"\n        }, {\n          default: _withCtx(() => [$setup.v$.form.serverUri.required.$invalid ? (_openBlock(), _createElementBlock(_Fragment, {\n            key: 0\n          }, [_createTextVNode(_toDisplayString($data.$t('global.form.fieldRequired')), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)], undefined, true),\n          _: 1 /* STABLE */\n        })], undefined, true),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"label\"]), _createVNode(_component_b_form_group, {\n        label: $data.$t('pageVirtualMedia.modal.username'),\n        \"label-for\": \"username\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_b_form_input, {\n          id: \"username\",\n          modelValue: $data.form.username,\n          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.form.username = $event),\n          type: \"text\",\n          \"data-test-id\": \"configureConnection-input-username\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])], undefined, true),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"label\"]), _createVNode(_component_b_form_group, {\n        label: $data.$t('pageVirtualMedia.modal.password'),\n        \"label-for\": \"password\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_b_form_input, {\n          id: \"password\",\n          modelValue: $data.form.password,\n          \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.form.password = $event),\n          type: \"password\",\n          \"data-test-id\": \"configureConnection-input-password\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])], undefined, true),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"label\"]), _createVNode(_component_b_form_group, null, {\n        default: _withCtx(() => [_createVNode(_component_b_form_checkbox, {\n          modelValue: $data.form.isRW,\n          \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.form.isRW = $event),\n          \"data-test-id\": \"configureConnection-input-isRW\",\n          name: \"check-button\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(\" RW \")], undefined, true),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"modelValue\"])], undefined, true),\n        _: 1 /* STABLE */\n      })], undefined, true),\n      _: 1 /* STABLE */\n    })], undefined, true),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onOk\", \"onHidden\", \"onShow\"]);\n}","map":{"version":3,"names":["_createBlock","_component_b_modal","id","ref","onOk","$options","onHidden","resetForm","onShow","initModal","_withCtx","_createTextVNode","_toDisplayString","$data","$t","default","_createVNode","_component_b_form","_component_b_form_group","label","_component_b_form_input","modelValue","form","serverUri","_cache","$event","type","state","_ctx","getValidationState","$setup","v$","onInput","$touch","_component_b_form_invalid_feedback","role","required","$invalid","_createElementBlock","_Fragment","key","_createCommentVNode","_","username","password","_component_b_form_checkbox","isRW","name"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Operations/VirtualMedia/ModalConfigureConnection.vue"],"sourcesContent":["<template>\n  <b-modal\n    id=\"configure-connection\"\n    ref=\"modal\"\n    @ok=\"onOk\"\n    @hidden=\"resetForm\"\n    @show=\"initModal\"\n  >\n    <template #modal-title>\n      {{ $t('pageVirtualMedia.modal.title') }}\n    </template>\n    <b-form>\n      <b-form-group\n        :label=\"$t('pageVirtualMedia.modal.serverUri')\"\n        label-for=\"serverUri\"\n      >\n        <b-form-input\n          id=\"serverUri\"\n          v-model=\"form.serverUri\"\n          type=\"text\"\n          :state=\"getValidationState(v$.form.serverUri)\"\n          data-test-id=\"configureConnection-input-serverUri\"\n          @input=\"v$.form.serverUri.$touch()\"\n        />\n        <b-form-invalid-feedback role=\"alert\">\n          <template v-if=\"v$.form.serverUri.required.$invalid\">\n            {{ $t('global.form.fieldRequired') }}\n          </template>\n        </b-form-invalid-feedback>\n      </b-form-group>\n      <b-form-group\n        :label=\"$t('pageVirtualMedia.modal.username')\"\n        label-for=\"username\"\n      >\n        <b-form-input\n          id=\"username\"\n          v-model=\"form.username\"\n          type=\"text\"\n          data-test-id=\"configureConnection-input-username\"\n        />\n      </b-form-group>\n      <b-form-group\n        :label=\"$t('pageVirtualMedia.modal.password')\"\n        label-for=\"password\"\n      >\n        <b-form-input\n          id=\"password\"\n          v-model=\"form.password\"\n          type=\"password\"\n          data-test-id=\"configureConnection-input-password\"\n        />\n      </b-form-group>\n      <b-form-group>\n        <b-form-checkbox\n          v-model=\"form.isRW\"\n          data-test-id=\"configureConnection-input-isRW\"\n          name=\"check-button\"\n        >\n          RW\n        </b-form-checkbox>\n      </b-form-group>\n    </b-form>\n    <template #modal-ok>\n      {{ $t('global.action.save') }}\n    </template>\n    <template #modal-cancel>\n      {{ $t('global.action.cancel') }}\n    </template>\n  </b-modal>\n</template>\n\n<script>\nimport { required } from '@vuelidate/validators';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  mixins: [VuelidateMixin],\n  props: {\n    connection: {\n      type: Object,\n      default: null,\n      validator: (prop) => {\n        console.log(prop);\n        return true;\n      },\n    },\n  },\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      form: {\n        serverUri: null,\n        username: null,\n        password: null,\n        isRW: false,\n      },\n    };\n  },\n  watch: {\n    connection: function (value) {\n      if (value === null) return;\n      Object.assign(this.form, value);\n    },\n  },\n  validations() {\n    return {\n      form: {\n        serverUri: {\n          required,\n        },\n      },\n    };\n  },\n  methods: {\n    handleSubmit() {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n      let connectionData = {};\n      Object.assign(connectionData, this.form);\n      this.$emit('ok', connectionData);\n      this.closeModal();\n    },\n    initModal() {\n      if (this.connection) {\n        Object.assign(this.form, this.connection);\n      }\n    },\n    closeModal() {\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    },\n    resetForm() {\n      this.form.serverUri = null;\n      this.form.username = null;\n      this.form.password = null;\n      this.form.isRW = false;\n      this.v$.$reset();\n    },\n    onOk(bvModalEvt) {\n      bvModalEvt.preventDefault();\n      this.handleSubmit();\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}