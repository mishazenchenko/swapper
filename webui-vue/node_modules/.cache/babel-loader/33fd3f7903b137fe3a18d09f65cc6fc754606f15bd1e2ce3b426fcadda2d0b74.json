{"ast":null,"code":"import { useVuelidate } from '@vuelidate/core';\nimport { required } from '@vuelidate/validators';\nimport ModalConfirmation from './DumpsModalConfirmation';\nimport Alert from '@/components/Global/Alert';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport i18n from '@/i18n';\nimport { useI18n } from 'vue-i18n';\nexport default {\n  components: {\n    Alert,\n    ModalConfirmation\n  },\n  mixins: [BVToastMixin, VuelidateMixin],\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      selectedDumpType: null,\n      dumpTypeOptions: [{\n        value: 'bmc',\n        text: i18n.global.t('pageDumps.form.bmcDump')\n      }, {\n        value: 'system',\n        text: i18n.global.t('pageDumps.form.systemDump')\n      }]\n    };\n  },\n  validations() {\n    return {\n      selectedDumpType: {\n        required\n      }\n    };\n  },\n  methods: {\n    handleSubmit() {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n\n      // System dump initiation\n      if (this.selectedDumpType === 'system') {\n        this.showConfirmationModal();\n      }\n      // BMC dump initiation\n      else if (this.selectedDumpType === 'bmc') {\n        this.$store.dispatch('dumps/createBmcDump').then(() => this.infoToast(i18n.global.t('pageDumps.toast.successStartBmcDump'), {\n          title: i18n.global.t('pageDumps.toast.successStartBmcDumpTitle'),\n          timestamp: true\n        })).catch(({\n          message\n        }) => this.errorToast(message));\n      }\n    },\n    showConfirmationModal() {\n      this.$bvModal.show('modal-confirmation');\n    },\n    createSystemDump() {\n      this.$store.dispatch('dumps/createSystemDump').then(() => this.infoToast(i18n.global.t('pageDumps.toast.successStartSystemDump'), {\n        title: i18n.global.t('pageDumps.toast.successStartSystemDumpTitle'),\n        timestamp: true\n      })).catch(({\n        message\n      }) => this.errorToast(message));\n    }\n  }\n};","map":{"version":3,"names":["useVuelidate","required","ModalConfirmation","Alert","BVToastMixin","VuelidateMixin","i18n","useI18n","components","mixins","setup","v$","data","$t","t","selectedDumpType","dumpTypeOptions","value","text","global","validations","methods","handleSubmit","$touch","$invalid","showConfirmationModal","$store","dispatch","then","infoToast","title","timestamp","catch","message","errorToast","$bvModal","show","createSystemDump"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Logs/Dumps/DumpsForm.vue"],"sourcesContent":["<template>\n  <div class=\"form-background p-3\">\n    <b-form id=\"form-new-dump\" novalidate @submit.prevent=\"handleSubmit\">\n      <b-form-group\n        :label=\"$t('pageDumps.form.selectDumpType')\"\n        label-for=\"selectDumpType\"\n      >\n        <b-form-select\n          id=\"selectDumpType\"\n          v-model=\"selectedDumpType\"\n          :options=\"dumpTypeOptions\"\n          :state=\"getValidationState(v$.selectedDumpType)\"\n        >\n          <template #first>\n            <b-form-select-option :value=\"null\" disabled>\n              {{ $t('global.form.selectAnOption') }}\n            </b-form-select-option>\n          </template>\n        </b-form-select>\n        <b-form-invalid-feedback role=\"alert\">\n          {{ $t('global.form.required') }}\n        </b-form-invalid-feedback>\n      </b-form-group>\n      <alert variant=\"info\" class=\"mb-3\" :show=\"selectedDumpType === 'system'\">\n        {{ $t('pageDumps.form.systemDumpInfo') }}\n      </alert>\n      <b-button variant=\"primary\" type=\"submit\" form=\"form-new-dump\">\n        {{ $t('pageDumps.form.initiateDump') }}\n      </b-button>\n    </b-form>\n    <modal-confirmation @ok=\"createSystemDump\" />\n  </div>\n</template>\n\n<script>\nimport { useVuelidate } from '@vuelidate/core';\nimport { required } from '@vuelidate/validators';\nimport ModalConfirmation from './DumpsModalConfirmation';\nimport Alert from '@/components/Global/Alert';\nimport BVToastMixin from '@/components/Mixins/BVToastMixin';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport i18n from '@/i18n';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  components: { Alert, ModalConfirmation },\n  mixins: [BVToastMixin, VuelidateMixin],\n  setup() {\n    return {\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      selectedDumpType: null,\n      dumpTypeOptions: [\n        { value: 'bmc', text: i18n.global.t('pageDumps.form.bmcDump') },\n        { value: 'system', text: i18n.global.t('pageDumps.form.systemDump') },\n      ],\n    };\n  },\n  validations() {\n    return {\n      selectedDumpType: { required },\n    };\n  },\n  methods: {\n    handleSubmit() {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n\n      // System dump initiation\n      if (this.selectedDumpType === 'system') {\n        this.showConfirmationModal();\n      }\n      // BMC dump initiation\n      else if (this.selectedDumpType === 'bmc') {\n        this.$store\n          .dispatch('dumps/createBmcDump')\n          .then(() =>\n            this.infoToast(\n              i18n.global.t('pageDumps.toast.successStartBmcDump'),\n              {\n                title: i18n.global.t(\n                  'pageDumps.toast.successStartBmcDumpTitle',\n                ),\n                timestamp: true,\n              },\n            ),\n          )\n          .catch(({ message }) => this.errorToast(message));\n      }\n    },\n    showConfirmationModal() {\n      this.$bvModal.show('modal-confirmation');\n    },\n    createSystemDump() {\n      this.$store\n        .dispatch('dumps/createSystemDump')\n        .then(() =>\n          this.infoToast(\n            i18n.global.t('pageDumps.toast.successStartSystemDump'),\n            {\n              title: i18n.global.t(\n                'pageDumps.toast.successStartSystemDumpTitle',\n              ),\n              timestamp: true,\n            },\n          ),\n        )\n        .catch(({ message }) => this.errorToast(message));\n    },\n  },\n};\n</script>\n"],"mappings":"AAmCA,SAASA,YAAW,QAAS,iBAAiB;AAC9C,SAASC,QAAO,QAAS,uBAAuB;AAChD,OAAOC,iBAAgB,MAAO,0BAA0B;AACxD,OAAOC,KAAI,MAAO,2BAA2B;AAC7C,OAAOC,YAAW,MAAO,kCAAkC;AAC3D,OAAOC,cAAa,MAAO,uCAAuC;AAClE,OAAOC,IAAG,MAAO,QAAQ;AACzB,SAASC,OAAM,QAAS,UAAU;AAElC,eAAe;EACbC,UAAU,EAAE;IAAEL,KAAK;IAAED;EAAkB,CAAC;EACxCO,MAAM,EAAE,CAACL,YAAY,EAAEC,cAAc,CAAC;EACtCK,KAAKA,CAAA,EAAG;IACN,OAAO;MACLC,EAAE,EAAEX,YAAY,CAAC;IACnB,CAAC;EACH,CAAC;EACDY,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,EAAE,EAAEN,OAAO,CAAC,CAAC,CAACO,CAAC;MACfC,gBAAgB,EAAE,IAAI;MACtBC,eAAe,EAAE,CACf;QAAEC,KAAK,EAAE,KAAK;QAAEC,IAAI,EAAEZ,IAAI,CAACa,MAAM,CAACL,CAAC,CAAC,wBAAwB;MAAE,CAAC,EAC/D;QAAEG,KAAK,EAAE,QAAQ;QAAEC,IAAI,EAAEZ,IAAI,CAACa,MAAM,CAACL,CAAC,CAAC,2BAA2B;MAAE,CAAC;IAEzE,CAAC;EACH,CAAC;EACDM,WAAWA,CAAA,EAAG;IACZ,OAAO;MACLL,gBAAgB,EAAE;QAAEd;MAAS;IAC/B,CAAC;EACH,CAAC;EACDoB,OAAO,EAAE;IACPC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACX,EAAE,CAACY,MAAM,CAAC,CAAC;MAChB,IAAI,IAAI,CAACZ,EAAE,CAACa,QAAQ,EAAE;;MAEtB;MACA,IAAI,IAAI,CAACT,gBAAe,KAAM,QAAQ,EAAE;QACtC,IAAI,CAACU,qBAAqB,CAAC,CAAC;MAC9B;MACA;MAAA,KACK,IAAI,IAAI,CAACV,gBAAe,KAAM,KAAK,EAAE;QACxC,IAAI,CAACW,MAAK,CACPC,QAAQ,CAAC,qBAAqB,EAC9BC,IAAI,CAAC,MACJ,IAAI,CAACC,SAAS,CACZvB,IAAI,CAACa,MAAM,CAACL,CAAC,CAAC,qCAAqC,CAAC,EACpD;UACEgB,KAAK,EAAExB,IAAI,CAACa,MAAM,CAACL,CAAC,CAClB,0CACF,CAAC;UACDiB,SAAS,EAAE;QACb,CACF,CACF,EACCC,KAAK,CAAC,CAAC;UAAEC;QAAQ,CAAC,KAAK,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC,CAAC;MACrD;IACF,CAAC;IACDR,qBAAqBA,CAAA,EAAG;MACtB,IAAI,CAACU,QAAQ,CAACC,IAAI,CAAC,oBAAoB,CAAC;IAC1C,CAAC;IACDC,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACX,MAAK,CACPC,QAAQ,CAAC,wBAAwB,EACjCC,IAAI,CAAC,MACJ,IAAI,CAACC,SAAS,CACZvB,IAAI,CAACa,MAAM,CAACL,CAAC,CAAC,wCAAwC,CAAC,EACvD;QACEgB,KAAK,EAAExB,IAAI,CAACa,MAAM,CAACL,CAAC,CAClB,6CACF,CAAC;QACDiB,SAAS,EAAE;MACb,CACF,CACF,EACCC,KAAK,CAAC,CAAC;QAAEC;MAAQ,CAAC,KAAK,IAAI,CAACC,UAAU,CAACD,OAAO,CAAC,CAAC;IACrD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}