{"ast":null,"code":"import AlertsServerPower from './FirmwareAlertServerPower';\nimport BmcCards from './FirmwareCardsBmc';\nimport FormUpdate from './FirmwareFormUpdate';\nimport BiosCards from './FirmwareCardsBios';\nimport PageSection from '@/components/Global/PageSection';\nimport PageTitle from '@/components/Global/PageTitle';\nimport LoadingBarMixin, { loading } from '@/components/Mixins/LoadingBarMixin';\nimport { useI18n } from 'vue-i18n';\nexport default {\n  name: 'FirmwareSingleImage',\n  components: {\n    AlertsServerPower,\n    BmcCards,\n    FormUpdate,\n    BiosCards,\n    PageSection,\n    PageTitle\n  },\n  mixins: [LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      loading,\n      isServerPowerOffRequired: process.env.VUE_APP_SERVER_OFF_REQUIRED === 'true'\n    };\n  },\n  computed: {\n    serverStatus() {\n      return this.$store.getters['global/serverStatus'];\n    },\n    isServerOff() {\n      return this.serverStatus === 'off' ? true : false;\n    },\n    isSingleFileUploadEnabled() {\n      return this.$store.getters['firmware/isSingleFileUploadEnabled'];\n    },\n    isPageDisabled() {\n      if (this.isServerPowerOffRequired) {\n        return !this.isServerOff || this.loading || this.isOperationInProgress;\n      }\n      return this.loading || this.isOperationInProgress;\n    }\n  },\n  created() {\n    this.startLoader();\n    this.$store.dispatch('firmware/getFirmwareInformation').finally(() => this.endLoader());\n  }\n};","map":{"version":3,"names":["AlertsServerPower","BmcCards","FormUpdate","BiosCards","PageSection","PageTitle","LoadingBarMixin","loading","useI18n","name","components","mixins","beforeRouteLeave","to","from","next","hideLoader","data","$t","t","isServerPowerOffRequired","process","env","VUE_APP_SERVER_OFF_REQUIRED","computed","serverStatus","$store","getters","isServerOff","isSingleFileUploadEnabled","isPageDisabled","isOperationInProgress","created","startLoader","dispatch","finally","endLoader"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Operations/Firmware/Firmware.vue"],"sourcesContent":["<template>\n  <b-container fluid=\"xl\">\n    <page-title />\n    <alerts-server-power\n      v-if=\"isServerPowerOffRequired\"\n      :is-server-off=\"isServerOff\"\n    />\n\n    <!-- Firmware cards -->\n    <b-row>\n      <b-col xl=\"10\">\n        <!-- BMC Firmware -->\n        <bmc-cards\n          :is-page-disabled=\"isPageDisabled\"\n          :is-server-off=\"isServerOff\"\n        />\n\n        <!-- Bios Firmware -->\n        <bios-cards v-if=\"!isSingleFileUploadEnabled\" />\n      </b-col>\n    </b-row>\n\n    <!-- Update firmware-->\n    <page-section\n      :section-title=\"$t('pageFirmware.sectionTitleUpdateFirmware')\"\n    >\n      <b-row>\n        <b-col sm=\"8\" md=\"6\" xl=\"4\">\n          <!-- Update form -->\n          <form-update\n            :is-server-off=\"isServerOff\"\n            :is-page-disabled=\"isPageDisabled\"\n          />\n        </b-col>\n      </b-row>\n    </page-section>\n  </b-container>\n</template>\n\n<script>\nimport AlertsServerPower from './FirmwareAlertServerPower';\nimport BmcCards from './FirmwareCardsBmc';\nimport FormUpdate from './FirmwareFormUpdate';\nimport BiosCards from './FirmwareCardsBios';\nimport PageSection from '@/components/Global/PageSection';\nimport PageTitle from '@/components/Global/PageTitle';\n\nimport LoadingBarMixin, { loading } from '@/components/Mixins/LoadingBarMixin';\nimport { useI18n } from 'vue-i18n';\n\nexport default {\n  name: 'FirmwareSingleImage',\n  components: {\n    AlertsServerPower,\n    BmcCards,\n    FormUpdate,\n    BiosCards,\n    PageSection,\n    PageTitle,\n  },\n  mixins: [LoadingBarMixin],\n  beforeRouteLeave(to, from, next) {\n    this.hideLoader();\n    next();\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      loading,\n      isServerPowerOffRequired:\n        process.env.VUE_APP_SERVER_OFF_REQUIRED === 'true',\n    };\n  },\n  computed: {\n    serverStatus() {\n      return this.$store.getters['global/serverStatus'];\n    },\n    isServerOff() {\n      return this.serverStatus === 'off' ? true : false;\n    },\n    isSingleFileUploadEnabled() {\n      return this.$store.getters['firmware/isSingleFileUploadEnabled'];\n    },\n    isPageDisabled() {\n      if (this.isServerPowerOffRequired) {\n        return !this.isServerOff || this.loading || this.isOperationInProgress;\n      }\n      return this.loading || this.isOperationInProgress;\n    },\n  },\n  created() {\n    this.startLoader();\n    this.$store\n      .dispatch('firmware/getFirmwareInformation')\n      .finally(() => this.endLoader());\n  },\n};\n</script>\n"],"mappings":"AAwCA,OAAOA,iBAAgB,MAAO,4BAA4B;AAC1D,OAAOC,QAAO,MAAO,oBAAoB;AACzC,OAAOC,UAAS,MAAO,sBAAsB;AAC7C,OAAOC,SAAQ,MAAO,qBAAqB;AAC3C,OAAOC,WAAU,MAAO,iCAAiC;AACzD,OAAOC,SAAQ,MAAO,+BAA+B;AAErD,OAAOC,eAAe,IAAIC,OAAM,QAAS,qCAAqC;AAC9E,SAASC,OAAM,QAAS,UAAU;AAElC,eAAe;EACbC,IAAI,EAAE,qBAAqB;EAC3BC,UAAU,EAAE;IACVV,iBAAiB;IACjBC,QAAQ;IACRC,UAAU;IACVC,SAAS;IACTC,WAAW;IACXC;EACF,CAAC;EACDM,MAAM,EAAE,CAACL,eAAe,CAAC;EACzBM,gBAAgBA,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAC/B,IAAI,CAACC,UAAU,CAAC,CAAC;IACjBD,IAAI,CAAC,CAAC;EACR,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,EAAE,EAAEV,OAAO,CAAC,CAAC,CAACW,CAAC;MACfZ,OAAO;MACPa,wBAAwB,EACtBC,OAAO,CAACC,GAAG,CAACC,2BAA0B,KAAM;IAChD,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,qBAAqB,CAAC;IACnD,CAAC;IACDC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACH,YAAW,KAAM,KAAI,GAAI,IAAG,GAAI,KAAK;IACnD,CAAC;IACDI,yBAAyBA,CAAA,EAAG;MAC1B,OAAO,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC,oCAAoC,CAAC;IAClE,CAAC;IACDG,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAACV,wBAAwB,EAAE;QACjC,OAAO,CAAC,IAAI,CAACQ,WAAU,IAAK,IAAI,CAACrB,OAAM,IAAK,IAAI,CAACwB,qBAAqB;MACxE;MACA,OAAO,IAAI,CAACxB,OAAM,IAAK,IAAI,CAACwB,qBAAqB;IACnD;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACP,MAAK,CACPQ,QAAQ,CAAC,iCAAiC,EAC1CC,OAAO,CAAC,MAAM,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;EACpC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}