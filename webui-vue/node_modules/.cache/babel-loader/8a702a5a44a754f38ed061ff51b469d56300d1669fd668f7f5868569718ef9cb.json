{"ast":null,"code":"import api from '@/store/api';\nimport i18n from '@/i18n';\nimport { find } from 'lodash';\nconst LdapStore = {\n  namespaced: true,\n  state: {\n    isServiceEnabled: null,\n    ldap: {\n      serviceEnabled: null,\n      serviceAddress: null,\n      bindDn: null,\n      baseDn: null,\n      userAttribute: null,\n      groupsAttribute: null,\n      roleGroups: []\n    },\n    activeDirectory: {\n      serviceEnabled: null,\n      serviceAddress: null,\n      bindDn: null,\n      baseDn: null,\n      userAttribute: null,\n      groupsAttribute: null,\n      roleGroups: []\n    }\n  },\n  getters: {\n    isServiceEnabled: state => state.isServiceEnabled,\n    ldap: state => state.ldap,\n    activeDirectory: state => state.activeDirectory,\n    isActiveDirectoryEnabled: state => {\n      return state.activeDirectory.serviceEnabled;\n    },\n    enabledRoleGroups: (state, getters) => {\n      const serviceType = getters.isActiveDirectoryEnabled ? 'activeDirectory' : 'ldap';\n      return state[serviceType].roleGroups;\n    }\n  },\n  mutations: {\n    setServiceEnabled: (state, serviceEnabled) => state.isServiceEnabled = serviceEnabled,\n    setLdapProperties: (state, {\n      ServiceEnabled,\n      ServiceAddresses = [],\n      Authentication = {},\n      LDAPService: {\n        SearchSettings: {\n          BaseDistinguishedNames = [],\n          UsernameAttribute,\n          GroupsAttribute\n        } = {}\n      } = {},\n      RemoteRoleMapping = []\n    }) => {\n      state.ldap.serviceAddress = ServiceAddresses[0];\n      state.ldap.serviceEnabled = ServiceEnabled;\n      state.ldap.baseDn = BaseDistinguishedNames[0];\n      state.ldap.bindDn = Authentication.Username;\n      state.ldap.userAttribute = UsernameAttribute;\n      state.ldap.groupsAttribute = GroupsAttribute;\n      state.ldap.roleGroups = RemoteRoleMapping;\n    },\n    setActiveDirectoryProperties: (state, {\n      ServiceEnabled,\n      ServiceAddresses = [],\n      Authentication = {},\n      LDAPService: {\n        SearchSettings: {\n          BaseDistinguishedNames = [],\n          UsernameAttribute,\n          GroupsAttribute\n        } = {}\n      } = {},\n      RemoteRoleMapping = []\n    }) => {\n      state.activeDirectory.serviceEnabled = ServiceEnabled;\n      state.activeDirectory.serviceAddress = ServiceAddresses[0];\n      state.activeDirectory.bindDn = Authentication.Username;\n      state.activeDirectory.baseDn = BaseDistinguishedNames[0];\n      state.activeDirectory.userAttribute = UsernameAttribute;\n      state.activeDirectory.groupsAttribute = GroupsAttribute;\n      state.activeDirectory.roleGroups = RemoteRoleMapping;\n    }\n  },\n  actions: {\n    async getAccountSettings({\n      commit\n    }) {\n      return await api.get('/redfish/v1/AccountService').then(({\n        data: {\n          LDAP = {},\n          ActiveDirectory = {}\n        }\n      }) => {\n        const ldapEnabled = LDAP.ServiceEnabled;\n        const activeDirectoryEnabled = ActiveDirectory.ServiceEnabled;\n        commit('setServiceEnabled', ldapEnabled || activeDirectoryEnabled);\n        commit('setLdapProperties', LDAP);\n        commit('setActiveDirectoryProperties', ActiveDirectory);\n      }).catch(error => console.log(error));\n    },\n    async saveLdapSettings({\n      state,\n      dispatch\n    }, properties) {\n      const data = {\n        LDAP: properties\n      };\n      if (state.activeDirectory.serviceEnabled) {\n        // Disable Active Directory service if enabled\n        await api.patch('/redfish/v1/AccountService', {\n          ActiveDirectory: {\n            ServiceEnabled: false\n          }\n        });\n      }\n      return await api.patch('/redfish/v1/AccountService', data).then(() => dispatch('getAccountSettings')).then(() => i18n.global.t('pageLdap.toast.successSaveLdapSettings')).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageLdap.toast.errorSaveLdapSettings'));\n      });\n    },\n    async saveActiveDirectorySettings({\n      state,\n      dispatch\n    }, properties) {\n      const data = {\n        ActiveDirectory: properties\n      };\n      if (state.ldap.serviceEnabled) {\n        // Disable LDAP service if enabled\n        await api.patch('/redfish/v1/AccountService', {\n          LDAP: {\n            ServiceEnabled: false\n          }\n        });\n      }\n      return await api.patch('/redfish/v1/AccountService', data).then(() => dispatch('getAccountSettings')).then(() => i18n.global.t('pageLdap.toast.successSaveActiveDirectorySettings')).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageLdap.toast.errorSaveActiveDirectorySettings'));\n      });\n    },\n    async saveAccountSettings({\n      dispatch\n    }, {\n      serviceEnabled,\n      serviceAddress,\n      activeDirectoryEnabled,\n      bindDn,\n      bindPassword,\n      baseDn,\n      userIdAttribute,\n      groupIdAttribute\n    }) {\n      const data = {\n        ServiceEnabled: serviceEnabled,\n        ServiceAddresses: [serviceAddress],\n        Authentication: {\n          Username: bindDn,\n          Password: bindPassword\n        },\n        LDAPService: {\n          SearchSettings: {\n            BaseDistinguishedNames: [baseDn]\n          }\n        }\n      };\n      if (groupIdAttribute) data.LDAPService.SearchSettings.GroupsAttribute = groupIdAttribute;\n      if (userIdAttribute) data.LDAPService.SearchSettings.UsernameAttribute = userIdAttribute;\n      if (activeDirectoryEnabled) {\n        return await dispatch('saveActiveDirectorySettings', data);\n      } else {\n        return await dispatch('saveLdapSettings', data);\n      }\n    },\n    async addNewRoleGroup({\n      dispatch,\n      getters\n    }, {\n      groupName,\n      groupPrivilege\n    }) {\n      const data = {};\n      const enabledRoleGroups = getters['enabledRoleGroups'];\n      const isActiveDirectoryEnabled = getters['isActiveDirectoryEnabled'];\n      const RemoteRoleMapping = [...enabledRoleGroups, {\n        LocalRole: groupPrivilege,\n        RemoteGroup: groupName\n      }];\n      if (isActiveDirectoryEnabled) {\n        data.ActiveDirectory = {\n          RemoteRoleMapping\n        };\n      } else {\n        data.LDAP = {\n          RemoteRoleMapping\n        };\n      }\n      return await api.patch('/redfish/v1/AccountService', data).then(() => dispatch('getAccountSettings')).then(() => i18n.global.t('pageLdap.toast.successAddRoleGroup', {\n        groupName\n      })).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageLdap.toast.errorAddRoleGroup'));\n      });\n    },\n    async saveRoleGroup({\n      dispatch,\n      getters\n    }, {\n      groupName,\n      groupPrivilege\n    }) {\n      const data = {};\n      const enabledRoleGroups = getters['enabledRoleGroups'];\n      const isActiveDirectoryEnabled = getters['isActiveDirectoryEnabled'];\n      const RemoteRoleMapping = enabledRoleGroups.map(group => {\n        if (group.RemoteGroup === groupName) {\n          return {\n            RemoteGroup: groupName,\n            LocalRole: groupPrivilege\n          };\n        } else {\n          return {};\n        }\n      });\n      if (isActiveDirectoryEnabled) {\n        data.ActiveDirectory = {\n          RemoteRoleMapping\n        };\n      } else {\n        data.LDAP = {\n          RemoteRoleMapping\n        };\n      }\n      return await api.patch('/redfish/v1/AccountService', data).then(() => dispatch('getAccountSettings')).then(() => i18n.global.t('pageLdap.toast.successSaveRoleGroup', {\n        groupName\n      })).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageLdap.toast.errorSaveRoleGroup'));\n      });\n    },\n    async deleteRoleGroup({\n      dispatch,\n      getters\n    }, {\n      roleGroups = []\n    }) {\n      const data = {};\n      const enabledRoleGroups = getters['enabledRoleGroups'];\n      const isActiveDirectoryEnabled = getters['isActiveDirectoryEnabled'];\n      const RemoteRoleMapping = enabledRoleGroups.map(group => {\n        if (find(roleGroups, {\n          groupName: group.RemoteGroup\n        })) {\n          return null;\n        } else {\n          return {};\n        }\n      });\n      if (isActiveDirectoryEnabled) {\n        data.ActiveDirectory = {\n          RemoteRoleMapping\n        };\n      } else {\n        data.LDAP = {\n          RemoteRoleMapping\n        };\n      }\n      return await api.patch('/redfish/v1/AccountService', data).then(() => dispatch('getAccountSettings')).then(() => i18n.global.t('pageLdap.toast.successDeleteRoleGroup', roleGroups.length)).catch(error => {\n        console.log(error);\n        throw new Error(i18n.global.t('pageLdap.toast.errorDeleteRoleGroup', roleGroups.length));\n      });\n    }\n  }\n};\nexport default LdapStore;","map":{"version":3,"names":["api","i18n","find","LdapStore","namespaced","state","isServiceEnabled","ldap","serviceEnabled","serviceAddress","bindDn","baseDn","userAttribute","groupsAttribute","roleGroups","activeDirectory","getters","isActiveDirectoryEnabled","enabledRoleGroups","serviceType","mutations","setServiceEnabled","setLdapProperties","ServiceEnabled","ServiceAddresses","Authentication","LDAPService","SearchSettings","BaseDistinguishedNames","UsernameAttribute","GroupsAttribute","RemoteRoleMapping","Username","setActiveDirectoryProperties","actions","getAccountSettings","commit","get","then","data","LDAP","ActiveDirectory","ldapEnabled","activeDirectoryEnabled","catch","error","console","log","saveLdapSettings","dispatch","properties","patch","global","t","Error","saveActiveDirectorySettings","saveAccountSettings","bindPassword","userIdAttribute","groupIdAttribute","Password","addNewRoleGroup","groupName","groupPrivilege","LocalRole","RemoteGroup","saveRoleGroup","map","group","deleteRoleGroup","length"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/store/modules/SecurityAndAccess/LdapStore.js"],"sourcesContent":["import api from '@/store/api';\nimport i18n from '@/i18n';\nimport { find } from 'lodash';\n\nconst LdapStore = {\n  namespaced: true,\n  state: {\n    isServiceEnabled: null,\n    ldap: {\n      serviceEnabled: null,\n      serviceAddress: null,\n      bindDn: null,\n      baseDn: null,\n      userAttribute: null,\n      groupsAttribute: null,\n      roleGroups: [],\n    },\n    activeDirectory: {\n      serviceEnabled: null,\n      serviceAddress: null,\n      bindDn: null,\n      baseDn: null,\n      userAttribute: null,\n      groupsAttribute: null,\n      roleGroups: [],\n    },\n  },\n  getters: {\n    isServiceEnabled: (state) => state.isServiceEnabled,\n    ldap: (state) => state.ldap,\n    activeDirectory: (state) => state.activeDirectory,\n    isActiveDirectoryEnabled: (state) => {\n      return state.activeDirectory.serviceEnabled;\n    },\n    enabledRoleGroups: (state, getters) => {\n      const serviceType = getters.isActiveDirectoryEnabled\n        ? 'activeDirectory'\n        : 'ldap';\n      return state[serviceType].roleGroups;\n    },\n  },\n  mutations: {\n    setServiceEnabled: (state, serviceEnabled) =>\n      (state.isServiceEnabled = serviceEnabled),\n    setLdapProperties: (\n      state,\n      {\n        ServiceEnabled,\n        ServiceAddresses = [],\n        Authentication = {},\n        LDAPService: {\n          SearchSettings: {\n            BaseDistinguishedNames = [],\n            UsernameAttribute,\n            GroupsAttribute,\n          } = {},\n        } = {},\n        RemoteRoleMapping = [],\n      },\n    ) => {\n      state.ldap.serviceAddress = ServiceAddresses[0];\n      state.ldap.serviceEnabled = ServiceEnabled;\n      state.ldap.baseDn = BaseDistinguishedNames[0];\n      state.ldap.bindDn = Authentication.Username;\n      state.ldap.userAttribute = UsernameAttribute;\n      state.ldap.groupsAttribute = GroupsAttribute;\n      state.ldap.roleGroups = RemoteRoleMapping;\n    },\n    setActiveDirectoryProperties: (\n      state,\n      {\n        ServiceEnabled,\n        ServiceAddresses = [],\n        Authentication = {},\n        LDAPService: {\n          SearchSettings: {\n            BaseDistinguishedNames = [],\n            UsernameAttribute,\n            GroupsAttribute,\n          } = {},\n        } = {},\n        RemoteRoleMapping = [],\n      },\n    ) => {\n      state.activeDirectory.serviceEnabled = ServiceEnabled;\n      state.activeDirectory.serviceAddress = ServiceAddresses[0];\n      state.activeDirectory.bindDn = Authentication.Username;\n      state.activeDirectory.baseDn = BaseDistinguishedNames[0];\n      state.activeDirectory.userAttribute = UsernameAttribute;\n      state.activeDirectory.groupsAttribute = GroupsAttribute;\n      state.activeDirectory.roleGroups = RemoteRoleMapping;\n    },\n  },\n  actions: {\n    async getAccountSettings({ commit }) {\n      return await api\n        .get('/redfish/v1/AccountService')\n        .then(({ data: { LDAP = {}, ActiveDirectory = {} } }) => {\n          const ldapEnabled = LDAP.ServiceEnabled;\n          const activeDirectoryEnabled = ActiveDirectory.ServiceEnabled;\n\n          commit('setServiceEnabled', ldapEnabled || activeDirectoryEnabled);\n          commit('setLdapProperties', LDAP);\n          commit('setActiveDirectoryProperties', ActiveDirectory);\n        })\n        .catch((error) => console.log(error));\n    },\n    async saveLdapSettings({ state, dispatch }, properties) {\n      const data = { LDAP: properties };\n      if (state.activeDirectory.serviceEnabled) {\n        // Disable Active Directory service if enabled\n        await api.patch('/redfish/v1/AccountService', {\n          ActiveDirectory: { ServiceEnabled: false },\n        });\n      }\n      return await api\n        .patch('/redfish/v1/AccountService', data)\n        .then(() => dispatch('getAccountSettings'))\n        .then(() => i18n.global.t('pageLdap.toast.successSaveLdapSettings'))\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageLdap.toast.errorSaveLdapSettings'),\n          );\n        });\n    },\n    async saveActiveDirectorySettings({ state, dispatch }, properties) {\n      const data = { ActiveDirectory: properties };\n      if (state.ldap.serviceEnabled) {\n        // Disable LDAP service if enabled\n        await api.patch('/redfish/v1/AccountService', {\n          LDAP: { ServiceEnabled: false },\n        });\n      }\n      return await api\n        .patch('/redfish/v1/AccountService', data)\n        .then(() => dispatch('getAccountSettings'))\n        .then(() =>\n          i18n.global.t('pageLdap.toast.successSaveActiveDirectorySettings'),\n        )\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t('pageLdap.toast.errorSaveActiveDirectorySettings'),\n          );\n        });\n    },\n    async saveAccountSettings(\n      { dispatch },\n      {\n        serviceEnabled,\n        serviceAddress,\n        activeDirectoryEnabled,\n        bindDn,\n        bindPassword,\n        baseDn,\n        userIdAttribute,\n        groupIdAttribute,\n      },\n    ) {\n      const data = {\n        ServiceEnabled: serviceEnabled,\n        ServiceAddresses: [serviceAddress],\n        Authentication: {\n          Username: bindDn,\n          Password: bindPassword,\n        },\n        LDAPService: {\n          SearchSettings: {\n            BaseDistinguishedNames: [baseDn],\n          },\n        },\n      };\n      if (groupIdAttribute)\n        data.LDAPService.SearchSettings.GroupsAttribute = groupIdAttribute;\n      if (userIdAttribute)\n        data.LDAPService.SearchSettings.UsernameAttribute = userIdAttribute;\n\n      if (activeDirectoryEnabled) {\n        return await dispatch('saveActiveDirectorySettings', data);\n      } else {\n        return await dispatch('saveLdapSettings', data);\n      }\n    },\n    async addNewRoleGroup(\n      { dispatch, getters },\n      { groupName, groupPrivilege },\n    ) {\n      const data = {};\n      const enabledRoleGroups = getters['enabledRoleGroups'];\n      const isActiveDirectoryEnabled = getters['isActiveDirectoryEnabled'];\n      const RemoteRoleMapping = [\n        ...enabledRoleGroups,\n        {\n          LocalRole: groupPrivilege,\n          RemoteGroup: groupName,\n        },\n      ];\n      if (isActiveDirectoryEnabled) {\n        data.ActiveDirectory = { RemoteRoleMapping };\n      } else {\n        data.LDAP = { RemoteRoleMapping };\n      }\n      return await api\n        .patch('/redfish/v1/AccountService', data)\n        .then(() => dispatch('getAccountSettings'))\n        .then(() =>\n          i18n.global.t('pageLdap.toast.successAddRoleGroup', {\n            groupName,\n          }),\n        )\n        .catch((error) => {\n          console.log(error);\n          throw new Error(i18n.global.t('pageLdap.toast.errorAddRoleGroup'));\n        });\n    },\n    async saveRoleGroup({ dispatch, getters }, { groupName, groupPrivilege }) {\n      const data = {};\n      const enabledRoleGroups = getters['enabledRoleGroups'];\n      const isActiveDirectoryEnabled = getters['isActiveDirectoryEnabled'];\n      const RemoteRoleMapping = enabledRoleGroups.map((group) => {\n        if (group.RemoteGroup === groupName) {\n          return {\n            RemoteGroup: groupName,\n            LocalRole: groupPrivilege,\n          };\n        } else {\n          return {};\n        }\n      });\n      if (isActiveDirectoryEnabled) {\n        data.ActiveDirectory = { RemoteRoleMapping };\n      } else {\n        data.LDAP = { RemoteRoleMapping };\n      }\n      return await api\n        .patch('/redfish/v1/AccountService', data)\n        .then(() => dispatch('getAccountSettings'))\n        .then(() =>\n          i18n.global.t('pageLdap.toast.successSaveRoleGroup', { groupName }),\n        )\n        .catch((error) => {\n          console.log(error);\n          throw new Error(i18n.global.t('pageLdap.toast.errorSaveRoleGroup'));\n        });\n    },\n    async deleteRoleGroup({ dispatch, getters }, { roleGroups = [] }) {\n      const data = {};\n      const enabledRoleGroups = getters['enabledRoleGroups'];\n      const isActiveDirectoryEnabled = getters['isActiveDirectoryEnabled'];\n      const RemoteRoleMapping = enabledRoleGroups.map((group) => {\n        if (find(roleGroups, { groupName: group.RemoteGroup })) {\n          return null;\n        } else {\n          return {};\n        }\n      });\n      if (isActiveDirectoryEnabled) {\n        data.ActiveDirectory = { RemoteRoleMapping };\n      } else {\n        data.LDAP = { RemoteRoleMapping };\n      }\n      return await api\n        .patch('/redfish/v1/AccountService', data)\n        .then(() => dispatch('getAccountSettings'))\n        .then(() =>\n          i18n.global.t(\n            'pageLdap.toast.successDeleteRoleGroup',\n            roleGroups.length,\n          ),\n        )\n        .catch((error) => {\n          console.log(error);\n          throw new Error(\n            i18n.global.t(\n              'pageLdap.toast.errorDeleteRoleGroup',\n              roleGroups.length,\n            ),\n          );\n        });\n    },\n  },\n};\n\nexport default LdapStore;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAC7B,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,IAAI,QAAQ,QAAQ;AAE7B,MAAMC,SAAS,GAAG;EAChBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACLC,gBAAgB,EAAE,IAAI;IACtBC,IAAI,EAAE;MACJC,cAAc,EAAE,IAAI;MACpBC,cAAc,EAAE,IAAI;MACpBC,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE,IAAI;MACZC,aAAa,EAAE,IAAI;MACnBC,eAAe,EAAE,IAAI;MACrBC,UAAU,EAAE;IACd,CAAC;IACDC,eAAe,EAAE;MACfP,cAAc,EAAE,IAAI;MACpBC,cAAc,EAAE,IAAI;MACpBC,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE,IAAI;MACZC,aAAa,EAAE,IAAI;MACnBC,eAAe,EAAE,IAAI;MACrBC,UAAU,EAAE;IACd;EACF,CAAC;EACDE,OAAO,EAAE;IACPV,gBAAgB,EAAGD,KAAK,IAAKA,KAAK,CAACC,gBAAgB;IACnDC,IAAI,EAAGF,KAAK,IAAKA,KAAK,CAACE,IAAI;IAC3BQ,eAAe,EAAGV,KAAK,IAAKA,KAAK,CAACU,eAAe;IACjDE,wBAAwB,EAAGZ,KAAK,IAAK;MACnC,OAAOA,KAAK,CAACU,eAAe,CAACP,cAAc;IAC7C,CAAC;IACDU,iBAAiB,EAAEA,CAACb,KAAK,EAAEW,OAAO,KAAK;MACrC,MAAMG,WAAW,GAAGH,OAAO,CAACC,wBAAwB,GAChD,iBAAiB,GACjB,MAAM;MACV,OAAOZ,KAAK,CAACc,WAAW,CAAC,CAACL,UAAU;IACtC;EACF,CAAC;EACDM,SAAS,EAAE;IACTC,iBAAiB,EAAEA,CAAChB,KAAK,EAAEG,cAAc,KACtCH,KAAK,CAACC,gBAAgB,GAAGE,cAAe;IAC3Cc,iBAAiB,EAAEA,CACjBjB,KAAK,EACL;MACEkB,cAAc;MACdC,gBAAgB,GAAG,EAAE;MACrBC,cAAc,GAAG,CAAC,CAAC;MACnBC,WAAW,EAAE;QACXC,cAAc,EAAE;UACdC,sBAAsB,GAAG,EAAE;UAC3BC,iBAAiB;UACjBC;QACF,CAAC,GAAG,CAAC;MACP,CAAC,GAAG,CAAC,CAAC;MACNC,iBAAiB,GAAG;IACtB,CAAC,KACE;MACH1B,KAAK,CAACE,IAAI,CAACE,cAAc,GAAGe,gBAAgB,CAAC,CAAC,CAAC;MAC/CnB,KAAK,CAACE,IAAI,CAACC,cAAc,GAAGe,cAAc;MAC1ClB,KAAK,CAACE,IAAI,CAACI,MAAM,GAAGiB,sBAAsB,CAAC,CAAC,CAAC;MAC7CvB,KAAK,CAACE,IAAI,CAACG,MAAM,GAAGe,cAAc,CAACO,QAAQ;MAC3C3B,KAAK,CAACE,IAAI,CAACK,aAAa,GAAGiB,iBAAiB;MAC5CxB,KAAK,CAACE,IAAI,CAACM,eAAe,GAAGiB,eAAe;MAC5CzB,KAAK,CAACE,IAAI,CAACO,UAAU,GAAGiB,iBAAiB;IAC3C,CAAC;IACDE,4BAA4B,EAAEA,CAC5B5B,KAAK,EACL;MACEkB,cAAc;MACdC,gBAAgB,GAAG,EAAE;MACrBC,cAAc,GAAG,CAAC,CAAC;MACnBC,WAAW,EAAE;QACXC,cAAc,EAAE;UACdC,sBAAsB,GAAG,EAAE;UAC3BC,iBAAiB;UACjBC;QACF,CAAC,GAAG,CAAC;MACP,CAAC,GAAG,CAAC,CAAC;MACNC,iBAAiB,GAAG;IACtB,CAAC,KACE;MACH1B,KAAK,CAACU,eAAe,CAACP,cAAc,GAAGe,cAAc;MACrDlB,KAAK,CAACU,eAAe,CAACN,cAAc,GAAGe,gBAAgB,CAAC,CAAC,CAAC;MAC1DnB,KAAK,CAACU,eAAe,CAACL,MAAM,GAAGe,cAAc,CAACO,QAAQ;MACtD3B,KAAK,CAACU,eAAe,CAACJ,MAAM,GAAGiB,sBAAsB,CAAC,CAAC,CAAC;MACxDvB,KAAK,CAACU,eAAe,CAACH,aAAa,GAAGiB,iBAAiB;MACvDxB,KAAK,CAACU,eAAe,CAACF,eAAe,GAAGiB,eAAe;MACvDzB,KAAK,CAACU,eAAe,CAACD,UAAU,GAAGiB,iBAAiB;IACtD;EACF,CAAC;EACDG,OAAO,EAAE;IACP,MAAMC,kBAAkBA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACnC,OAAO,MAAMpC,GAAG,CACbqC,GAAG,CAAC,4BAA4B,CAAC,CACjCC,IAAI,CAAC,CAAC;QAAEC,IAAI,EAAE;UAAEC,IAAI,GAAG,CAAC,CAAC;UAAEC,eAAe,GAAG,CAAC;QAAE;MAAE,CAAC,KAAK;QACvD,MAAMC,WAAW,GAAGF,IAAI,CAACjB,cAAc;QACvC,MAAMoB,sBAAsB,GAAGF,eAAe,CAAClB,cAAc;QAE7Da,MAAM,CAAC,mBAAmB,EAAEM,WAAW,IAAIC,sBAAsB,CAAC;QAClEP,MAAM,CAAC,mBAAmB,EAAEI,IAAI,CAAC;QACjCJ,MAAM,CAAC,8BAA8B,EAAEK,eAAe,CAAC;MACzD,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,MAAMG,gBAAgBA,CAAC;MAAE3C,KAAK;MAAE4C;IAAS,CAAC,EAAEC,UAAU,EAAE;MACtD,MAAMX,IAAI,GAAG;QAAEC,IAAI,EAAEU;MAAW,CAAC;MACjC,IAAI7C,KAAK,CAACU,eAAe,CAACP,cAAc,EAAE;QACxC;QACA,MAAMR,GAAG,CAACmD,KAAK,CAAC,4BAA4B,EAAE;UAC5CV,eAAe,EAAE;YAAElB,cAAc,EAAE;UAAM;QAC3C,CAAC,CAAC;MACJ;MACA,OAAO,MAAMvB,GAAG,CACbmD,KAAK,CAAC,4BAA4B,EAAEZ,IAAI,CAAC,CACzCD,IAAI,CAAC,MAAMW,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAC1CX,IAAI,CAAC,MAAMrC,IAAI,CAACmD,MAAM,CAACC,CAAC,CAAC,wCAAwC,CAAC,CAAC,CACnET,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,MAAM,IAAIS,KAAK,CACbrD,IAAI,CAACmD,MAAM,CAACC,CAAC,CAAC,sCAAsC,CACtD,CAAC;MACH,CAAC,CAAC;IACN,CAAC;IACD,MAAME,2BAA2BA,CAAC;MAAElD,KAAK;MAAE4C;IAAS,CAAC,EAAEC,UAAU,EAAE;MACjE,MAAMX,IAAI,GAAG;QAAEE,eAAe,EAAES;MAAW,CAAC;MAC5C,IAAI7C,KAAK,CAACE,IAAI,CAACC,cAAc,EAAE;QAC7B;QACA,MAAMR,GAAG,CAACmD,KAAK,CAAC,4BAA4B,EAAE;UAC5CX,IAAI,EAAE;YAAEjB,cAAc,EAAE;UAAM;QAChC,CAAC,CAAC;MACJ;MACA,OAAO,MAAMvB,GAAG,CACbmD,KAAK,CAAC,4BAA4B,EAAEZ,IAAI,CAAC,CACzCD,IAAI,CAAC,MAAMW,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAC1CX,IAAI,CAAC,MACJrC,IAAI,CAACmD,MAAM,CAACC,CAAC,CAAC,mDAAmD,CACnE,CAAC,CACAT,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,MAAM,IAAIS,KAAK,CACbrD,IAAI,CAACmD,MAAM,CAACC,CAAC,CAAC,iDAAiD,CACjE,CAAC;MACH,CAAC,CAAC;IACN,CAAC;IACD,MAAMG,mBAAmBA,CACvB;MAAEP;IAAS,CAAC,EACZ;MACEzC,cAAc;MACdC,cAAc;MACdkC,sBAAsB;MACtBjC,MAAM;MACN+C,YAAY;MACZ9C,MAAM;MACN+C,eAAe;MACfC;IACF,CAAC,EACD;MACA,MAAMpB,IAAI,GAAG;QACXhB,cAAc,EAAEf,cAAc;QAC9BgB,gBAAgB,EAAE,CAACf,cAAc,CAAC;QAClCgB,cAAc,EAAE;UACdO,QAAQ,EAAEtB,MAAM;UAChBkD,QAAQ,EAAEH;QACZ,CAAC;QACD/B,WAAW,EAAE;UACXC,cAAc,EAAE;YACdC,sBAAsB,EAAE,CAACjB,MAAM;UACjC;QACF;MACF,CAAC;MACD,IAAIgD,gBAAgB,EAClBpB,IAAI,CAACb,WAAW,CAACC,cAAc,CAACG,eAAe,GAAG6B,gBAAgB;MACpE,IAAID,eAAe,EACjBnB,IAAI,CAACb,WAAW,CAACC,cAAc,CAACE,iBAAiB,GAAG6B,eAAe;MAErE,IAAIf,sBAAsB,EAAE;QAC1B,OAAO,MAAMM,QAAQ,CAAC,6BAA6B,EAAEV,IAAI,CAAC;MAC5D,CAAC,MAAM;QACL,OAAO,MAAMU,QAAQ,CAAC,kBAAkB,EAAEV,IAAI,CAAC;MACjD;IACF,CAAC;IACD,MAAMsB,eAAeA,CACnB;MAAEZ,QAAQ;MAAEjC;IAAQ,CAAC,EACrB;MAAE8C,SAAS;MAAEC;IAAe,CAAC,EAC7B;MACA,MAAMxB,IAAI,GAAG,CAAC,CAAC;MACf,MAAMrB,iBAAiB,GAAGF,OAAO,CAAC,mBAAmB,CAAC;MACtD,MAAMC,wBAAwB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;MACpE,MAAMe,iBAAiB,GAAG,CACxB,GAAGb,iBAAiB,EACpB;QACE8C,SAAS,EAAED,cAAc;QACzBE,WAAW,EAAEH;MACf,CAAC,CACF;MACD,IAAI7C,wBAAwB,EAAE;QAC5BsB,IAAI,CAACE,eAAe,GAAG;UAAEV;QAAkB,CAAC;MAC9C,CAAC,MAAM;QACLQ,IAAI,CAACC,IAAI,GAAG;UAAET;QAAkB,CAAC;MACnC;MACA,OAAO,MAAM/B,GAAG,CACbmD,KAAK,CAAC,4BAA4B,EAAEZ,IAAI,CAAC,CACzCD,IAAI,CAAC,MAAMW,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAC1CX,IAAI,CAAC,MACJrC,IAAI,CAACmD,MAAM,CAACC,CAAC,CAAC,oCAAoC,EAAE;QAClDS;MACF,CAAC,CACH,CAAC,CACAlB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,MAAM,IAAIS,KAAK,CAACrD,IAAI,CAACmD,MAAM,CAACC,CAAC,CAAC,kCAAkC,CAAC,CAAC;MACpE,CAAC,CAAC;IACN,CAAC;IACD,MAAMa,aAAaA,CAAC;MAAEjB,QAAQ;MAAEjC;IAAQ,CAAC,EAAE;MAAE8C,SAAS;MAAEC;IAAe,CAAC,EAAE;MACxE,MAAMxB,IAAI,GAAG,CAAC,CAAC;MACf,MAAMrB,iBAAiB,GAAGF,OAAO,CAAC,mBAAmB,CAAC;MACtD,MAAMC,wBAAwB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;MACpE,MAAMe,iBAAiB,GAAGb,iBAAiB,CAACiD,GAAG,CAAEC,KAAK,IAAK;QACzD,IAAIA,KAAK,CAACH,WAAW,KAAKH,SAAS,EAAE;UACnC,OAAO;YACLG,WAAW,EAAEH,SAAS;YACtBE,SAAS,EAAED;UACb,CAAC;QACH,CAAC,MAAM;UACL,OAAO,CAAC,CAAC;QACX;MACF,CAAC,CAAC;MACF,IAAI9C,wBAAwB,EAAE;QAC5BsB,IAAI,CAACE,eAAe,GAAG;UAAEV;QAAkB,CAAC;MAC9C,CAAC,MAAM;QACLQ,IAAI,CAACC,IAAI,GAAG;UAAET;QAAkB,CAAC;MACnC;MACA,OAAO,MAAM/B,GAAG,CACbmD,KAAK,CAAC,4BAA4B,EAAEZ,IAAI,CAAC,CACzCD,IAAI,CAAC,MAAMW,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAC1CX,IAAI,CAAC,MACJrC,IAAI,CAACmD,MAAM,CAACC,CAAC,CAAC,qCAAqC,EAAE;QAAES;MAAU,CAAC,CACpE,CAAC,CACAlB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,MAAM,IAAIS,KAAK,CAACrD,IAAI,CAACmD,MAAM,CAACC,CAAC,CAAC,mCAAmC,CAAC,CAAC;MACrE,CAAC,CAAC;IACN,CAAC;IACD,MAAMgB,eAAeA,CAAC;MAAEpB,QAAQ;MAAEjC;IAAQ,CAAC,EAAE;MAAEF,UAAU,GAAG;IAAG,CAAC,EAAE;MAChE,MAAMyB,IAAI,GAAG,CAAC,CAAC;MACf,MAAMrB,iBAAiB,GAAGF,OAAO,CAAC,mBAAmB,CAAC;MACtD,MAAMC,wBAAwB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;MACpE,MAAMe,iBAAiB,GAAGb,iBAAiB,CAACiD,GAAG,CAAEC,KAAK,IAAK;QACzD,IAAIlE,IAAI,CAACY,UAAU,EAAE;UAAEgD,SAAS,EAAEM,KAAK,CAACH;QAAY,CAAC,CAAC,EAAE;UACtD,OAAO,IAAI;QACb,CAAC,MAAM;UACL,OAAO,CAAC,CAAC;QACX;MACF,CAAC,CAAC;MACF,IAAIhD,wBAAwB,EAAE;QAC5BsB,IAAI,CAACE,eAAe,GAAG;UAAEV;QAAkB,CAAC;MAC9C,CAAC,MAAM;QACLQ,IAAI,CAACC,IAAI,GAAG;UAAET;QAAkB,CAAC;MACnC;MACA,OAAO,MAAM/B,GAAG,CACbmD,KAAK,CAAC,4BAA4B,EAAEZ,IAAI,CAAC,CACzCD,IAAI,CAAC,MAAMW,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAC1CX,IAAI,CAAC,MACJrC,IAAI,CAACmD,MAAM,CAACC,CAAC,CACX,uCAAuC,EACvCvC,UAAU,CAACwD,MACb,CACF,CAAC,CACA1B,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,MAAM,IAAIS,KAAK,CACbrD,IAAI,CAACmD,MAAM,CAACC,CAAC,CACX,qCAAqC,EACrCvC,UAAU,CAACwD,MACb,CACF,CAAC;MACH,CAAC,CAAC;IACN;EACF;AACF,CAAC;AAED,eAAenE,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}