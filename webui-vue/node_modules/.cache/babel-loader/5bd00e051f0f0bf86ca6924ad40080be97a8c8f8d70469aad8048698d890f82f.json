{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { required } from '@vuelidate/validators';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { ref, watch } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport Alert from '@/components/Global/Alert';\nimport InputPasswordToggle from '@/components/Global/InputPasswordToggle';\nexport default {\n  name: 'Login',\n  components: {\n    Alert,\n    InputPasswordToggle\n  },\n  mixins: [VuelidateMixin],\n  setup() {\n    const {\n      locale\n    } = useI18n();\n    const userLocale = ref(locale.value);\n    watch(userLocale, newLocale => {\n      locale.value = newLocale;\n      localStorage.setItem('storedLanguage', newLocale);\n    });\n    return {\n      userLocale,\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      userInfo: {\n        username: null,\n        password: null\n      },\n      disableSubmitButton: false,\n      languages: [{\n        value: 'en-US',\n        text: 'English'\n      }, {\n        value: 'ru-RU',\n        text: 'Русский'\n      }]\n    };\n  },\n  computed: {\n    authError() {\n      return this.$store.getters['authentication/authError'];\n    }\n  },\n  validations: {\n    userInfo: {\n      username: {\n        required\n      },\n      password: {\n        required\n      }\n    }\n  },\n  methods: {\n    login: function () {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n      this.disableSubmitButton = true;\n      const username = this.userInfo.username;\n      const password = this.userInfo.password;\n      this.$store.dispatch('authentication/login', {\n        username,\n        password\n      }).then(PasswordChangeRequired => {\n        localStorage.setItem('storedLanguage', this.userLocale);\n        localStorage.setItem('storedUsername', username);\n        this.$store.commit('global/setUsername', username);\n        this.$store.commit('global/setLanguagePreference', this.userLocale);\n        if (PasswordChangeRequired) {\n          this.$router.push('/change-password');\n        } else {\n          this.$router.push('/');\n        }\n      }).catch(error => console.log(error)).finally(() => this.disableSubmitButton = false);\n    }\n  }\n};","map":{"version":3,"names":["required","VuelidateMixin","useVuelidate","ref","watch","useI18n","Alert","InputPasswordToggle","name","components","mixins","setup","locale","userLocale","value","newLocale","localStorage","setItem","v$","data","$t","t","userInfo","username","password","disableSubmitButton","languages","text","computed","authError","$store","getters","validations","methods","login","$touch","$invalid","dispatch","then","PasswordChangeRequired","commit","$router","push","catch","error","console","log","finally"],"sources":["/home/zenchenko/openbmc/build/evb-ast2500/workspace/sources/webui-vue/src/views/Login/Login.vue"],"sourcesContent":["<template>\n  <b-form class=\"login-form\" novalidate @submit.prevent=\"login\">\n    <alert class=\"login-error mb-4\" :show=\"authError\" variant=\"danger\">\n      <p id=\"login-error-alert\">\n        {{ $t('pageLogin.alert.message') }}\n      </p>\n    </alert>\n    <b-form-group label-for=\"language\" :label=\"$t('pageLogin.language')\">\n      <b-form-select\n        id=\"language\"\n        v-model=\"userLocale\"\n        :options=\"languages\"\n        data-test-id=\"login-select-language\"\n      ></b-form-select>\n    </b-form-group>\n    <b-form-group label-for=\"username\" :label=\"$t('pageLogin.username')\">\n      <b-form-input\n        id=\"username\"\n        v-model=\"userInfo.username\"\n        aria-describedby=\"login-error-alert username-required\"\n        :state=\"getValidationState(v$.userInfo.username)\"\n        type=\"text\"\n        autofocus=\"autofocus\"\n        data-test-id=\"login-input-username\"\n        @input=\"v$.userInfo.username.$touch()\"\n      >\n      </b-form-input>\n      <b-form-invalid-feedback id=\"username-required\" role=\"alert\">\n        <template v-if=\"v$.userInfo.username.required.$invalid\">\n          {{ $t('global.form.fieldRequired') }}\n        </template>\n      </b-form-invalid-feedback>\n    </b-form-group>\n    <div class=\"login-form__section mb-3\">\n      <label for=\"password\">{{ $t('pageLogin.password') }}</label>\n      <input-password-toggle>\n        <b-form-input\n          id=\"password\"\n          v-model=\"userInfo.password\"\n          aria-describedby=\"login-error-alert password-required\"\n          :state=\"getValidationState(v$.userInfo.password)\"\n          type=\"password\"\n          data-test-id=\"login-input-password\"\n          class=\"form-control-with-button\"\n          @input=\"v$.userInfo.password.$touch()\"\n        >\n        </b-form-input>\n        <b-form-invalid-feedback id=\"password-required\" role=\"alert\">\n          <template v-if=\"v$.userInfo.password.required.$invalid\">\n            {{ $t('global.form.fieldRequired') }}\n          </template>\n        </b-form-invalid-feedback>\n      </input-password-toggle>\n    </div>\n    <b-button\n      class=\"mt-3\"\n      type=\"submit\"\n      variant=\"primary\"\n      data-test-id=\"login-button-submit\"\n      :disabled=\"disableSubmitButton\"\n      >{{ $t('pageLogin.logIn') }}</b-button\n    >\n  </b-form>\n</template>\n\n<script>\nimport { required } from '@vuelidate/validators';\nimport VuelidateMixin from '@/components/Mixins/VuelidateMixin.js';\nimport { useVuelidate } from '@vuelidate/core';\nimport { ref, watch } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport Alert from '@/components/Global/Alert';\nimport InputPasswordToggle from '@/components/Global/InputPasswordToggle';\n\nexport default {\n  name: 'Login',\n  components: { Alert, InputPasswordToggle },\n  mixins: [VuelidateMixin],\n  setup() {\n    const { locale } = useI18n();\n    const userLocale = ref(locale.value);\n    watch(userLocale, (newLocale) => {\n      locale.value = newLocale;\n      localStorage.setItem('storedLanguage', newLocale);\n    });\n    return {\n      userLocale,\n      v$: useVuelidate(),\n    };\n  },\n  data() {\n    return {\n      $t: useI18n().t,\n      userInfo: {\n        username: null,\n        password: null,\n      },\n      disableSubmitButton: false,\n      languages: [\n        {\n          value: 'en-US',\n          text: 'English',\n        },\n        {\n          value: 'ru-RU',\n          text: 'Русский',\n        },\n      ],\n    };\n  },\n  computed: {\n    authError() {\n      return this.$store.getters['authentication/authError'];\n    },\n  },\n  validations: {\n    userInfo: {\n      username: {\n        required,\n      },\n      password: {\n        required,\n      },\n    },\n  },\n  methods: {\n    login: function () {\n      this.v$.$touch();\n      if (this.v$.$invalid) return;\n      this.disableSubmitButton = true;\n      const username = this.userInfo.username;\n      const password = this.userInfo.password;\n      this.$store\n        .dispatch('authentication/login', { username, password })\n        .then((PasswordChangeRequired) => {\n          localStorage.setItem('storedLanguage', this.userLocale);\n          localStorage.setItem('storedUsername', username);\n          this.$store.commit('global/setUsername', username);\n          this.$store.commit('global/setLanguagePreference', this.userLocale);\n          if (PasswordChangeRequired) {\n            this.$router.push('/change-password');\n          } else {\n            this.$router.push('/');\n          }\n        })\n        .catch((error) => console.log(error))\n        .finally(() => (this.disableSubmitButton = false));\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}