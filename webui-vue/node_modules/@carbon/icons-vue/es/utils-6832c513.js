/**
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Code generated by @carbon/icon-build-helpers. DO NOT EDIT.
 */
import { getAttributes } from '@carbon/icon-helpers';
import * as Vue from 'vue';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// automatically rewrite the binding into `import { h } from 'vue'` as this is
// currently causing issues in Vue 2 environments

function getVueExport(key) {
  return Vue[key];
}

var h = getVueExport('h');

var getSvgAttrs = function getSvgAttrs(title, svgAttrs, componentAttrs) {
  return getAttributes(_objectSpread2(_objectSpread2({}, svgAttrs), {}, {
    preserveAspectRatio: 'xMidYMid meet',
    xmlns: 'http://www.w3.org/2000/svg',
    // Special case here, we need to coordinate that we are using title,
    // potentially, to get the right focus attributes
    title: title
  }, componentAttrs));
};

var getVue2SvgAttrs = function getVue2SvgAttrs(title, svgAttrs, data, listeners) {
  var result = {
    attrs: getSvgAttrs(title, svgAttrs, data.attrs),
    on: listeners,
    style: _objectSpread2(_objectSpread2({}, data.staticStyle), data.style)
  }; // remove style set by getAttributes

  delete result.attrs.style;

  if (data.staticClass || data.class) {
    result.class = {};

    if (data.staticClass) {
      result.class[data.staticClass] = true;
    }

    if (data.class) {
      result.class[data.class] = true;
    }
  }

  return result;
};

var createSVGComponent = function createSVGComponent(name, svgAttrs, svgContent) {
  return _objectSpread2({
    // We use title as a prop name for the component
    // as it is not a valid attribute for an SVG HTML element
    props: {
      title: String
    },
    name: name
  }, h ? {
    // Vue 3 component
    setup: function setup(_ref, _ref2) {
      var title = _ref.title;
      var componentAttrs = _ref2.attrs,
          slots = _ref2.slots;
      return function () {
        return h('svg', getSvgAttrs(title, svgAttrs, componentAttrs), [].concat(_toConsumableArray(title ? [h('title', title)] : []), _toConsumableArray(svgContent.map(function (_ref3) {
          var elem = _ref3.elem,
              attrs = _ref3.attrs;
          return h(elem, attrs);
        })), _toConsumableArray(slots.default ? slots.default() : [])));
      };
    }
  } : {
    // Vue 2 component
    functional: true,
    render: function render(createElement, _ref4) {
      var title = _ref4.props.title,
          children = _ref4.children,
          data = _ref4.data,
          listeners = _ref4.listeners;
      return createElement('svg', getVue2SvgAttrs(title, svgAttrs, data, listeners), [].concat(_toConsumableArray(title ? [createElement('title', null, title)] : []), _toConsumableArray(svgContent.map(function (_ref5) {
        var elem = _ref5.elem,
            attrs = _ref5.attrs;
        return createElement(elem, {
          attrs: attrs
        });
      })), _toConsumableArray(children || [])));
    }
  });
};

export { createSVGComponent as c };
